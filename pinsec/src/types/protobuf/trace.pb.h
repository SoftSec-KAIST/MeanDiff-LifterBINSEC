// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#ifndef PROTOBUF_trace_2eproto__INCLUDED
#define PROTOBUF_trace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dba.pb.h"
#include "common.pb.h"
#include "syscall.pb.h"
#include "libcall.pb.h"
// @@protoc_insertion_point(includes)
namespace common {
class indirect_register_t;
class indirect_register_tDefaultTypeInternal;
extern indirect_register_tDefaultTypeInternal _indirect_register_t_default_instance_;
class memory_pol;
class memory_polDefaultTypeInternal;
extern memory_polDefaultTypeInternal _memory_pol_default_instance_;
class memory_t;
class memory_tDefaultTypeInternal;
extern memory_tDefaultTypeInternal _memory_t_default_instance_;
class register_t;
class register_tDefaultTypeInternal;
extern register_tDefaultTypeInternal _register_t_default_instance_;
class register_value_t;
class register_value_tDefaultTypeInternal;
extern register_value_tDefaultTypeInternal _register_value_t_default_instance_;
}  // namespace common
namespace dba {
class bitvector;
class bitvectorDefaultTypeInternal;
extern bitvectorDefaultTypeInternal _bitvector_default_instance_;
class codeaddress;
class codeaddressDefaultTypeInternal;
extern codeaddressDefaultTypeInternal _codeaddress_default_instance_;
class dbaLhs;
class dbaLhsDefaultTypeInternal;
extern dbaLhsDefaultTypeInternal _dbaLhs_default_instance_;
class dba_list;
class dba_listDefaultTypeInternal;
extern dba_listDefaultTypeInternal _dba_list_default_instance_;
class dbacodeaddress;
class dbacodeaddressDefaultTypeInternal;
extern dbacodeaddressDefaultTypeInternal _dbacodeaddress_default_instance_;
class dbacond;
class dbacondDefaultTypeInternal;
extern dbacondDefaultTypeInternal _dbacond_default_instance_;
class dbaexpr;
class dbaexprDefaultTypeInternal;
extern dbaexprDefaultTypeInternal _dbaexpr_default_instance_;
class dbainstr;
class dbainstrDefaultTypeInternal;
extern dbainstrDefaultTypeInternal _dbainstr_default_instance_;
class dbastopstate;
class dbastopstateDefaultTypeInternal;
extern dbastopstateDefaultTypeInternal _dbastopstate_default_instance_;
class dbatag;
class dbatagDefaultTypeInternal;
extern dbatagDefaultTypeInternal _dbatag_default_instance_;
}  // namespace dba
namespace libcall_types {
class atoi_pol;
class atoi_polDefaultTypeInternal;
extern atoi_polDefaultTypeInternal _atoi_pol_default_instance_;
class atoi_t;
class atoi_tDefaultTypeInternal;
extern atoi_tDefaultTypeInternal _atoi_t_default_instance_;
class bsearch_pol;
class bsearch_polDefaultTypeInternal;
extern bsearch_polDefaultTypeInternal _bsearch_pol_default_instance_;
class bsearch_t;
class bsearch_tDefaultTypeInternal;
extern bsearch_tDefaultTypeInternal _bsearch_t_default_instance_;
class ctype_b_loc_pol;
class ctype_b_loc_polDefaultTypeInternal;
extern ctype_b_loc_polDefaultTypeInternal _ctype_b_loc_pol_default_instance_;
class ctype_b_loc_t;
class ctype_b_loc_tDefaultTypeInternal;
extern ctype_b_loc_tDefaultTypeInternal _ctype_b_loc_t_default_instance_;
class exit_pol;
class exit_polDefaultTypeInternal;
extern exit_polDefaultTypeInternal _exit_pol_default_instance_;
class exit_t;
class exit_tDefaultTypeInternal;
extern exit_tDefaultTypeInternal _exit_t_default_instance_;
class fgetc_pol;
class fgetc_polDefaultTypeInternal;
extern fgetc_polDefaultTypeInternal _fgetc_pol_default_instance_;
class fgetc_t;
class fgetc_tDefaultTypeInternal;
extern fgetc_tDefaultTypeInternal _fgetc_t_default_instance_;
class fread_pol;
class fread_polDefaultTypeInternal;
extern fread_polDefaultTypeInternal _fread_pol_default_instance_;
class fread_t;
class fread_tDefaultTypeInternal;
extern fread_tDefaultTypeInternal _fread_t_default_instance_;
class free_pol;
class free_polDefaultTypeInternal;
extern free_polDefaultTypeInternal _free_pol_default_instance_;
class free_t;
class free_tDefaultTypeInternal;
extern free_tDefaultTypeInternal _free_t_default_instance_;
class fscanf_elem_t;
class fscanf_elem_tDefaultTypeInternal;
extern fscanf_elem_tDefaultTypeInternal _fscanf_elem_t_default_instance_;
class fscanf_pol;
class fscanf_polDefaultTypeInternal;
extern fscanf_polDefaultTypeInternal _fscanf_pol_default_instance_;
class fscanf_t;
class fscanf_tDefaultTypeInternal;
extern fscanf_tDefaultTypeInternal _fscanf_t_default_instance_;
class fstat_pol;
class fstat_polDefaultTypeInternal;
extern fstat_polDefaultTypeInternal _fstat_pol_default_instance_;
class fstat_t;
class fstat_tDefaultTypeInternal;
extern fstat_tDefaultTypeInternal _fstat_t_default_instance_;
class fxstat64_pol;
class fxstat64_polDefaultTypeInternal;
extern fxstat64_polDefaultTypeInternal _fxstat64_pol_default_instance_;
class fxstat64_t;
class fxstat64_tDefaultTypeInternal;
extern fxstat64_tDefaultTypeInternal _fxstat64_t_default_instance_;
class generic_pol;
class generic_polDefaultTypeInternal;
extern generic_polDefaultTypeInternal _generic_pol_default_instance_;
class generic_t;
class generic_tDefaultTypeInternal;
extern generic_tDefaultTypeInternal _generic_t_default_instance_;
class gethostname_pol;
class gethostname_polDefaultTypeInternal;
extern gethostname_polDefaultTypeInternal _gethostname_pol_default_instance_;
class gethostname_t;
class gethostname_tDefaultTypeInternal;
extern gethostname_tDefaultTypeInternal _gethostname_t_default_instance_;
class getmainargs_pol;
class getmainargs_polDefaultTypeInternal;
extern getmainargs_polDefaultTypeInternal _getmainargs_pol_default_instance_;
class getmainargs_t;
class getmainargs_tDefaultTypeInternal;
extern getmainargs_tDefaultTypeInternal _getmainargs_t_default_instance_;
class getmodulehandle_pol;
class getmodulehandle_polDefaultTypeInternal;
extern getmodulehandle_polDefaultTypeInternal _getmodulehandle_pol_default_instance_;
class getmodulehandle_t;
class getmodulehandle_tDefaultTypeInternal;
extern getmodulehandle_tDefaultTypeInternal _getmodulehandle_t_default_instance_;
class getprocaddress_pol;
class getprocaddress_polDefaultTypeInternal;
extern getprocaddress_polDefaultTypeInternal _getprocaddress_pol_default_instance_;
class getprocaddress_t;
class getprocaddress_tDefaultTypeInternal;
extern getprocaddress_tDefaultTypeInternal _getprocaddress_t_default_instance_;
class libcall_pol;
class libcall_polDefaultTypeInternal;
extern libcall_polDefaultTypeInternal _libcall_pol_default_instance_;
class libcall_t;
class libcall_tDefaultTypeInternal;
extern libcall_tDefaultTypeInternal _libcall_t_default_instance_;
class lseek_pol;
class lseek_polDefaultTypeInternal;
extern lseek_polDefaultTypeInternal _lseek_pol_default_instance_;
class lseek_t;
class lseek_tDefaultTypeInternal;
extern lseek_tDefaultTypeInternal _lseek_t_default_instance_;
class malloc_pol;
class malloc_polDefaultTypeInternal;
extern malloc_polDefaultTypeInternal _malloc_pol_default_instance_;
class malloc_t;
class malloc_tDefaultTypeInternal;
extern malloc_tDefaultTypeInternal _malloc_t_default_instance_;
class memcmp_pol;
class memcmp_polDefaultTypeInternal;
extern memcmp_polDefaultTypeInternal _memcmp_pol_default_instance_;
class memcmp_t;
class memcmp_tDefaultTypeInternal;
extern memcmp_tDefaultTypeInternal _memcmp_t_default_instance_;
class memcpy_pol;
class memcpy_polDefaultTypeInternal;
extern memcpy_polDefaultTypeInternal _memcpy_pol_default_instance_;
class memcpy_t;
class memcpy_tDefaultTypeInternal;
extern memcpy_tDefaultTypeInternal _memcpy_t_default_instance_;
class memset_pol;
class memset_polDefaultTypeInternal;
extern memset_polDefaultTypeInternal _memset_pol_default_instance_;
class memset_t;
class memset_tDefaultTypeInternal;
extern memset_tDefaultTypeInternal _memset_t_default_instance_;
class mmap_pol;
class mmap_polDefaultTypeInternal;
extern mmap_polDefaultTypeInternal _mmap_pol_default_instance_;
class mmap_t;
class mmap_tDefaultTypeInternal;
extern mmap_tDefaultTypeInternal _mmap_t_default_instance_;
class open_pol;
class open_polDefaultTypeInternal;
extern open_polDefaultTypeInternal _open_pol_default_instance_;
class open_t;
class open_tDefaultTypeInternal;
extern open_tDefaultTypeInternal _open_t_default_instance_;
class printf_pol;
class printf_polDefaultTypeInternal;
extern printf_polDefaultTypeInternal _printf_pol_default_instance_;
class printf_t;
class printf_tDefaultTypeInternal;
extern printf_tDefaultTypeInternal _printf_t_default_instance_;
class qsort_pol;
class qsort_polDefaultTypeInternal;
extern qsort_polDefaultTypeInternal _qsort_pol_default_instance_;
class qsort_t;
class qsort_tDefaultTypeInternal;
extern qsort_tDefaultTypeInternal _qsort_t_default_instance_;
class read_pol;
class read_polDefaultTypeInternal;
extern read_polDefaultTypeInternal _read_pol_default_instance_;
class read_t;
class read_tDefaultTypeInternal;
extern read_tDefaultTypeInternal _read_t_default_instance_;
class realloc_pol;
class realloc_polDefaultTypeInternal;
extern realloc_polDefaultTypeInternal _realloc_pol_default_instance_;
class realloc_t;
class realloc_tDefaultTypeInternal;
extern realloc_tDefaultTypeInternal _realloc_t_default_instance_;
class strchr_pol;
class strchr_polDefaultTypeInternal;
extern strchr_polDefaultTypeInternal _strchr_pol_default_instance_;
class strchr_t;
class strchr_tDefaultTypeInternal;
extern strchr_tDefaultTypeInternal _strchr_t_default_instance_;
class strcmp_pol;
class strcmp_polDefaultTypeInternal;
extern strcmp_polDefaultTypeInternal _strcmp_pol_default_instance_;
class strcmp_t;
class strcmp_tDefaultTypeInternal;
extern strcmp_tDefaultTypeInternal _strcmp_t_default_instance_;
class strcpy_pol;
class strcpy_polDefaultTypeInternal;
extern strcpy_polDefaultTypeInternal _strcpy_pol_default_instance_;
class strcpy_t;
class strcpy_tDefaultTypeInternal;
extern strcpy_tDefaultTypeInternal _strcpy_t_default_instance_;
class strncmp_pol;
class strncmp_polDefaultTypeInternal;
extern strncmp_polDefaultTypeInternal _strncmp_pol_default_instance_;
class strncmp_t;
class strncmp_tDefaultTypeInternal;
extern strncmp_tDefaultTypeInternal _strncmp_t_default_instance_;
class strncpy_pol;
class strncpy_polDefaultTypeInternal;
extern strncpy_polDefaultTypeInternal _strncpy_pol_default_instance_;
class strncpy_t;
class strncpy_tDefaultTypeInternal;
extern strncpy_tDefaultTypeInternal _strncpy_t_default_instance_;
}  // namespace libcall_types
namespace syscall_types {
class nr_open_t;
class nr_open_tDefaultTypeInternal;
extern nr_open_tDefaultTypeInternal _nr_open_t_default_instance_;
class nr_read_pol;
class nr_read_polDefaultTypeInternal;
extern nr_read_polDefaultTypeInternal _nr_read_pol_default_instance_;
class nr_read_t;
class nr_read_tDefaultTypeInternal;
extern nr_read_tDefaultTypeInternal _nr_read_t_default_instance_;
class nr_write_t;
class nr_write_tDefaultTypeInternal;
extern nr_write_tDefaultTypeInternal _nr_write_t_default_instance_;
class sys_generic_t;
class sys_generic_tDefaultTypeInternal;
extern sys_generic_tDefaultTypeInternal _sys_generic_t_default_instance_;
class syscall_pol;
class syscall_polDefaultTypeInternal;
extern syscall_polDefaultTypeInternal _syscall_pol_default_instance_;
class syscall_t;
class syscall_tDefaultTypeInternal;
extern syscall_tDefaultTypeInternal _syscall_t_default_instance_;
}  // namespace syscall_types
namespace trace_format {
class body_t;
class body_tDefaultTypeInternal;
extern body_tDefaultTypeInternal _body_t_default_instance_;
class chunk_t;
class chunk_tDefaultTypeInternal;
extern chunk_tDefaultTypeInternal _chunk_t_default_instance_;
class header_t;
class header_tDefaultTypeInternal;
extern header_tDefaultTypeInternal _header_t_default_instance_;
class ins_con_info_t;
class ins_con_info_tDefaultTypeInternal;
extern ins_con_info_tDefaultTypeInternal _ins_con_info_t_default_instance_;
class instruction_t;
class instruction_tDefaultTypeInternal;
extern instruction_tDefaultTypeInternal _instruction_t_default_instance_;
class metadata_t;
class metadata_tDefaultTypeInternal;
extern metadata_tDefaultTypeInternal _metadata_t_default_instance_;
class metadata_t_exception_t;
class metadata_t_exception_tDefaultTypeInternal;
extern metadata_t_exception_tDefaultTypeInternal _metadata_t_exception_t_default_instance_;
class trace_t;
class trace_tDefaultTypeInternal;
extern trace_tDefaultTypeInternal _trace_t_default_instance_;
}  // namespace trace_format

namespace trace_format {

namespace protobuf_trace_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_trace_2eproto

enum header_t_architecture_t {
  header_t_architecture_t_X86 = 0,
  header_t_architecture_t_X86_64 = 1
};
bool header_t_architecture_t_IsValid(int value);
const header_t_architecture_t header_t_architecture_t_architecture_t_MIN = header_t_architecture_t_X86;
const header_t_architecture_t header_t_architecture_t_architecture_t_MAX = header_t_architecture_t_X86_64;
const int header_t_architecture_t_architecture_t_ARRAYSIZE = header_t_architecture_t_architecture_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* header_t_architecture_t_descriptor();
inline const ::std::string& header_t_architecture_t_Name(header_t_architecture_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    header_t_architecture_t_descriptor(), value);
}
inline bool header_t_architecture_t_Parse(
    const ::std::string& name, header_t_architecture_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<header_t_architecture_t>(
    header_t_architecture_t_descriptor(), name, value);
}
enum metadata_t_typeid_metadata_t {
  metadata_t_typeid_metadata_t_INVALID_METADATA = 0,
  metadata_t_typeid_metadata_t_EXCEPTION_TYPE = 1,
  metadata_t_typeid_metadata_t_MODULE_TYPE = 2,
  metadata_t_typeid_metadata_t_WAVE_TYPE = 3
};
bool metadata_t_typeid_metadata_t_IsValid(int value);
const metadata_t_typeid_metadata_t metadata_t_typeid_metadata_t_typeid_metadata_t_MIN = metadata_t_typeid_metadata_t_INVALID_METADATA;
const metadata_t_typeid_metadata_t metadata_t_typeid_metadata_t_typeid_metadata_t_MAX = metadata_t_typeid_metadata_t_WAVE_TYPE;
const int metadata_t_typeid_metadata_t_typeid_metadata_t_ARRAYSIZE = metadata_t_typeid_metadata_t_typeid_metadata_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* metadata_t_typeid_metadata_t_descriptor();
inline const ::std::string& metadata_t_typeid_metadata_t_Name(metadata_t_typeid_metadata_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    metadata_t_typeid_metadata_t_descriptor(), value);
}
inline bool metadata_t_typeid_metadata_t_Parse(
    const ::std::string& name, metadata_t_typeid_metadata_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<metadata_t_typeid_metadata_t>(
    metadata_t_typeid_metadata_t_descriptor(), name, value);
}
enum ins_con_info_t_typeid_con_info_t {
  ins_con_info_t_typeid_con_info_t_INVALID = 0,
  ins_con_info_t_typeid_con_info_t_REGREAD = 1,
  ins_con_info_t_typeid_con_info_t_REGWRITE = 2,
  ins_con_info_t_typeid_con_info_t_MEMLOAD = 3,
  ins_con_info_t_typeid_con_info_t_MEMSTORE = 4,
  ins_con_info_t_typeid_con_info_t_CALL = 5,
  ins_con_info_t_typeid_con_info_t_SYSCALL = 6,
  ins_con_info_t_typeid_con_info_t_NOT_RETRIEVED = 7,
  ins_con_info_t_typeid_con_info_t_NEXT_ADDRESS = 8,
  ins_con_info_t_typeid_con_info_t_COMMENT = 9,
  ins_con_info_t_typeid_con_info_t_WAVE = 10
};
bool ins_con_info_t_typeid_con_info_t_IsValid(int value);
const ins_con_info_t_typeid_con_info_t ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MIN = ins_con_info_t_typeid_con_info_t_INVALID;
const ins_con_info_t_typeid_con_info_t ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MAX = ins_con_info_t_typeid_con_info_t_WAVE;
const int ins_con_info_t_typeid_con_info_t_typeid_con_info_t_ARRAYSIZE = ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* ins_con_info_t_typeid_con_info_t_descriptor();
inline const ::std::string& ins_con_info_t_typeid_con_info_t_Name(ins_con_info_t_typeid_con_info_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    ins_con_info_t_typeid_con_info_t_descriptor(), value);
}
inline bool ins_con_info_t_typeid_con_info_t_Parse(
    const ::std::string& name, ins_con_info_t_typeid_con_info_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ins_con_info_t_typeid_con_info_t>(
    ins_con_info_t_typeid_con_info_t_descriptor(), name, value);
}
enum body_t_typeid_body_t {
  body_t_typeid_body_t_METADATA = 0,
  body_t_typeid_body_t_INSTRUCTION = 1
};
bool body_t_typeid_body_t_IsValid(int value);
const body_t_typeid_body_t body_t_typeid_body_t_typeid_body_t_MIN = body_t_typeid_body_t_METADATA;
const body_t_typeid_body_t body_t_typeid_body_t_typeid_body_t_MAX = body_t_typeid_body_t_INSTRUCTION;
const int body_t_typeid_body_t_typeid_body_t_ARRAYSIZE = body_t_typeid_body_t_typeid_body_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* body_t_typeid_body_t_descriptor();
inline const ::std::string& body_t_typeid_body_t_Name(body_t_typeid_body_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    body_t_typeid_body_t_descriptor(), value);
}
inline bool body_t_typeid_body_t_Parse(
    const ::std::string& name, body_t_typeid_body_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<body_t_typeid_body_t>(
    body_t_typeid_body_t_descriptor(), name, value);
}
// ===================================================================

class header_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.header_t) */ {
 public:
  header_t();
  virtual ~header_t();

  header_t(const header_t& from);

  inline header_t& operator=(const header_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const header_t& default_instance();

  static inline const header_t* internal_default_instance() {
    return reinterpret_cast<const header_t*>(
               &_header_t_default_instance_);
  }

  void Swap(header_t* other);

  // implements Message ----------------------------------------------

  inline header_t* New() const PROTOBUF_FINAL { return New(NULL); }

  header_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const header_t& from);
  void MergeFrom(const header_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(header_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef header_t_architecture_t architecture_t;
  static const architecture_t X86 =
    header_t_architecture_t_X86;
  static const architecture_t X86_64 =
    header_t_architecture_t_X86_64;
  static inline bool architecture_t_IsValid(int value) {
    return header_t_architecture_t_IsValid(value);
  }
  static const architecture_t architecture_t_MIN =
    header_t_architecture_t_architecture_t_MIN;
  static const architecture_t architecture_t_MAX =
    header_t_architecture_t_architecture_t_MAX;
  static const int architecture_t_ARRAYSIZE =
    header_t_architecture_t_architecture_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  architecture_t_descriptor() {
    return header_t_architecture_t_descriptor();
  }
  static inline const ::std::string& architecture_t_Name(architecture_t value) {
    return header_t_architecture_t_Name(value);
  }
  static inline bool architecture_t_Parse(const ::std::string& name,
      architecture_t* value) {
    return header_t_architecture_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .trace_format.header_t.architecture_t architecture = 1;
  bool has_architecture() const;
  void clear_architecture();
  static const int kArchitectureFieldNumber = 1;
  ::trace_format::header_t_architecture_t architecture() const;
  void set_architecture(::trace_format::header_t_architecture_t value);

  // required .common.proto_size_t address_size = 2;
  bool has_address_size() const;
  void clear_address_size();
  static const int kAddressSizeFieldNumber = 2;
  ::common::proto_size_t address_size() const;
  void set_address_size(::common::proto_size_t value);

  // optional .common.ir_kind_t kind = 3 [default = DBA];
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  ::common::ir_kind_t kind() const;
  void set_kind(::common::ir_kind_t value);

  // @@protoc_insertion_point(class_scope:trace_format.header_t)
 private:
  void set_has_architecture();
  void clear_has_architecture();
  void set_has_address_size();
  void clear_has_address_size();
  void set_has_kind();
  void clear_has_kind();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int architecture_;
  int address_size_;
  int kind_;
  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class metadata_t_exception_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.metadata_t.exception_t) */ {
 public:
  metadata_t_exception_t();
  virtual ~metadata_t_exception_t();

  metadata_t_exception_t(const metadata_t_exception_t& from);

  inline metadata_t_exception_t& operator=(const metadata_t_exception_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const metadata_t_exception_t& default_instance();

  static inline const metadata_t_exception_t* internal_default_instance() {
    return reinterpret_cast<const metadata_t_exception_t*>(
               &_metadata_t_exception_t_default_instance_);
  }

  void Swap(metadata_t_exception_t* other);

  // implements Message ----------------------------------------------

  inline metadata_t_exception_t* New() const PROTOBUF_FINAL { return New(NULL); }

  metadata_t_exception_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const metadata_t_exception_t& from);
  void MergeFrom(const metadata_t_exception_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(metadata_t_exception_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 handler = 2;
  bool has_handler() const;
  void clear_handler();
  static const int kHandlerFieldNumber = 2;
  ::google::protobuf::uint64 handler() const;
  void set_handler(::google::protobuf::uint64 value);

  // required uint32 type_exception = 1;
  bool has_type_exception() const;
  void clear_type_exception();
  static const int kTypeExceptionFieldNumber = 1;
  ::google::protobuf::uint32 type_exception() const;
  void set_type_exception(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:trace_format.metadata_t.exception_t)
 private:
  void set_has_type_exception();
  void clear_has_type_exception();
  void set_has_handler();
  void clear_has_handler();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 handler_;
  ::google::protobuf::uint32 type_exception_;
  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class metadata_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.metadata_t) */ {
 public:
  metadata_t();
  virtual ~metadata_t();

  metadata_t(const metadata_t& from);

  inline metadata_t& operator=(const metadata_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const metadata_t& default_instance();

  enum MetadataContentCase {
    kModuleMetadata = 2,
    kExceptionMetadata = 3,
    kWaveMetadata = 4,
    METADATA_CONTENT_NOT_SET = 0,
  };

  static inline const metadata_t* internal_default_instance() {
    return reinterpret_cast<const metadata_t*>(
               &_metadata_t_default_instance_);
  }

  void Swap(metadata_t* other);

  // implements Message ----------------------------------------------

  inline metadata_t* New() const PROTOBUF_FINAL { return New(NULL); }

  metadata_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const metadata_t& from);
  void MergeFrom(const metadata_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(metadata_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef metadata_t_exception_t exception_t;

  typedef metadata_t_typeid_metadata_t typeid_metadata_t;
  static const typeid_metadata_t INVALID_METADATA =
    metadata_t_typeid_metadata_t_INVALID_METADATA;
  static const typeid_metadata_t EXCEPTION_TYPE =
    metadata_t_typeid_metadata_t_EXCEPTION_TYPE;
  static const typeid_metadata_t MODULE_TYPE =
    metadata_t_typeid_metadata_t_MODULE_TYPE;
  static const typeid_metadata_t WAVE_TYPE =
    metadata_t_typeid_metadata_t_WAVE_TYPE;
  static inline bool typeid_metadata_t_IsValid(int value) {
    return metadata_t_typeid_metadata_t_IsValid(value);
  }
  static const typeid_metadata_t typeid_metadata_t_MIN =
    metadata_t_typeid_metadata_t_typeid_metadata_t_MIN;
  static const typeid_metadata_t typeid_metadata_t_MAX =
    metadata_t_typeid_metadata_t_typeid_metadata_t_MAX;
  static const int typeid_metadata_t_ARRAYSIZE =
    metadata_t_typeid_metadata_t_typeid_metadata_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  typeid_metadata_t_descriptor() {
    return metadata_t_typeid_metadata_t_descriptor();
  }
  static inline const ::std::string& typeid_metadata_t_Name(typeid_metadata_t value) {
    return metadata_t_typeid_metadata_t_Name(value);
  }
  static inline bool typeid_metadata_t_Parse(const ::std::string& name,
      typeid_metadata_t* value) {
    return metadata_t_typeid_metadata_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 1;
  ::trace_format::metadata_t_typeid_metadata_t typeid_() const;
  void set_typeid_(::trace_format::metadata_t_typeid_metadata_t value);

  // optional string module_metadata = 2;
  bool has_module_metadata() const;
  void clear_module_metadata();
  static const int kModuleMetadataFieldNumber = 2;
  const ::std::string& module_metadata() const;
  void set_module_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_module_metadata(::std::string&& value);
  #endif
  void set_module_metadata(const char* value);
  void set_module_metadata(const char* value, size_t size);
  ::std::string* mutable_module_metadata();
  ::std::string* release_module_metadata();
  void set_allocated_module_metadata(::std::string* module_metadata);

  // optional .trace_format.metadata_t.exception_t exception_metadata = 3;
  bool has_exception_metadata() const;
  void clear_exception_metadata();
  static const int kExceptionMetadataFieldNumber = 3;
  const ::trace_format::metadata_t_exception_t& exception_metadata() const;
  ::trace_format::metadata_t_exception_t* mutable_exception_metadata();
  ::trace_format::metadata_t_exception_t* release_exception_metadata();
  void set_allocated_exception_metadata(::trace_format::metadata_t_exception_t* exception_metadata);

  // optional uint32 wave_metadata = 4;
  bool has_wave_metadata() const;
  void clear_wave_metadata();
  static const int kWaveMetadataFieldNumber = 4;
  ::google::protobuf::uint32 wave_metadata() const;
  void set_wave_metadata(::google::protobuf::uint32 value);

  MetadataContentCase metadata_content_case() const;
  // @@protoc_insertion_point(class_scope:trace_format.metadata_t)
 private:
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_module_metadata();
  void set_has_exception_metadata();
  void set_has_wave_metadata();

  inline bool has_metadata_content() const;
  void clear_metadata_content();
  inline void clear_has_metadata_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int typeid__;
  union MetadataContentUnion {
    MetadataContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr module_metadata_;
    ::trace_format::metadata_t_exception_t* exception_metadata_;
    ::google::protobuf::uint32 wave_metadata_;
  } metadata_content_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ins_con_info_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.ins_con_info_t) */ {
 public:
  ins_con_info_t();
  virtual ~ins_con_info_t();

  ins_con_info_t(const ins_con_info_t& from);

  inline ins_con_info_t& operator=(const ins_con_info_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ins_con_info_t& default_instance();

  enum ConcInfoContentCase {
    kReadRegister = 2,
    kWriteRegister = 3,
    kLoadMemory = 4,
    kStoreMemory = 5,
    kCall = 6,
    kSystemCall = 8,
    kNextAddress = 9,
    kReservedComment = 10,
    kWave = 11,
    CONC_INFO_CONTENT_NOT_SET = 0,
  };

  static inline const ins_con_info_t* internal_default_instance() {
    return reinterpret_cast<const ins_con_info_t*>(
               &_ins_con_info_t_default_instance_);
  }

  void Swap(ins_con_info_t* other);

  // implements Message ----------------------------------------------

  inline ins_con_info_t* New() const PROTOBUF_FINAL { return New(NULL); }

  ins_con_info_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ins_con_info_t& from);
  void MergeFrom(const ins_con_info_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ins_con_info_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ins_con_info_t_typeid_con_info_t typeid_con_info_t;
  static const typeid_con_info_t INVALID =
    ins_con_info_t_typeid_con_info_t_INVALID;
  static const typeid_con_info_t REGREAD =
    ins_con_info_t_typeid_con_info_t_REGREAD;
  static const typeid_con_info_t REGWRITE =
    ins_con_info_t_typeid_con_info_t_REGWRITE;
  static const typeid_con_info_t MEMLOAD =
    ins_con_info_t_typeid_con_info_t_MEMLOAD;
  static const typeid_con_info_t MEMSTORE =
    ins_con_info_t_typeid_con_info_t_MEMSTORE;
  static const typeid_con_info_t CALL =
    ins_con_info_t_typeid_con_info_t_CALL;
  static const typeid_con_info_t SYSCALL =
    ins_con_info_t_typeid_con_info_t_SYSCALL;
  static const typeid_con_info_t NOT_RETRIEVED =
    ins_con_info_t_typeid_con_info_t_NOT_RETRIEVED;
  static const typeid_con_info_t NEXT_ADDRESS =
    ins_con_info_t_typeid_con_info_t_NEXT_ADDRESS;
  static const typeid_con_info_t COMMENT =
    ins_con_info_t_typeid_con_info_t_COMMENT;
  static const typeid_con_info_t WAVE =
    ins_con_info_t_typeid_con_info_t_WAVE;
  static inline bool typeid_con_info_t_IsValid(int value) {
    return ins_con_info_t_typeid_con_info_t_IsValid(value);
  }
  static const typeid_con_info_t typeid_con_info_t_MIN =
    ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MIN;
  static const typeid_con_info_t typeid_con_info_t_MAX =
    ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MAX;
  static const int typeid_con_info_t_ARRAYSIZE =
    ins_con_info_t_typeid_con_info_t_typeid_con_info_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  typeid_con_info_t_descriptor() {
    return ins_con_info_t_typeid_con_info_t_descriptor();
  }
  static inline const ::std::string& typeid_con_info_t_Name(typeid_con_info_t value) {
    return ins_con_info_t_typeid_con_info_t_Name(value);
  }
  static inline bool typeid_con_info_t_Parse(const ::std::string& name,
      typeid_con_info_t* value) {
    return ins_con_info_t_typeid_con_info_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 1;
  ::trace_format::ins_con_info_t_typeid_con_info_t typeid_() const;
  void set_typeid_(::trace_format::ins_con_info_t_typeid_con_info_t value);

  // optional .common.register_t read_register = 2;
  bool has_read_register() const;
  void clear_read_register();
  static const int kReadRegisterFieldNumber = 2;
  const ::common::register_t& read_register() const;
  ::common::register_t* mutable_read_register();
  ::common::register_t* release_read_register();
  void set_allocated_read_register(::common::register_t* read_register);

  // optional .common.register_t write_register = 3;
  bool has_write_register() const;
  void clear_write_register();
  static const int kWriteRegisterFieldNumber = 3;
  const ::common::register_t& write_register() const;
  ::common::register_t* mutable_write_register();
  ::common::register_t* release_write_register();
  void set_allocated_write_register(::common::register_t* write_register);

  // optional .common.memory_t load_memory = 4;
  bool has_load_memory() const;
  void clear_load_memory();
  static const int kLoadMemoryFieldNumber = 4;
  const ::common::memory_t& load_memory() const;
  ::common::memory_t* mutable_load_memory();
  ::common::memory_t* release_load_memory();
  void set_allocated_load_memory(::common::memory_t* load_memory);

  // optional .common.memory_t store_memory = 5;
  bool has_store_memory() const;
  void clear_store_memory();
  static const int kStoreMemoryFieldNumber = 5;
  const ::common::memory_t& store_memory() const;
  ::common::memory_t* mutable_store_memory();
  ::common::memory_t* release_store_memory();
  void set_allocated_store_memory(::common::memory_t* store_memory);

  // optional .libcall_types.libcall_t call = 6;
  bool has_call() const;
  void clear_call();
  static const int kCallFieldNumber = 6;
  const ::libcall_types::libcall_t& call() const;
  ::libcall_types::libcall_t* mutable_call();
  ::libcall_types::libcall_t* release_call();
  void set_allocated_call(::libcall_types::libcall_t* call);

  // optional .syscall_types.syscall_t system_call = 8;
  bool has_system_call() const;
  void clear_system_call();
  static const int kSystemCallFieldNumber = 8;
  const ::syscall_types::syscall_t& system_call() const;
  ::syscall_types::syscall_t* mutable_system_call();
  ::syscall_types::syscall_t* release_system_call();
  void set_allocated_system_call(::syscall_types::syscall_t* system_call);

  // optional uint64 next_address = 9;
  bool has_next_address() const;
  void clear_next_address();
  static const int kNextAddressFieldNumber = 9;
  ::google::protobuf::uint64 next_address() const;
  void set_next_address(::google::protobuf::uint64 value);

  // optional string reserved_comment = 10;
  bool has_reserved_comment() const;
  void clear_reserved_comment();
  static const int kReservedCommentFieldNumber = 10;
  const ::std::string& reserved_comment() const;
  void set_reserved_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_reserved_comment(::std::string&& value);
  #endif
  void set_reserved_comment(const char* value);
  void set_reserved_comment(const char* value, size_t size);
  ::std::string* mutable_reserved_comment();
  ::std::string* release_reserved_comment();
  void set_allocated_reserved_comment(::std::string* reserved_comment);

  // optional uint32 wave = 11;
  bool has_wave() const;
  void clear_wave();
  static const int kWaveFieldNumber = 11;
  ::google::protobuf::uint32 wave() const;
  void set_wave(::google::protobuf::uint32 value);

  ConcInfoContentCase conc_info_content_case() const;
  // @@protoc_insertion_point(class_scope:trace_format.ins_con_info_t)
 private:
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_read_register();
  void set_has_write_register();
  void set_has_load_memory();
  void set_has_store_memory();
  void set_has_call();
  void set_has_system_call();
  void set_has_next_address();
  void set_has_reserved_comment();
  void set_has_wave();

  inline bool has_conc_info_content() const;
  void clear_conc_info_content();
  inline void clear_has_conc_info_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int typeid__;
  union ConcInfoContentUnion {
    ConcInfoContentUnion() {}
    ::common::register_t* read_register_;
    ::common::register_t* write_register_;
    ::common::memory_t* load_memory_;
    ::common::memory_t* store_memory_;
    ::libcall_types::libcall_t* call_;
    ::syscall_types::syscall_t* system_call_;
    ::google::protobuf::uint64 next_address_;
    ::google::protobuf::internal::ArenaStringPtr reserved_comment_;
    ::google::protobuf::uint32 wave_;
  } conc_info_content_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class instruction_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.instruction_t) */ {
 public:
  instruction_t();
  virtual ~instruction_t();

  instruction_t(const instruction_t& from);

  inline instruction_t& operator=(const instruction_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const instruction_t& default_instance();

  static inline const instruction_t* internal_default_instance() {
    return reinterpret_cast<const instruction_t*>(
               &_instruction_t_default_instance_);
  }

  void Swap(instruction_t* other);

  // implements Message ----------------------------------------------

  inline instruction_t* New() const PROTOBUF_FINAL { return New(NULL); }

  instruction_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const instruction_t& from);
  void MergeFrom(const instruction_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(instruction_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trace_format.ins_con_info_t concrete_infos = 4;
  int concrete_infos_size() const;
  void clear_concrete_infos();
  static const int kConcreteInfosFieldNumber = 4;
  const ::trace_format::ins_con_info_t& concrete_infos(int index) const;
  ::trace_format::ins_con_info_t* mutable_concrete_infos(int index);
  ::trace_format::ins_con_info_t* add_concrete_infos();
  ::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t >*
      mutable_concrete_infos();
  const ::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t >&
      concrete_infos() const;

  // required bytes opcode = 3;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 3;
  const ::std::string& opcode() const;
  void set_opcode(const ::std::string& value);
  #if LANG_CXX11
  void set_opcode(::std::string&& value);
  #endif
  void set_opcode(const char* value);
  void set_opcode(const void* value, size_t size);
  ::std::string* mutable_opcode();
  ::std::string* release_opcode();
  void set_allocated_opcode(::std::string* opcode);

  // optional .dba.dba_list dba_instrs = 5;
  bool has_dba_instrs() const;
  void clear_dba_instrs();
  static const int kDbaInstrsFieldNumber = 5;
  const ::dba::dba_list& dba_instrs() const;
  ::dba::dba_list* mutable_dba_instrs();
  ::dba::dba_list* release_dba_instrs();
  void set_allocated_dba_instrs(::dba::dba_list* dba_instrs);

  // required uint64 address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // required uint32 thread_id = 1;
  bool has_thread_id() const;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::uint32 thread_id() const;
  void set_thread_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:trace_format.instruction_t)
 private:
  void set_has_thread_id();
  void clear_has_thread_id();
  void set_has_address();
  void clear_has_address();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_dba_instrs();
  void clear_has_dba_instrs();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t > concrete_infos_;
  ::google::protobuf::internal::ArenaStringPtr opcode_;
  ::dba::dba_list* dba_instrs_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::uint32 thread_id_;
  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class body_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.body_t) */ {
 public:
  body_t();
  virtual ~body_t();

  body_t(const body_t& from);

  inline body_t& operator=(const body_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const body_t& default_instance();

  enum BodyContentCase {
    kMetadata = 2,
    kInstruction = 3,
    BODY_CONTENT_NOT_SET = 0,
  };

  static inline const body_t* internal_default_instance() {
    return reinterpret_cast<const body_t*>(
               &_body_t_default_instance_);
  }

  void Swap(body_t* other);

  // implements Message ----------------------------------------------

  inline body_t* New() const PROTOBUF_FINAL { return New(NULL); }

  body_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const body_t& from);
  void MergeFrom(const body_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(body_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef body_t_typeid_body_t typeid_body_t;
  static const typeid_body_t METADATA =
    body_t_typeid_body_t_METADATA;
  static const typeid_body_t INSTRUCTION =
    body_t_typeid_body_t_INSTRUCTION;
  static inline bool typeid_body_t_IsValid(int value) {
    return body_t_typeid_body_t_IsValid(value);
  }
  static const typeid_body_t typeid_body_t_MIN =
    body_t_typeid_body_t_typeid_body_t_MIN;
  static const typeid_body_t typeid_body_t_MAX =
    body_t_typeid_body_t_typeid_body_t_MAX;
  static const int typeid_body_t_ARRAYSIZE =
    body_t_typeid_body_t_typeid_body_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  typeid_body_t_descriptor() {
    return body_t_typeid_body_t_descriptor();
  }
  static inline const ::std::string& typeid_body_t_Name(typeid_body_t value) {
    return body_t_typeid_body_t_Name(value);
  }
  static inline bool typeid_body_t_Parse(const ::std::string& name,
      typeid_body_t* value) {
    return body_t_typeid_body_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .trace_format.body_t.typeid_body_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  static const int kTypeidFieldNumber = 1;
  ::trace_format::body_t_typeid_body_t typeid_() const;
  void set_typeid_(::trace_format::body_t_typeid_body_t value);

  // optional .trace_format.metadata_t metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::trace_format::metadata_t& metadata() const;
  ::trace_format::metadata_t* mutable_metadata();
  ::trace_format::metadata_t* release_metadata();
  void set_allocated_metadata(::trace_format::metadata_t* metadata);

  // optional .trace_format.instruction_t instruction = 3;
  bool has_instruction() const;
  void clear_instruction();
  static const int kInstructionFieldNumber = 3;
  const ::trace_format::instruction_t& instruction() const;
  ::trace_format::instruction_t* mutable_instruction();
  ::trace_format::instruction_t* release_instruction();
  void set_allocated_instruction(::trace_format::instruction_t* instruction);

  BodyContentCase body_content_case() const;
  // @@protoc_insertion_point(class_scope:trace_format.body_t)
 private:
  void set_has_typeid_();
  void clear_has_typeid_();
  void set_has_metadata();
  void set_has_instruction();

  inline bool has_body_content() const;
  void clear_body_content();
  inline void clear_has_body_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int typeid__;
  union BodyContentUnion {
    BodyContentUnion() {}
    ::trace_format::metadata_t* metadata_;
    ::trace_format::instruction_t* instruction_;
  } body_content_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class chunk_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.chunk_t) */ {
 public:
  chunk_t();
  virtual ~chunk_t();

  chunk_t(const chunk_t& from);

  inline chunk_t& operator=(const chunk_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chunk_t& default_instance();

  static inline const chunk_t* internal_default_instance() {
    return reinterpret_cast<const chunk_t*>(
               &_chunk_t_default_instance_);
  }

  void Swap(chunk_t* other);

  // implements Message ----------------------------------------------

  inline chunk_t* New() const PROTOBUF_FINAL { return New(NULL); }

  chunk_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const chunk_t& from);
  void MergeFrom(const chunk_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(chunk_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trace_format.body_t body = 1;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const ::trace_format::body_t& body(int index) const;
  ::trace_format::body_t* mutable_body(int index);
  ::trace_format::body_t* add_body();
  ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >&
      body() const;

  // @@protoc_insertion_point(class_scope:trace_format.chunk_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::trace_format::body_t > body_;
  friend struct  protobuf_trace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class trace_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trace_format.trace_t) */ {
 public:
  trace_t();
  virtual ~trace_t();

  trace_t(const trace_t& from);

  inline trace_t& operator=(const trace_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const trace_t& default_instance();

  static inline const trace_t* internal_default_instance() {
    return reinterpret_cast<const trace_t*>(
               &_trace_t_default_instance_);
  }

  void Swap(trace_t* other);

  // implements Message ----------------------------------------------

  inline trace_t* New() const PROTOBUF_FINAL { return New(NULL); }

  trace_t* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const trace_t& from);
  void MergeFrom(const trace_t& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(trace_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .trace_format.body_t body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::trace_format::body_t& body(int index) const;
  ::trace_format::body_t* mutable_body(int index);
  ::trace_format::body_t* add_body();
  ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >&
      body() const;

  // required .trace_format.header_t header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::trace_format::header_t& header() const;
  ::trace_format::header_t* mutable_header();
  ::trace_format::header_t* release_header();
  void set_allocated_header(::trace_format::header_t* header);

  // @@protoc_insertion_point(class_scope:trace_format.trace_t)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::trace_format::body_t > body_;
  ::trace_format::header_t* header_;
  friend struct  protobuf_trace_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// header_t

// required .trace_format.header_t.architecture_t architecture = 1;
inline bool header_t::has_architecture() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void header_t::set_has_architecture() {
  _has_bits_[0] |= 0x00000001u;
}
inline void header_t::clear_has_architecture() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void header_t::clear_architecture() {
  architecture_ = 0;
  clear_has_architecture();
}
inline ::trace_format::header_t_architecture_t header_t::architecture() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.architecture)
  return static_cast< ::trace_format::header_t_architecture_t >(architecture_);
}
inline void header_t::set_architecture(::trace_format::header_t_architecture_t value) {
  assert(::trace_format::header_t_architecture_t_IsValid(value));
  set_has_architecture();
  architecture_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.architecture)
}

// required .common.proto_size_t address_size = 2;
inline bool header_t::has_address_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void header_t::set_has_address_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void header_t::clear_has_address_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void header_t::clear_address_size() {
  address_size_ = 0;
  clear_has_address_size();
}
inline ::common::proto_size_t header_t::address_size() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.address_size)
  return static_cast< ::common::proto_size_t >(address_size_);
}
inline void header_t::set_address_size(::common::proto_size_t value) {
  assert(::common::proto_size_t_IsValid(value));
  set_has_address_size();
  address_size_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.address_size)
}

// optional .common.ir_kind_t kind = 3 [default = DBA];
inline bool header_t::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void header_t::set_has_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void header_t::clear_has_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void header_t::clear_kind() {
  kind_ = 1;
  clear_has_kind();
}
inline ::common::ir_kind_t header_t::kind() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.kind)
  return static_cast< ::common::ir_kind_t >(kind_);
}
inline void header_t::set_kind(::common::ir_kind_t value) {
  assert(::common::ir_kind_t_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.kind)
}

// -------------------------------------------------------------------

// metadata_t_exception_t

// required uint32 type_exception = 1;
inline bool metadata_t_exception_t::has_type_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void metadata_t_exception_t::set_has_type_exception() {
  _has_bits_[0] |= 0x00000002u;
}
inline void metadata_t_exception_t::clear_has_type_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void metadata_t_exception_t::clear_type_exception() {
  type_exception_ = 0u;
  clear_has_type_exception();
}
inline ::google::protobuf::uint32 metadata_t_exception_t::type_exception() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_t.type_exception)
  return type_exception_;
}
inline void metadata_t_exception_t::set_type_exception(::google::protobuf::uint32 value) {
  set_has_type_exception();
  type_exception_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.exception_t.type_exception)
}

// required uint64 handler = 2;
inline bool metadata_t_exception_t::has_handler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void metadata_t_exception_t::set_has_handler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void metadata_t_exception_t::clear_has_handler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void metadata_t_exception_t::clear_handler() {
  handler_ = GOOGLE_ULONGLONG(0);
  clear_has_handler();
}
inline ::google::protobuf::uint64 metadata_t_exception_t::handler() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_t.handler)
  return handler_;
}
inline void metadata_t_exception_t::set_handler(::google::protobuf::uint64 value) {
  set_has_handler();
  handler_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.exception_t.handler)
}

// -------------------------------------------------------------------

// metadata_t

// required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
inline bool metadata_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void metadata_t::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void metadata_t::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void metadata_t::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::trace_format::metadata_t_typeid_metadata_t metadata_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.typeid)
  return static_cast< ::trace_format::metadata_t_typeid_metadata_t >(typeid__);
}
inline void metadata_t::set_typeid_(::trace_format::metadata_t_typeid_metadata_t value) {
  assert(::trace_format::metadata_t_typeid_metadata_t_IsValid(value));
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.typeid)
}

// optional string module_metadata = 2;
inline bool metadata_t::has_module_metadata() const {
  return metadata_content_case() == kModuleMetadata;
}
inline void metadata_t::set_has_module_metadata() {
  _oneof_case_[0] = kModuleMetadata;
}
inline void metadata_t::clear_module_metadata() {
  if (has_module_metadata()) {
    metadata_content_.module_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_metadata_content();
  }
}
inline const ::std::string& metadata_t::module_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.module_metadata)
  if (has_module_metadata()) {
    return metadata_content_.module_metadata_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void metadata_t::set_module_metadata(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
}
#if LANG_CXX11
inline void metadata_t::set_module_metadata(::std::string&& value) {
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.metadata_t.module_metadata)
}
#endif
inline void metadata_t::set_module_metadata(const char* value) {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.metadata_t.module_metadata)
}
inline void metadata_t::set_module_metadata(const char* value, size_t size) {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.metadata_t.module_metadata)
}
inline ::std::string* metadata_t::mutable_module_metadata() {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.metadata_t.module_metadata)
  return metadata_content_.module_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* metadata_t::release_module_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.metadata_t.module_metadata)
  if (has_module_metadata()) {
    clear_has_metadata_content();
    return metadata_content_.module_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void metadata_t::set_allocated_module_metadata(::std::string* module_metadata) {
  if (!has_module_metadata()) {
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_metadata_content();
  if (module_metadata != NULL) {
    set_has_module_metadata();
    metadata_content_.module_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        module_metadata);
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.metadata_t.module_metadata)
}

// optional .trace_format.metadata_t.exception_t exception_metadata = 3;
inline bool metadata_t::has_exception_metadata() const {
  return metadata_content_case() == kExceptionMetadata;
}
inline void metadata_t::set_has_exception_metadata() {
  _oneof_case_[0] = kExceptionMetadata;
}
inline void metadata_t::clear_exception_metadata() {
  if (has_exception_metadata()) {
    delete metadata_content_.exception_metadata_;
    clear_has_metadata_content();
  }
}
inline  const ::trace_format::metadata_t_exception_t& metadata_t::exception_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_metadata)
  return has_exception_metadata()
      ? *metadata_content_.exception_metadata_
      : ::trace_format::metadata_t_exception_t::default_instance();
}
inline ::trace_format::metadata_t_exception_t* metadata_t::mutable_exception_metadata() {
  if (!has_exception_metadata()) {
    clear_metadata_content();
    set_has_exception_metadata();
    metadata_content_.exception_metadata_ = new ::trace_format::metadata_t_exception_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.metadata_t.exception_metadata)
  return metadata_content_.exception_metadata_;
}
inline ::trace_format::metadata_t_exception_t* metadata_t::release_exception_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.metadata_t.exception_metadata)
  if (has_exception_metadata()) {
    clear_has_metadata_content();
    ::trace_format::metadata_t_exception_t* temp = metadata_content_.exception_metadata_;
    metadata_content_.exception_metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void metadata_t::set_allocated_exception_metadata(::trace_format::metadata_t_exception_t* exception_metadata) {
  clear_metadata_content();
  if (exception_metadata) {
    set_has_exception_metadata();
    metadata_content_.exception_metadata_ = exception_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.metadata_t.exception_metadata)
}

// optional uint32 wave_metadata = 4;
inline bool metadata_t::has_wave_metadata() const {
  return metadata_content_case() == kWaveMetadata;
}
inline void metadata_t::set_has_wave_metadata() {
  _oneof_case_[0] = kWaveMetadata;
}
inline void metadata_t::clear_wave_metadata() {
  if (has_wave_metadata()) {
    metadata_content_.wave_metadata_ = 0u;
    clear_has_metadata_content();
  }
}
inline ::google::protobuf::uint32 metadata_t::wave_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.wave_metadata)
  if (has_wave_metadata()) {
    return metadata_content_.wave_metadata_;
  }
  return 0u;
}
inline void metadata_t::set_wave_metadata(::google::protobuf::uint32 value) {
  if (!has_wave_metadata()) {
    clear_metadata_content();
    set_has_wave_metadata();
  }
  metadata_content_.wave_metadata_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.wave_metadata)
}

inline bool metadata_t::has_metadata_content() const {
  return metadata_content_case() != METADATA_CONTENT_NOT_SET;
}
inline void metadata_t::clear_has_metadata_content() {
  _oneof_case_[0] = METADATA_CONTENT_NOT_SET;
}
inline metadata_t::MetadataContentCase metadata_t::metadata_content_case() const {
  return metadata_t::MetadataContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ins_con_info_t

// required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
inline bool ins_con_info_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ins_con_info_t::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ins_con_info_t::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ins_con_info_t::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::trace_format::ins_con_info_t_typeid_con_info_t ins_con_info_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.typeid)
  return static_cast< ::trace_format::ins_con_info_t_typeid_con_info_t >(typeid__);
}
inline void ins_con_info_t::set_typeid_(::trace_format::ins_con_info_t_typeid_con_info_t value) {
  assert(::trace_format::ins_con_info_t_typeid_con_info_t_IsValid(value));
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.typeid)
}

// optional .common.register_t read_register = 2;
inline bool ins_con_info_t::has_read_register() const {
  return conc_info_content_case() == kReadRegister;
}
inline void ins_con_info_t::set_has_read_register() {
  _oneof_case_[0] = kReadRegister;
}
inline void ins_con_info_t::clear_read_register() {
  if (has_read_register()) {
    delete conc_info_content_.read_register_;
    clear_has_conc_info_content();
  }
}
inline  const ::common::register_t& ins_con_info_t::read_register() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.read_register)
  return has_read_register()
      ? *conc_info_content_.read_register_
      : ::common::register_t::default_instance();
}
inline ::common::register_t* ins_con_info_t::mutable_read_register() {
  if (!has_read_register()) {
    clear_conc_info_content();
    set_has_read_register();
    conc_info_content_.read_register_ = new ::common::register_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.read_register)
  return conc_info_content_.read_register_;
}
inline ::common::register_t* ins_con_info_t::release_read_register() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.read_register)
  if (has_read_register()) {
    clear_has_conc_info_content();
    ::common::register_t* temp = conc_info_content_.read_register_;
    conc_info_content_.read_register_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_read_register(::common::register_t* read_register) {
  clear_conc_info_content();
  if (read_register) {
    set_has_read_register();
    conc_info_content_.read_register_ = read_register;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.read_register)
}

// optional .common.register_t write_register = 3;
inline bool ins_con_info_t::has_write_register() const {
  return conc_info_content_case() == kWriteRegister;
}
inline void ins_con_info_t::set_has_write_register() {
  _oneof_case_[0] = kWriteRegister;
}
inline void ins_con_info_t::clear_write_register() {
  if (has_write_register()) {
    delete conc_info_content_.write_register_;
    clear_has_conc_info_content();
  }
}
inline  const ::common::register_t& ins_con_info_t::write_register() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.write_register)
  return has_write_register()
      ? *conc_info_content_.write_register_
      : ::common::register_t::default_instance();
}
inline ::common::register_t* ins_con_info_t::mutable_write_register() {
  if (!has_write_register()) {
    clear_conc_info_content();
    set_has_write_register();
    conc_info_content_.write_register_ = new ::common::register_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.write_register)
  return conc_info_content_.write_register_;
}
inline ::common::register_t* ins_con_info_t::release_write_register() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.write_register)
  if (has_write_register()) {
    clear_has_conc_info_content();
    ::common::register_t* temp = conc_info_content_.write_register_;
    conc_info_content_.write_register_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_write_register(::common::register_t* write_register) {
  clear_conc_info_content();
  if (write_register) {
    set_has_write_register();
    conc_info_content_.write_register_ = write_register;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.write_register)
}

// optional .common.memory_t load_memory = 4;
inline bool ins_con_info_t::has_load_memory() const {
  return conc_info_content_case() == kLoadMemory;
}
inline void ins_con_info_t::set_has_load_memory() {
  _oneof_case_[0] = kLoadMemory;
}
inline void ins_con_info_t::clear_load_memory() {
  if (has_load_memory()) {
    delete conc_info_content_.load_memory_;
    clear_has_conc_info_content();
  }
}
inline  const ::common::memory_t& ins_con_info_t::load_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.load_memory)
  return has_load_memory()
      ? *conc_info_content_.load_memory_
      : ::common::memory_t::default_instance();
}
inline ::common::memory_t* ins_con_info_t::mutable_load_memory() {
  if (!has_load_memory()) {
    clear_conc_info_content();
    set_has_load_memory();
    conc_info_content_.load_memory_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.load_memory)
  return conc_info_content_.load_memory_;
}
inline ::common::memory_t* ins_con_info_t::release_load_memory() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.load_memory)
  if (has_load_memory()) {
    clear_has_conc_info_content();
    ::common::memory_t* temp = conc_info_content_.load_memory_;
    conc_info_content_.load_memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_load_memory(::common::memory_t* load_memory) {
  clear_conc_info_content();
  if (load_memory) {
    set_has_load_memory();
    conc_info_content_.load_memory_ = load_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.load_memory)
}

// optional .common.memory_t store_memory = 5;
inline bool ins_con_info_t::has_store_memory() const {
  return conc_info_content_case() == kStoreMemory;
}
inline void ins_con_info_t::set_has_store_memory() {
  _oneof_case_[0] = kStoreMemory;
}
inline void ins_con_info_t::clear_store_memory() {
  if (has_store_memory()) {
    delete conc_info_content_.store_memory_;
    clear_has_conc_info_content();
  }
}
inline  const ::common::memory_t& ins_con_info_t::store_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.store_memory)
  return has_store_memory()
      ? *conc_info_content_.store_memory_
      : ::common::memory_t::default_instance();
}
inline ::common::memory_t* ins_con_info_t::mutable_store_memory() {
  if (!has_store_memory()) {
    clear_conc_info_content();
    set_has_store_memory();
    conc_info_content_.store_memory_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.store_memory)
  return conc_info_content_.store_memory_;
}
inline ::common::memory_t* ins_con_info_t::release_store_memory() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.store_memory)
  if (has_store_memory()) {
    clear_has_conc_info_content();
    ::common::memory_t* temp = conc_info_content_.store_memory_;
    conc_info_content_.store_memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_store_memory(::common::memory_t* store_memory) {
  clear_conc_info_content();
  if (store_memory) {
    set_has_store_memory();
    conc_info_content_.store_memory_ = store_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.store_memory)
}

// optional .libcall_types.libcall_t call = 6;
inline bool ins_con_info_t::has_call() const {
  return conc_info_content_case() == kCall;
}
inline void ins_con_info_t::set_has_call() {
  _oneof_case_[0] = kCall;
}
inline void ins_con_info_t::clear_call() {
  if (has_call()) {
    delete conc_info_content_.call_;
    clear_has_conc_info_content();
  }
}
inline  const ::libcall_types::libcall_t& ins_con_info_t::call() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.call)
  return has_call()
      ? *conc_info_content_.call_
      : ::libcall_types::libcall_t::default_instance();
}
inline ::libcall_types::libcall_t* ins_con_info_t::mutable_call() {
  if (!has_call()) {
    clear_conc_info_content();
    set_has_call();
    conc_info_content_.call_ = new ::libcall_types::libcall_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.call)
  return conc_info_content_.call_;
}
inline ::libcall_types::libcall_t* ins_con_info_t::release_call() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.call)
  if (has_call()) {
    clear_has_conc_info_content();
    ::libcall_types::libcall_t* temp = conc_info_content_.call_;
    conc_info_content_.call_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_call(::libcall_types::libcall_t* call) {
  clear_conc_info_content();
  if (call) {
    set_has_call();
    conc_info_content_.call_ = call;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.call)
}

// optional .syscall_types.syscall_t system_call = 8;
inline bool ins_con_info_t::has_system_call() const {
  return conc_info_content_case() == kSystemCall;
}
inline void ins_con_info_t::set_has_system_call() {
  _oneof_case_[0] = kSystemCall;
}
inline void ins_con_info_t::clear_system_call() {
  if (has_system_call()) {
    delete conc_info_content_.system_call_;
    clear_has_conc_info_content();
  }
}
inline  const ::syscall_types::syscall_t& ins_con_info_t::system_call() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.system_call)
  return has_system_call()
      ? *conc_info_content_.system_call_
      : ::syscall_types::syscall_t::default_instance();
}
inline ::syscall_types::syscall_t* ins_con_info_t::mutable_system_call() {
  if (!has_system_call()) {
    clear_conc_info_content();
    set_has_system_call();
    conc_info_content_.system_call_ = new ::syscall_types::syscall_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.system_call)
  return conc_info_content_.system_call_;
}
inline ::syscall_types::syscall_t* ins_con_info_t::release_system_call() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.system_call)
  if (has_system_call()) {
    clear_has_conc_info_content();
    ::syscall_types::syscall_t* temp = conc_info_content_.system_call_;
    conc_info_content_.system_call_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_system_call(::syscall_types::syscall_t* system_call) {
  clear_conc_info_content();
  if (system_call) {
    set_has_system_call();
    conc_info_content_.system_call_ = system_call;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.system_call)
}

// optional uint64 next_address = 9;
inline bool ins_con_info_t::has_next_address() const {
  return conc_info_content_case() == kNextAddress;
}
inline void ins_con_info_t::set_has_next_address() {
  _oneof_case_[0] = kNextAddress;
}
inline void ins_con_info_t::clear_next_address() {
  if (has_next_address()) {
    conc_info_content_.next_address_ = GOOGLE_ULONGLONG(0);
    clear_has_conc_info_content();
  }
}
inline ::google::protobuf::uint64 ins_con_info_t::next_address() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.next_address)
  if (has_next_address()) {
    return conc_info_content_.next_address_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void ins_con_info_t::set_next_address(::google::protobuf::uint64 value) {
  if (!has_next_address()) {
    clear_conc_info_content();
    set_has_next_address();
  }
  conc_info_content_.next_address_ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.next_address)
}

// optional string reserved_comment = 10;
inline bool ins_con_info_t::has_reserved_comment() const {
  return conc_info_content_case() == kReservedComment;
}
inline void ins_con_info_t::set_has_reserved_comment() {
  _oneof_case_[0] = kReservedComment;
}
inline void ins_con_info_t::clear_reserved_comment() {
  if (has_reserved_comment()) {
    conc_info_content_.reserved_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_conc_info_content();
  }
}
inline const ::std::string& ins_con_info_t::reserved_comment() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.reserved_comment)
  if (has_reserved_comment()) {
    return conc_info_content_.reserved_comment_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ins_con_info_t::set_reserved_comment(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
}
#if LANG_CXX11
inline void ins_con_info_t::set_reserved_comment(::std::string&& value) {
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.ins_con_info_t.reserved_comment)
}
#endif
inline void ins_con_info_t::set_reserved_comment(const char* value) {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.ins_con_info_t.reserved_comment)
}
inline void ins_con_info_t::set_reserved_comment(const char* value, size_t size) {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.ins_con_info_t.reserved_comment)
}
inline ::std::string* ins_con_info_t::mutable_reserved_comment() {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.reserved_comment)
  return conc_info_content_.reserved_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ins_con_info_t::release_reserved_comment() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.reserved_comment)
  if (has_reserved_comment()) {
    clear_has_conc_info_content();
    return conc_info_content_.reserved_comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ins_con_info_t::set_allocated_reserved_comment(::std::string* reserved_comment) {
  if (!has_reserved_comment()) {
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_conc_info_content();
  if (reserved_comment != NULL) {
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        reserved_comment);
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.reserved_comment)
}

// optional uint32 wave = 11;
inline bool ins_con_info_t::has_wave() const {
  return conc_info_content_case() == kWave;
}
inline void ins_con_info_t::set_has_wave() {
  _oneof_case_[0] = kWave;
}
inline void ins_con_info_t::clear_wave() {
  if (has_wave()) {
    conc_info_content_.wave_ = 0u;
    clear_has_conc_info_content();
  }
}
inline ::google::protobuf::uint32 ins_con_info_t::wave() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.wave)
  if (has_wave()) {
    return conc_info_content_.wave_;
  }
  return 0u;
}
inline void ins_con_info_t::set_wave(::google::protobuf::uint32 value) {
  if (!has_wave()) {
    clear_conc_info_content();
    set_has_wave();
  }
  conc_info_content_.wave_ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.wave)
}

inline bool ins_con_info_t::has_conc_info_content() const {
  return conc_info_content_case() != CONC_INFO_CONTENT_NOT_SET;
}
inline void ins_con_info_t::clear_has_conc_info_content() {
  _oneof_case_[0] = CONC_INFO_CONTENT_NOT_SET;
}
inline ins_con_info_t::ConcInfoContentCase ins_con_info_t::conc_info_content_case() const {
  return ins_con_info_t::ConcInfoContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// instruction_t

// required uint32 thread_id = 1;
inline bool instruction_t::has_thread_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void instruction_t::set_has_thread_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void instruction_t::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void instruction_t::clear_thread_id() {
  thread_id_ = 0u;
  clear_has_thread_id();
}
inline ::google::protobuf::uint32 instruction_t::thread_id() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.thread_id)
  return thread_id_;
}
inline void instruction_t::set_thread_id(::google::protobuf::uint32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.thread_id)
}

// required uint64 address = 2;
inline bool instruction_t::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void instruction_t::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void instruction_t::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void instruction_t::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
  clear_has_address();
}
inline ::google::protobuf::uint64 instruction_t::address() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.address)
  return address_;
}
inline void instruction_t::set_address(::google::protobuf::uint64 value) {
  set_has_address();
  address_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.address)
}

// required bytes opcode = 3;
inline bool instruction_t::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instruction_t::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void instruction_t::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void instruction_t::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opcode();
}
inline const ::std::string& instruction_t::opcode() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.opcode)
  return opcode_.GetNoArena();
}
inline void instruction_t::set_opcode(const ::std::string& value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.opcode)
}
#if LANG_CXX11
inline void instruction_t::set_opcode(::std::string&& value) {
  set_has_opcode();
  opcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.instruction_t.opcode)
}
#endif
inline void instruction_t::set_opcode(const char* value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.instruction_t.opcode)
}
inline void instruction_t::set_opcode(const void* value, size_t size) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.instruction_t.opcode)
}
inline ::std::string* instruction_t::mutable_opcode() {
  set_has_opcode();
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.opcode)
  return opcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instruction_t::release_opcode() {
  // @@protoc_insertion_point(field_release:trace_format.instruction_t.opcode)
  clear_has_opcode();
  return opcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instruction_t::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    set_has_opcode();
  } else {
    clear_has_opcode();
  }
  opcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.opcode)
}

// repeated .trace_format.ins_con_info_t concrete_infos = 4;
inline int instruction_t::concrete_infos_size() const {
  return concrete_infos_.size();
}
inline void instruction_t::clear_concrete_infos() {
  concrete_infos_.Clear();
}
inline const ::trace_format::ins_con_info_t& instruction_t::concrete_infos(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Get(index);
}
inline ::trace_format::ins_con_info_t* instruction_t::mutable_concrete_infos(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Mutable(index);
}
inline ::trace_format::ins_con_info_t* instruction_t::add_concrete_infos() {
  // @@protoc_insertion_point(field_add:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t >*
instruction_t::mutable_concrete_infos() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.instruction_t.concrete_infos)
  return &concrete_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t >&
instruction_t::concrete_infos() const {
  // @@protoc_insertion_point(field_list:trace_format.instruction_t.concrete_infos)
  return concrete_infos_;
}

// optional .dba.dba_list dba_instrs = 5;
inline bool instruction_t::has_dba_instrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void instruction_t::set_has_dba_instrs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void instruction_t::clear_has_dba_instrs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void instruction_t::clear_dba_instrs() {
  if (dba_instrs_ != NULL) dba_instrs_->::dba::dba_list::Clear();
  clear_has_dba_instrs();
}
inline const ::dba::dba_list& instruction_t::dba_instrs() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.dba_instrs)
  return dba_instrs_ != NULL ? *dba_instrs_
                         : *::dba::dba_list::internal_default_instance();
}
inline ::dba::dba_list* instruction_t::mutable_dba_instrs() {
  set_has_dba_instrs();
  if (dba_instrs_ == NULL) {
    dba_instrs_ = new ::dba::dba_list;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.dba_instrs)
  return dba_instrs_;
}
inline ::dba::dba_list* instruction_t::release_dba_instrs() {
  // @@protoc_insertion_point(field_release:trace_format.instruction_t.dba_instrs)
  clear_has_dba_instrs();
  ::dba::dba_list* temp = dba_instrs_;
  dba_instrs_ = NULL;
  return temp;
}
inline void instruction_t::set_allocated_dba_instrs(::dba::dba_list* dba_instrs) {
  delete dba_instrs_;
  dba_instrs_ = dba_instrs;
  if (dba_instrs) {
    set_has_dba_instrs();
  } else {
    clear_has_dba_instrs();
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.dba_instrs)
}

// -------------------------------------------------------------------

// body_t

// required .trace_format.body_t.typeid_body_t typeid = 1;
inline bool body_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void body_t::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void body_t::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void body_t::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::trace_format::body_t_typeid_body_t body_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.typeid)
  return static_cast< ::trace_format::body_t_typeid_body_t >(typeid__);
}
inline void body_t::set_typeid_(::trace_format::body_t_typeid_body_t value) {
  assert(::trace_format::body_t_typeid_body_t_IsValid(value));
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.body_t.typeid)
}

// optional .trace_format.metadata_t metadata = 2;
inline bool body_t::has_metadata() const {
  return body_content_case() == kMetadata;
}
inline void body_t::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
inline void body_t::clear_metadata() {
  if (has_metadata()) {
    delete body_content_.metadata_;
    clear_has_body_content();
  }
}
inline  const ::trace_format::metadata_t& body_t::metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.metadata)
  return has_metadata()
      ? *body_content_.metadata_
      : ::trace_format::metadata_t::default_instance();
}
inline ::trace_format::metadata_t* body_t::mutable_metadata() {
  if (!has_metadata()) {
    clear_body_content();
    set_has_metadata();
    body_content_.metadata_ = new ::trace_format::metadata_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.body_t.metadata)
  return body_content_.metadata_;
}
inline ::trace_format::metadata_t* body_t::release_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.body_t.metadata)
  if (has_metadata()) {
    clear_has_body_content();
    ::trace_format::metadata_t* temp = body_content_.metadata_;
    body_content_.metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void body_t::set_allocated_metadata(::trace_format::metadata_t* metadata) {
  clear_body_content();
  if (metadata) {
    set_has_metadata();
    body_content_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.body_t.metadata)
}

// optional .trace_format.instruction_t instruction = 3;
inline bool body_t::has_instruction() const {
  return body_content_case() == kInstruction;
}
inline void body_t::set_has_instruction() {
  _oneof_case_[0] = kInstruction;
}
inline void body_t::clear_instruction() {
  if (has_instruction()) {
    delete body_content_.instruction_;
    clear_has_body_content();
  }
}
inline  const ::trace_format::instruction_t& body_t::instruction() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.instruction)
  return has_instruction()
      ? *body_content_.instruction_
      : ::trace_format::instruction_t::default_instance();
}
inline ::trace_format::instruction_t* body_t::mutable_instruction() {
  if (!has_instruction()) {
    clear_body_content();
    set_has_instruction();
    body_content_.instruction_ = new ::trace_format::instruction_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.body_t.instruction)
  return body_content_.instruction_;
}
inline ::trace_format::instruction_t* body_t::release_instruction() {
  // @@protoc_insertion_point(field_release:trace_format.body_t.instruction)
  if (has_instruction()) {
    clear_has_body_content();
    ::trace_format::instruction_t* temp = body_content_.instruction_;
    body_content_.instruction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void body_t::set_allocated_instruction(::trace_format::instruction_t* instruction) {
  clear_body_content();
  if (instruction) {
    set_has_instruction();
    body_content_.instruction_ = instruction;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.body_t.instruction)
}

inline bool body_t::has_body_content() const {
  return body_content_case() != BODY_CONTENT_NOT_SET;
}
inline void body_t::clear_has_body_content() {
  _oneof_case_[0] = BODY_CONTENT_NOT_SET;
}
inline body_t::BodyContentCase body_t::body_content_case() const {
  return body_t::BodyContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// chunk_t

// repeated .trace_format.body_t body = 1;
inline int chunk_t::body_size() const {
  return body_.size();
}
inline void chunk_t::clear_body() {
  body_.Clear();
}
inline const ::trace_format::body_t& chunk_t::body(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.chunk_t.body)
  return body_.Get(index);
}
inline ::trace_format::body_t* chunk_t::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.chunk_t.body)
  return body_.Mutable(index);
}
inline ::trace_format::body_t* chunk_t::add_body() {
  // @@protoc_insertion_point(field_add:trace_format.chunk_t.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >*
chunk_t::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.chunk_t.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >&
chunk_t::body() const {
  // @@protoc_insertion_point(field_list:trace_format.chunk_t.body)
  return body_;
}

// -------------------------------------------------------------------

// trace_t

// required .trace_format.header_t header = 1;
inline bool trace_t::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trace_t::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void trace_t::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void trace_t::clear_header() {
  if (header_ != NULL) header_->::trace_format::header_t::Clear();
  clear_has_header();
}
inline const ::trace_format::header_t& trace_t::header() const {
  // @@protoc_insertion_point(field_get:trace_format.trace_t.header)
  return header_ != NULL ? *header_
                         : *::trace_format::header_t::internal_default_instance();
}
inline ::trace_format::header_t* trace_t::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::trace_format::header_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.trace_t.header)
  return header_;
}
inline ::trace_format::header_t* trace_t::release_header() {
  // @@protoc_insertion_point(field_release:trace_format.trace_t.header)
  clear_has_header();
  ::trace_format::header_t* temp = header_;
  header_ = NULL;
  return temp;
}
inline void trace_t::set_allocated_header(::trace_format::header_t* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.trace_t.header)
}

// repeated .trace_format.body_t body = 2;
inline int trace_t::body_size() const {
  return body_.size();
}
inline void trace_t::clear_body() {
  body_.Clear();
}
inline const ::trace_format::body_t& trace_t::body(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.trace_t.body)
  return body_.Get(index);
}
inline ::trace_format::body_t* trace_t::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.trace_t.body)
  return body_.Mutable(index);
}
inline ::trace_format::body_t* trace_t::add_body() {
  // @@protoc_insertion_point(field_add:trace_format.trace_t.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >*
trace_t::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.trace_t.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >&
trace_t::body() const {
  // @@protoc_insertion_point(field_list:trace_format.trace_t.body)
  return body_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace trace_format

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::trace_format::header_t_architecture_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::header_t_architecture_t>() {
  return ::trace_format::header_t_architecture_t_descriptor();
}
template <> struct is_proto_enum< ::trace_format::metadata_t_typeid_metadata_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::metadata_t_typeid_metadata_t>() {
  return ::trace_format::metadata_t_typeid_metadata_t_descriptor();
}
template <> struct is_proto_enum< ::trace_format::ins_con_info_t_typeid_con_info_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::ins_con_info_t_typeid_con_info_t>() {
  return ::trace_format::ins_con_info_t_typeid_con_info_t_descriptor();
}
template <> struct is_proto_enum< ::trace_format::body_t_typeid_body_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::body_t_typeid_body_t>() {
  return ::trace_format::body_t_typeid_body_t_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_trace_2eproto__INCLUDED
