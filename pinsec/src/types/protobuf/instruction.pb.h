// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruction.proto

#ifndef PROTOBUF_instruction_2eproto__INCLUDED
#define PROTOBUF_instruction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace common {
class indirect_register_t;
class indirect_register_tDefaultTypeInternal;
extern indirect_register_tDefaultTypeInternal _indirect_register_t_default_instance_;
class memory_pol;
class memory_polDefaultTypeInternal;
extern memory_polDefaultTypeInternal _memory_pol_default_instance_;
class memory_t;
class memory_tDefaultTypeInternal;
extern memory_tDefaultTypeInternal _memory_t_default_instance_;
class register_t;
class register_tDefaultTypeInternal;
extern register_tDefaultTypeInternal _register_t_default_instance_;
class register_value_t;
class register_value_tDefaultTypeInternal;
extern register_value_tDefaultTypeInternal _register_value_t_default_instance_;
}  // namespace common
namespace instruction_pol {
class cpuid_pol;
class cpuid_polDefaultTypeInternal;
extern cpuid_polDefaultTypeInternal _cpuid_pol_default_instance_;
class instr_pol;
class instr_polDefaultTypeInternal;
extern instr_polDefaultTypeInternal _instr_pol_default_instance_;
}  // namespace instruction_pol

namespace instruction_pol {

namespace protobuf_instruction_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_instruction_2eproto

enum instr_ident {
  INVALID_INST = 0,
  CPUID = 1
};
bool instr_ident_IsValid(int value);
const instr_ident instr_ident_MIN = INVALID_INST;
const instr_ident instr_ident_MAX = CPUID;
const int instr_ident_ARRAYSIZE = instr_ident_MAX + 1;

const ::google::protobuf::EnumDescriptor* instr_ident_descriptor();
inline const ::std::string& instr_ident_Name(instr_ident value) {
  return ::google::protobuf::internal::NameOfEnum(
    instr_ident_descriptor(), value);
}
inline bool instr_ident_Parse(
    const ::std::string& name, instr_ident* value) {
  return ::google::protobuf::internal::ParseNamedEnum<instr_ident>(
    instr_ident_descriptor(), name, value);
}
// ===================================================================

class instr_pol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:instruction_pol.instr_pol) */ {
 public:
  instr_pol();
  virtual ~instr_pol();

  instr_pol(const instr_pol& from);

  inline instr_pol& operator=(const instr_pol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const instr_pol& default_instance();

  enum InstrCntCase {
    kCpuid = 3,
    INSTR_CNT_NOT_SET = 0,
  };

  static inline const instr_pol* internal_default_instance() {
    return reinterpret_cast<const instr_pol*>(
               &_instr_pol_default_instance_);
  }

  void Swap(instr_pol* other);

  // implements Message ----------------------------------------------

  inline instr_pol* New() const PROTOBUF_FINAL { return New(NULL); }

  instr_pol* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const instr_pol& from);
  void MergeFrom(const instr_pol& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(instr_pol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string opcode = 2;
  bool has_opcode() const;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 2;
  const ::std::string& opcode() const;
  void set_opcode(const ::std::string& value);
  #if LANG_CXX11
  void set_opcode(::std::string&& value);
  #endif
  void set_opcode(const char* value);
  void set_opcode(const char* value, size_t size);
  ::std::string* mutable_opcode();
  ::std::string* release_opcode();
  void set_allocated_opcode(::std::string* opcode);

  // required .instruction_pol.instr_ident ident = 1;
  bool has_ident() const;
  void clear_ident();
  static const int kIdentFieldNumber = 1;
  ::instruction_pol::instr_ident ident() const;
  void set_ident(::instruction_pol::instr_ident value);

  // optional .instruction_pol.cpuid_pol cpuid = 3;
  bool has_cpuid() const;
  void clear_cpuid();
  static const int kCpuidFieldNumber = 3;
  const ::instruction_pol::cpuid_pol& cpuid() const;
  ::instruction_pol::cpuid_pol* mutable_cpuid();
  ::instruction_pol::cpuid_pol* release_cpuid();
  void set_allocated_cpuid(::instruction_pol::cpuid_pol* cpuid);

  InstrCntCase instr_cnt_case() const;
  // @@protoc_insertion_point(class_scope:instruction_pol.instr_pol)
 private:
  void set_has_ident();
  void clear_has_ident();
  void set_has_opcode();
  void clear_has_opcode();
  void set_has_cpuid();

  inline bool has_instr_cnt() const;
  void clear_instr_cnt();
  inline void clear_has_instr_cnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr opcode_;
  int ident_;
  union InstrCntUnion {
    InstrCntUnion() {}
    ::instruction_pol::cpuid_pol* cpuid_;
  } instr_cnt_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_instruction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class cpuid_pol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:instruction_pol.cpuid_pol) */ {
 public:
  cpuid_pol();
  virtual ~cpuid_pol();

  cpuid_pol(const cpuid_pol& from);

  inline cpuid_pol& operator=(const cpuid_pol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cpuid_pol& default_instance();

  static inline const cpuid_pol* internal_default_instance() {
    return reinterpret_cast<const cpuid_pol*>(
               &_cpuid_pol_default_instance_);
  }

  void Swap(cpuid_pol* other);

  // implements Message ----------------------------------------------

  inline cpuid_pol* New() const PROTOBUF_FINAL { return New(NULL); }

  cpuid_pol* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const cpuid_pol& from);
  void MergeFrom(const cpuid_pol& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(cpuid_pol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .common.action eax = 1 [default = DEFAULT];
  bool has_eax() const;
  void clear_eax();
  static const int kEaxFieldNumber = 1;
  ::common::action eax() const;
  void set_eax(::common::action value);

  // optional .common.action ebx = 2 [default = DEFAULT];
  bool has_ebx() const;
  void clear_ebx();
  static const int kEbxFieldNumber = 2;
  ::common::action ebx() const;
  void set_ebx(::common::action value);

  // optional .common.action ecx = 3 [default = DEFAULT];
  bool has_ecx() const;
  void clear_ecx();
  static const int kEcxFieldNumber = 3;
  ::common::action ecx() const;
  void set_ecx(::common::action value);

  // optional .common.action edx = 4 [default = DEFAULT];
  bool has_edx() const;
  void clear_edx();
  static const int kEdxFieldNumber = 4;
  ::common::action edx() const;
  void set_edx(::common::action value);

  // @@protoc_insertion_point(class_scope:instruction_pol.cpuid_pol)
 private:
  void set_has_eax();
  void clear_has_eax();
  void set_has_ebx();
  void clear_has_ebx();
  void set_has_ecx();
  void clear_has_ecx();
  void set_has_edx();
  void clear_has_edx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int eax_;
  int ebx_;
  int ecx_;
  int edx_;
  friend struct  protobuf_instruction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// instr_pol

// required .instruction_pol.instr_ident ident = 1;
inline bool instr_pol::has_ident() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void instr_pol::set_has_ident() {
  _has_bits_[0] |= 0x00000002u;
}
inline void instr_pol::clear_has_ident() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void instr_pol::clear_ident() {
  ident_ = 0;
  clear_has_ident();
}
inline ::instruction_pol::instr_ident instr_pol::ident() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.ident)
  return static_cast< ::instruction_pol::instr_ident >(ident_);
}
inline void instr_pol::set_ident(::instruction_pol::instr_ident value) {
  assert(::instruction_pol::instr_ident_IsValid(value));
  set_has_ident();
  ident_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.instr_pol.ident)
}

// required string opcode = 2;
inline bool instr_pol::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instr_pol::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void instr_pol::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void instr_pol::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opcode();
}
inline const ::std::string& instr_pol::opcode() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.opcode)
  return opcode_.GetNoArena();
}
inline void instr_pol::set_opcode(const ::std::string& value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:instruction_pol.instr_pol.opcode)
}
#if LANG_CXX11
inline void instr_pol::set_opcode(::std::string&& value) {
  set_has_opcode();
  opcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instruction_pol.instr_pol.opcode)
}
#endif
inline void instr_pol::set_opcode(const char* value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instruction_pol.instr_pol.opcode)
}
inline void instr_pol::set_opcode(const char* value, size_t size) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instruction_pol.instr_pol.opcode)
}
inline ::std::string* instr_pol::mutable_opcode() {
  set_has_opcode();
  // @@protoc_insertion_point(field_mutable:instruction_pol.instr_pol.opcode)
  return opcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* instr_pol::release_opcode() {
  // @@protoc_insertion_point(field_release:instruction_pol.instr_pol.opcode)
  clear_has_opcode();
  return opcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void instr_pol::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    set_has_opcode();
  } else {
    clear_has_opcode();
  }
  opcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:instruction_pol.instr_pol.opcode)
}

// optional .instruction_pol.cpuid_pol cpuid = 3;
inline bool instr_pol::has_cpuid() const {
  return instr_cnt_case() == kCpuid;
}
inline void instr_pol::set_has_cpuid() {
  _oneof_case_[0] = kCpuid;
}
inline void instr_pol::clear_cpuid() {
  if (has_cpuid()) {
    delete instr_cnt_.cpuid_;
    clear_has_instr_cnt();
  }
}
inline  const ::instruction_pol::cpuid_pol& instr_pol::cpuid() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.cpuid)
  return has_cpuid()
      ? *instr_cnt_.cpuid_
      : ::instruction_pol::cpuid_pol::default_instance();
}
inline ::instruction_pol::cpuid_pol* instr_pol::mutable_cpuid() {
  if (!has_cpuid()) {
    clear_instr_cnt();
    set_has_cpuid();
    instr_cnt_.cpuid_ = new ::instruction_pol::cpuid_pol;
  }
  // @@protoc_insertion_point(field_mutable:instruction_pol.instr_pol.cpuid)
  return instr_cnt_.cpuid_;
}
inline ::instruction_pol::cpuid_pol* instr_pol::release_cpuid() {
  // @@protoc_insertion_point(field_release:instruction_pol.instr_pol.cpuid)
  if (has_cpuid()) {
    clear_has_instr_cnt();
    ::instruction_pol::cpuid_pol* temp = instr_cnt_.cpuid_;
    instr_cnt_.cpuid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void instr_pol::set_allocated_cpuid(::instruction_pol::cpuid_pol* cpuid) {
  clear_instr_cnt();
  if (cpuid) {
    set_has_cpuid();
    instr_cnt_.cpuid_ = cpuid;
  }
  // @@protoc_insertion_point(field_set_allocated:instruction_pol.instr_pol.cpuid)
}

inline bool instr_pol::has_instr_cnt() const {
  return instr_cnt_case() != INSTR_CNT_NOT_SET;
}
inline void instr_pol::clear_has_instr_cnt() {
  _oneof_case_[0] = INSTR_CNT_NOT_SET;
}
inline instr_pol::InstrCntCase instr_pol::instr_cnt_case() const {
  return instr_pol::InstrCntCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// cpuid_pol

// optional .common.action eax = 1 [default = DEFAULT];
inline bool cpuid_pol::has_eax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cpuid_pol::set_has_eax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cpuid_pol::clear_has_eax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cpuid_pol::clear_eax() {
  eax_ = 0;
  clear_has_eax();
}
inline ::common::action cpuid_pol::eax() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.eax)
  return static_cast< ::common::action >(eax_);
}
inline void cpuid_pol::set_eax(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_eax();
  eax_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.eax)
}

// optional .common.action ebx = 2 [default = DEFAULT];
inline bool cpuid_pol::has_ebx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cpuid_pol::set_has_ebx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cpuid_pol::clear_has_ebx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cpuid_pol::clear_ebx() {
  ebx_ = 0;
  clear_has_ebx();
}
inline ::common::action cpuid_pol::ebx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.ebx)
  return static_cast< ::common::action >(ebx_);
}
inline void cpuid_pol::set_ebx(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ebx();
  ebx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.ebx)
}

// optional .common.action ecx = 3 [default = DEFAULT];
inline bool cpuid_pol::has_ecx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cpuid_pol::set_has_ecx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cpuid_pol::clear_has_ecx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cpuid_pol::clear_ecx() {
  ecx_ = 0;
  clear_has_ecx();
}
inline ::common::action cpuid_pol::ecx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.ecx)
  return static_cast< ::common::action >(ecx_);
}
inline void cpuid_pol::set_ecx(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ecx();
  ecx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.ecx)
}

// optional .common.action edx = 4 [default = DEFAULT];
inline bool cpuid_pol::has_edx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cpuid_pol::set_has_edx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cpuid_pol::clear_has_edx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cpuid_pol::clear_edx() {
  edx_ = 0;
  clear_has_edx();
}
inline ::common::action cpuid_pol::edx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.edx)
  return static_cast< ::common::action >(edx_);
}
inline void cpuid_pol::set_edx(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_edx();
  edx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.edx)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace instruction_pol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::instruction_pol::instr_ident> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::instruction_pol::instr_ident>() {
  return ::instruction_pol::instr_ident_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_instruction_2eproto__INCLUDED
