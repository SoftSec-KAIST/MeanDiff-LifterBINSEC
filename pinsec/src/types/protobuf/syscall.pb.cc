// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "syscall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace syscall_types {
class syscall_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<syscall_pol> {
  public:
  const ::syscall_types::nr_read_pol* nr_read_;
} _syscall_pol_default_instance_;
class syscall_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<syscall_t> {
  public:
  const ::syscall_types::nr_open_t* open_syscall_;
  const ::syscall_types::nr_read_t* read_syscall_;
  const ::syscall_types::nr_write_t* write_sycall_;
  const ::syscall_types::sys_generic_t* generic_sycall_;
} _syscall_t_default_instance_;
class nr_read_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nr_read_pol> {
} _nr_read_pol_default_instance_;
class nr_open_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nr_open_t> {
} _nr_open_t_default_instance_;
class nr_read_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nr_read_t> {
} _nr_read_t_default_instance_;
class nr_write_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<nr_write_t> {
} _nr_write_t_default_instance_;
class sys_generic_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<sys_generic_t> {
} _sys_generic_t_default_instance_;

namespace protobuf_syscall_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, restrict_addresses_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_syscall_pol_default_instance_), nr_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_pol, syscall_pol_cnt_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, ident_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_syscall_t_default_instance_), open_syscall_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_syscall_t_default_instance_), read_syscall_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_syscall_t_default_instance_), write_sycall_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_syscall_t_default_instance_), generic_sycall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(syscall_t, syscall_t_cnt_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_pol, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_open_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_open_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_open_t, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_open_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_open_t, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_open_t, file_descriptor_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, file_descriptor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, buffer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, buffer_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_read_t, count_effective_),
  2,
  1,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, file_descriptor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, buffer_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, buffer_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nr_write_t, count_effective_),
  2,
  1,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_generic_t, address_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(syscall_pol)},
  { 17, 28, sizeof(syscall_t)},
  { 34, 39, sizeof(nr_read_pol)},
  { 40, 48, sizeof(nr_open_t)},
  { 52, 61, sizeof(nr_read_t)},
  { 66, 75, sizeof(nr_write_t)},
  { 80, 86, sizeof(sys_generic_t)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_syscall_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_syscall_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nr_read_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nr_open_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nr_read_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_nr_write_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_sys_generic_t_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "syscall.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _syscall_pol_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _syscall_t_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _nr_read_pol_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _nr_open_t_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _nr_read_t_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _nr_write_t_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _sys_generic_t_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::common::protobuf_common_2eproto::InitDefaults();
  _syscall_pol_default_instance_.DefaultConstruct();
  _syscall_t_default_instance_.DefaultConstruct();
  _nr_read_pol_default_instance_.DefaultConstruct();
  _nr_open_t_default_instance_.DefaultConstruct();
  _nr_read_t_default_instance_.DefaultConstruct();
  _nr_write_t_default_instance_.DefaultConstruct();
  _sys_generic_t_default_instance_.DefaultConstruct();
  _syscall_pol_default_instance_.nr_read_ = const_cast< ::syscall_types::nr_read_pol*>(
      ::syscall_types::nr_read_pol::internal_default_instance());
  _syscall_t_default_instance_.open_syscall_ = const_cast< ::syscall_types::nr_open_t*>(
      ::syscall_types::nr_open_t::internal_default_instance());
  _syscall_t_default_instance_.read_syscall_ = const_cast< ::syscall_types::nr_read_t*>(
      ::syscall_types::nr_read_t::internal_default_instance());
  _syscall_t_default_instance_.write_sycall_ = const_cast< ::syscall_types::nr_write_t*>(
      ::syscall_types::nr_write_t::internal_default_instance());
  _syscall_t_default_instance_.generic_sycall_ = const_cast< ::syscall_types::sys_generic_t*>(
      ::syscall_types::sys_generic_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rsyscall.proto\022\rsyscall_types\032\014common.p"
      "roto\"\332\001\n\013syscall_pol\022\n\n\002id\030\001 \002(\r\022\014\n\004name"
      "\030\002 \002(\t\022+\n\005ident\030\003 \002(\0162\034.syscall_types.sy"
      "scall_ident\022&\n\006action\030\004 \002(\0162\026.common.tra"
      "cing_action\022\032\n\022restrict_addresses\030\005 \003(\004\022"
      "-\n\007nr_read\030\006 \001(\0132\032.syscall_types.nr_read"
      "_polH\000B\021\n\017syscall_pol_cnt\"\244\002\n\tsyscall_t\022"
      "\n\n\002id\030\001 \002(\r\022+\n\005ident\030\002 \002(\0162\034.syscall_typ"
      "es.syscall_ident\0220\n\014open_syscall\030\003 \001(\0132\030"
      ".syscall_types.nr_open_tH\000\0220\n\014read_sysca"
      "ll\030\004 \001(\0132\030.syscall_types.nr_read_tH\000\0221\n\014"
      "write_sycall\030\005 \001(\0132\031.syscall_types.nr_wr"
      "ite_tH\000\0226\n\016generic_sycall\030\006 \001(\0132\034.syscal"
      "l_types.sys_generic_tH\000B\017\n\rsyscall_t_cnt"
      "\"\033\n\013nr_read_pol\022\014\n\004name\030\001 \002(\t\"T\n\tnr_open"
      "_t\022\021\n\tfile_name\030\001 \002(\t\022\r\n\005flags\030\002 \002(\021\022\014\n\004"
      "mode\030\003 \002(\r\022\027\n\017file_descriptor\030\004 \002(\005\"y\n\tn"
      "r_read_t\022\027\n\017file_descriptor\030\001 \002(\r\022\026\n\016buf"
      "fer_address\030\002 \002(\004\022\r\n\005count\030\003 \002(\r\022\023\n\013buff"
      "er_data\030\004 \002(\014\022\027\n\017count_effective\030\005 \002(\r\"z"
      "\n\nnr_write_t\022\027\n\017file_descriptor\030\001 \002(\r\022\026\n"
      "\016buffer_address\030\002 \002(\004\022\r\n\005count\030\003 \002(\r\022\023\n\013"
      "buffer_data\030\004 \002(\014\022\027\n\017count_effective\030\005 \002"
      "(\r\".\n\rsys_generic_t\022\014\n\004name\030\001 \002(\t\022\017\n\007add"
      "ress\030\002 \002(\r*D\n\rsyscall_ident\022\013\n\007NR_READ\020\000"
      "\022\014\n\010NR_WRITE\020\001\022\013\n\007NR_OPEN\020\002\022\013\n\007GENERIC\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1040);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "syscall.proto", &protobuf_RegisterTypes);
  ::common::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_syscall_2eproto

const ::google::protobuf::EnumDescriptor* syscall_ident_descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_enum_descriptors[0];
}
bool syscall_ident_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int syscall_pol::kIdFieldNumber;
const int syscall_pol::kNameFieldNumber;
const int syscall_pol::kIdentFieldNumber;
const int syscall_pol::kActionFieldNumber;
const int syscall_pol::kRestrictAddressesFieldNumber;
const int syscall_pol::kNrReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

syscall_pol::syscall_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.syscall_pol)
}
syscall_pol::syscall_pol(const syscall_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      restrict_addresses_(from.restrict_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
  clear_has_syscall_pol_cnt();
  switch (from.syscall_pol_cnt_case()) {
    case kNrRead: {
      mutable_nr_read()->::syscall_types::nr_read_pol::MergeFrom(from.nr_read());
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:syscall_types.syscall_pol)
}

void syscall_pol::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_) + sizeof(action_));
  clear_has_syscall_pol_cnt();
}

syscall_pol::~syscall_pol() {
  // @@protoc_insertion_point(destructor:syscall_types.syscall_pol)
  SharedDtor();
}

void syscall_pol::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_syscall_pol_cnt()) {
    clear_syscall_pol_cnt();
  }
}

void syscall_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syscall_pol::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[0].descriptor;
}

const syscall_pol& syscall_pol::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

syscall_pol* syscall_pol::New(::google::protobuf::Arena* arena) const {
  syscall_pol* n = new syscall_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void syscall_pol::clear_syscall_pol_cnt() {
// @@protoc_insertion_point(one_of_clear_start:syscall_types.syscall_pol)
  switch (syscall_pol_cnt_case()) {
    case kNrRead: {
      delete syscall_pol_cnt_.nr_read_;
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SYSCALL_POL_CNT_NOT_SET;
}


void syscall_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.syscall_pol)
  restrict_addresses_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&id_) + sizeof(action_));
  }
  clear_syscall_pol_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool syscall_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.syscall_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "syscall_types.syscall_pol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .syscall_types.syscall_ident ident = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::syscall_types::syscall_ident_IsValid(value)) {
            set_ident(static_cast< ::syscall_types::syscall_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.tracing_action action = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::tracing_action_IsValid(value)) {
            set_action(static_cast< ::common::tracing_action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 restrict_addresses = 5;
      case 5: {
        if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_restrict_addresses())));
        } else if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_restrict_addresses())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_read_pol nr_read = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nr_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.syscall_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.syscall_pol)
  return false;
#undef DO_
}

void syscall_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.syscall_pol)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.syscall_pol.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .syscall_types.syscall_ident ident = 3;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ident(), output);
  }

  // required .common.tracing_action action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated uint64 restrict_addresses = 5;
  for (int i = 0; i < this->restrict_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->restrict_addresses(i), output);
  }

  // optional .syscall_types.nr_read_pol nr_read = 6;
  if (has_nr_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *syscall_pol_cnt_.nr_read_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.syscall_pol)
}

::google::protobuf::uint8* syscall_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.syscall_pol)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.syscall_pol.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .syscall_types.syscall_ident ident = 3;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ident(), target);
  }

  // required .common.tracing_action action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // repeated uint64 restrict_addresses = 5;
  for (int i = 0; i < this->restrict_addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->restrict_addresses(i), target);
  }

  // optional .syscall_types.nr_read_pol nr_read = 6;
  if (has_nr_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *syscall_pol_cnt_.nr_read_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.syscall_pol)
  return target;
}

size_t syscall_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.syscall_pol)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_ident()) {
    // required .syscall_types.syscall_ident ident = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());
  }

  if (has_action()) {
    // required .common.tracing_action action = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t syscall_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.syscall_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .syscall_types.syscall_ident ident = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());

    // required .common.tracing_action action = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint64 restrict_addresses = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->restrict_addresses_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->restrict_addresses_size());
    total_size += data_size;
  }

  switch (syscall_pol_cnt_case()) {
    // optional .syscall_types.nr_read_pol nr_read = 6;
    case kNrRead: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *syscall_pol_cnt_.nr_read_);
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syscall_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.syscall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const syscall_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const syscall_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.syscall_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.syscall_pol)
    MergeFrom(*source);
  }
}

void syscall_pol::MergeFrom(const syscall_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.syscall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  restrict_addresses_.MergeFrom(from.restrict_addresses_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ident()) {
      set_ident(from.ident());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  switch (from.syscall_pol_cnt_case()) {
    case kNrRead: {
      mutable_nr_read()->::syscall_types::nr_read_pol::MergeFrom(from.nr_read());
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
}

void syscall_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.syscall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_pol::CopyFrom(const syscall_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.syscall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  switch (syscall_pol_cnt_case()) {
    case kNrRead: {
      if (has_nr_read()) {
        if (!this->nr_read().IsInitialized()) return false;
      }
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void syscall_pol::Swap(syscall_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void syscall_pol::InternalSwap(syscall_pol* other) {
  restrict_addresses_.UnsafeArenaSwap(&other->restrict_addresses_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(ident_, other->ident_);
  std::swap(action_, other->action_);
  std::swap(syscall_pol_cnt_, other->syscall_pol_cnt_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata syscall_pol::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// syscall_pol

// required uint32 id = 1;
bool syscall_pol::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void syscall_pol::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void syscall_pol::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void syscall_pol::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 syscall_pol::id() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.id)
  return id_;
}
void syscall_pol::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.id)
}

// required string name = 2;
bool syscall_pol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void syscall_pol::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void syscall_pol::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void syscall_pol::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& syscall_pol::name() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.name)
  return name_.GetNoArena();
}
void syscall_pol::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.name)
}
#if LANG_CXX11
void syscall_pol::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.syscall_pol.name)
}
#endif
void syscall_pol::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.syscall_pol.name)
}
void syscall_pol::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.syscall_pol.name)
}
::std::string* syscall_pol::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_pol.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* syscall_pol::release_name() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_pol.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void syscall_pol::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_pol.name)
}

// required .syscall_types.syscall_ident ident = 3;
bool syscall_pol::has_ident() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void syscall_pol::set_has_ident() {
  _has_bits_[0] |= 0x00000004u;
}
void syscall_pol::clear_has_ident() {
  _has_bits_[0] &= ~0x00000004u;
}
void syscall_pol::clear_ident() {
  ident_ = 0;
  clear_has_ident();
}
::syscall_types::syscall_ident syscall_pol::ident() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.ident)
  return static_cast< ::syscall_types::syscall_ident >(ident_);
}
void syscall_pol::set_ident(::syscall_types::syscall_ident value) {
  assert(::syscall_types::syscall_ident_IsValid(value));
  set_has_ident();
  ident_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.ident)
}

// required .common.tracing_action action = 4;
bool syscall_pol::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void syscall_pol::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
void syscall_pol::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
void syscall_pol::clear_action() {
  action_ = 0;
  clear_has_action();
}
::common::tracing_action syscall_pol::action() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.action)
  return static_cast< ::common::tracing_action >(action_);
}
void syscall_pol::set_action(::common::tracing_action value) {
  assert(::common::tracing_action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.action)
}

// repeated uint64 restrict_addresses = 5;
int syscall_pol::restrict_addresses_size() const {
  return restrict_addresses_.size();
}
void syscall_pol::clear_restrict_addresses() {
  restrict_addresses_.Clear();
}
::google::protobuf::uint64 syscall_pol::restrict_addresses(int index) const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.restrict_addresses)
  return restrict_addresses_.Get(index);
}
void syscall_pol::set_restrict_addresses(int index, ::google::protobuf::uint64 value) {
  restrict_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.restrict_addresses)
}
void syscall_pol::add_restrict_addresses(::google::protobuf::uint64 value) {
  restrict_addresses_.Add(value);
  // @@protoc_insertion_point(field_add:syscall_types.syscall_pol.restrict_addresses)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
syscall_pol::restrict_addresses() const {
  // @@protoc_insertion_point(field_list:syscall_types.syscall_pol.restrict_addresses)
  return restrict_addresses_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
syscall_pol::mutable_restrict_addresses() {
  // @@protoc_insertion_point(field_mutable_list:syscall_types.syscall_pol.restrict_addresses)
  return &restrict_addresses_;
}

// optional .syscall_types.nr_read_pol nr_read = 6;
bool syscall_pol::has_nr_read() const {
  return syscall_pol_cnt_case() == kNrRead;
}
void syscall_pol::set_has_nr_read() {
  _oneof_case_[0] = kNrRead;
}
void syscall_pol::clear_nr_read() {
  if (has_nr_read()) {
    delete syscall_pol_cnt_.nr_read_;
    clear_has_syscall_pol_cnt();
  }
}
 const ::syscall_types::nr_read_pol& syscall_pol::nr_read() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.nr_read)
  return has_nr_read()
      ? *syscall_pol_cnt_.nr_read_
      : ::syscall_types::nr_read_pol::default_instance();
}
::syscall_types::nr_read_pol* syscall_pol::mutable_nr_read() {
  if (!has_nr_read()) {
    clear_syscall_pol_cnt();
    set_has_nr_read();
    syscall_pol_cnt_.nr_read_ = new ::syscall_types::nr_read_pol;
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_pol.nr_read)
  return syscall_pol_cnt_.nr_read_;
}
::syscall_types::nr_read_pol* syscall_pol::release_nr_read() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_pol.nr_read)
  if (has_nr_read()) {
    clear_has_syscall_pol_cnt();
    ::syscall_types::nr_read_pol* temp = syscall_pol_cnt_.nr_read_;
    syscall_pol_cnt_.nr_read_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void syscall_pol::set_allocated_nr_read(::syscall_types::nr_read_pol* nr_read) {
  clear_syscall_pol_cnt();
  if (nr_read) {
    set_has_nr_read();
    syscall_pol_cnt_.nr_read_ = nr_read;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_pol.nr_read)
}

bool syscall_pol::has_syscall_pol_cnt() const {
  return syscall_pol_cnt_case() != SYSCALL_POL_CNT_NOT_SET;
}
void syscall_pol::clear_has_syscall_pol_cnt() {
  _oneof_case_[0] = SYSCALL_POL_CNT_NOT_SET;
}
syscall_pol::SyscallPolCntCase syscall_pol::syscall_pol_cnt_case() const {
  return syscall_pol::SyscallPolCntCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int syscall_t::kIdFieldNumber;
const int syscall_t::kIdentFieldNumber;
const int syscall_t::kOpenSyscallFieldNumber;
const int syscall_t::kReadSyscallFieldNumber;
const int syscall_t::kWriteSycallFieldNumber;
const int syscall_t::kGenericSycallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

syscall_t::syscall_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.syscall_t)
}
syscall_t::syscall_t(const syscall_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&id_) + sizeof(ident_));
  clear_has_syscall_t_cnt();
  switch (from.syscall_t_cnt_case()) {
    case kOpenSyscall: {
      mutable_open_syscall()->::syscall_types::nr_open_t::MergeFrom(from.open_syscall());
      break;
    }
    case kReadSyscall: {
      mutable_read_syscall()->::syscall_types::nr_read_t::MergeFrom(from.read_syscall());
      break;
    }
    case kWriteSycall: {
      mutable_write_sycall()->::syscall_types::nr_write_t::MergeFrom(from.write_sycall());
      break;
    }
    case kGenericSycall: {
      mutable_generic_sycall()->::syscall_types::sys_generic_t::MergeFrom(from.generic_sycall());
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:syscall_types.syscall_t)
}

void syscall_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&id_) + sizeof(ident_));
  clear_has_syscall_t_cnt();
}

syscall_t::~syscall_t() {
  // @@protoc_insertion_point(destructor:syscall_types.syscall_t)
  SharedDtor();
}

void syscall_t::SharedDtor() {
  if (has_syscall_t_cnt()) {
    clear_syscall_t_cnt();
  }
}

void syscall_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* syscall_t::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[1].descriptor;
}

const syscall_t& syscall_t::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

syscall_t* syscall_t::New(::google::protobuf::Arena* arena) const {
  syscall_t* n = new syscall_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void syscall_t::clear_syscall_t_cnt() {
// @@protoc_insertion_point(one_of_clear_start:syscall_types.syscall_t)
  switch (syscall_t_cnt_case()) {
    case kOpenSyscall: {
      delete syscall_t_cnt_.open_syscall_;
      break;
    }
    case kReadSyscall: {
      delete syscall_t_cnt_.read_syscall_;
      break;
    }
    case kWriteSycall: {
      delete syscall_t_cnt_.write_sycall_;
      break;
    }
    case kGenericSycall: {
      delete syscall_t_cnt_.generic_sycall_;
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SYSCALL_T_CNT_NOT_SET;
}


void syscall_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.syscall_t)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&ident_) -
      reinterpret_cast<char*>(&id_) + sizeof(ident_));
  }
  clear_syscall_t_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool syscall_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.syscall_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .syscall_types.syscall_ident ident = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::syscall_types::syscall_ident_IsValid(value)) {
            set_ident(static_cast< ::syscall_types::syscall_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_open_t open_syscall = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_syscall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_read_t read_syscall = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_syscall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_write_t write_sycall = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_sycall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.sys_generic_t generic_sycall = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic_sycall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.syscall_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.syscall_t)
  return false;
#undef DO_
}

void syscall_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.syscall_t)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .syscall_types.syscall_ident ident = 2;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ident(), output);
  }

  switch (syscall_t_cnt_case()) {
    case kOpenSyscall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *syscall_t_cnt_.open_syscall_, output);
      break;
    case kReadSyscall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *syscall_t_cnt_.read_syscall_, output);
      break;
    case kWriteSycall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *syscall_t_cnt_.write_sycall_, output);
      break;
    case kGenericSycall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *syscall_t_cnt_.generic_sycall_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.syscall_t)
}

::google::protobuf::uint8* syscall_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.syscall_t)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .syscall_types.syscall_ident ident = 2;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ident(), target);
  }

  switch (syscall_t_cnt_case()) {
    case kOpenSyscall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *syscall_t_cnt_.open_syscall_, false, target);
      break;
    case kReadSyscall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *syscall_t_cnt_.read_syscall_, false, target);
      break;
    case kWriteSycall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *syscall_t_cnt_.write_sycall_, false, target);
      break;
    case kGenericSycall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *syscall_t_cnt_.generic_sycall_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.syscall_t)
  return target;
}

size_t syscall_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.syscall_t)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_ident()) {
    // required .syscall_types.syscall_ident ident = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());
  }

  return total_size;
}
size_t syscall_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.syscall_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .syscall_types.syscall_ident ident = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  switch (syscall_t_cnt_case()) {
    // optional .syscall_types.nr_open_t open_syscall = 3;
    case kOpenSyscall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *syscall_t_cnt_.open_syscall_);
      break;
    }
    // optional .syscall_types.nr_read_t read_syscall = 4;
    case kReadSyscall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *syscall_t_cnt_.read_syscall_);
      break;
    }
    // optional .syscall_types.nr_write_t write_sycall = 5;
    case kWriteSycall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *syscall_t_cnt_.write_sycall_);
      break;
    }
    // optional .syscall_types.sys_generic_t generic_sycall = 6;
    case kGenericSycall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *syscall_t_cnt_.generic_sycall_);
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void syscall_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.syscall_t)
  GOOGLE_DCHECK_NE(&from, this);
  const syscall_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const syscall_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.syscall_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.syscall_t)
    MergeFrom(*source);
  }
}

void syscall_t::MergeFrom(const syscall_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.syscall_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ident()) {
      set_ident(from.ident());
    }
  }
  switch (from.syscall_t_cnt_case()) {
    case kOpenSyscall: {
      mutable_open_syscall()->::syscall_types::nr_open_t::MergeFrom(from.open_syscall());
      break;
    }
    case kReadSyscall: {
      mutable_read_syscall()->::syscall_types::nr_read_t::MergeFrom(from.read_syscall());
      break;
    }
    case kWriteSycall: {
      mutable_write_sycall()->::syscall_types::nr_write_t::MergeFrom(from.write_sycall());
      break;
    }
    case kGenericSycall: {
      mutable_generic_sycall()->::syscall_types::sys_generic_t::MergeFrom(from.generic_sycall());
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
}

void syscall_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.syscall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_t::CopyFrom(const syscall_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.syscall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  switch (syscall_t_cnt_case()) {
    case kOpenSyscall: {
      if (has_open_syscall()) {
        if (!this->open_syscall().IsInitialized()) return false;
      }
      break;
    }
    case kReadSyscall: {
      if (has_read_syscall()) {
        if (!this->read_syscall().IsInitialized()) return false;
      }
      break;
    }
    case kWriteSycall: {
      if (has_write_sycall()) {
        if (!this->write_sycall().IsInitialized()) return false;
      }
      break;
    }
    case kGenericSycall: {
      if (has_generic_sycall()) {
        if (!this->generic_sycall().IsInitialized()) return false;
      }
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void syscall_t::Swap(syscall_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void syscall_t::InternalSwap(syscall_t* other) {
  std::swap(id_, other->id_);
  std::swap(ident_, other->ident_);
  std::swap(syscall_t_cnt_, other->syscall_t_cnt_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata syscall_t::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// syscall_t

// required uint32 id = 1;
bool syscall_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void syscall_t::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void syscall_t::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void syscall_t::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 syscall_t::id() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.id)
  return id_;
}
void syscall_t::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_t.id)
}

// required .syscall_types.syscall_ident ident = 2;
bool syscall_t::has_ident() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void syscall_t::set_has_ident() {
  _has_bits_[0] |= 0x00000002u;
}
void syscall_t::clear_has_ident() {
  _has_bits_[0] &= ~0x00000002u;
}
void syscall_t::clear_ident() {
  ident_ = 0;
  clear_has_ident();
}
::syscall_types::syscall_ident syscall_t::ident() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.ident)
  return static_cast< ::syscall_types::syscall_ident >(ident_);
}
void syscall_t::set_ident(::syscall_types::syscall_ident value) {
  assert(::syscall_types::syscall_ident_IsValid(value));
  set_has_ident();
  ident_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_t.ident)
}

// optional .syscall_types.nr_open_t open_syscall = 3;
bool syscall_t::has_open_syscall() const {
  return syscall_t_cnt_case() == kOpenSyscall;
}
void syscall_t::set_has_open_syscall() {
  _oneof_case_[0] = kOpenSyscall;
}
void syscall_t::clear_open_syscall() {
  if (has_open_syscall()) {
    delete syscall_t_cnt_.open_syscall_;
    clear_has_syscall_t_cnt();
  }
}
 const ::syscall_types::nr_open_t& syscall_t::open_syscall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.open_syscall)
  return has_open_syscall()
      ? *syscall_t_cnt_.open_syscall_
      : ::syscall_types::nr_open_t::default_instance();
}
::syscall_types::nr_open_t* syscall_t::mutable_open_syscall() {
  if (!has_open_syscall()) {
    clear_syscall_t_cnt();
    set_has_open_syscall();
    syscall_t_cnt_.open_syscall_ = new ::syscall_types::nr_open_t;
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.open_syscall)
  return syscall_t_cnt_.open_syscall_;
}
::syscall_types::nr_open_t* syscall_t::release_open_syscall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.open_syscall)
  if (has_open_syscall()) {
    clear_has_syscall_t_cnt();
    ::syscall_types::nr_open_t* temp = syscall_t_cnt_.open_syscall_;
    syscall_t_cnt_.open_syscall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void syscall_t::set_allocated_open_syscall(::syscall_types::nr_open_t* open_syscall) {
  clear_syscall_t_cnt();
  if (open_syscall) {
    set_has_open_syscall();
    syscall_t_cnt_.open_syscall_ = open_syscall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.open_syscall)
}

// optional .syscall_types.nr_read_t read_syscall = 4;
bool syscall_t::has_read_syscall() const {
  return syscall_t_cnt_case() == kReadSyscall;
}
void syscall_t::set_has_read_syscall() {
  _oneof_case_[0] = kReadSyscall;
}
void syscall_t::clear_read_syscall() {
  if (has_read_syscall()) {
    delete syscall_t_cnt_.read_syscall_;
    clear_has_syscall_t_cnt();
  }
}
 const ::syscall_types::nr_read_t& syscall_t::read_syscall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.read_syscall)
  return has_read_syscall()
      ? *syscall_t_cnt_.read_syscall_
      : ::syscall_types::nr_read_t::default_instance();
}
::syscall_types::nr_read_t* syscall_t::mutable_read_syscall() {
  if (!has_read_syscall()) {
    clear_syscall_t_cnt();
    set_has_read_syscall();
    syscall_t_cnt_.read_syscall_ = new ::syscall_types::nr_read_t;
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.read_syscall)
  return syscall_t_cnt_.read_syscall_;
}
::syscall_types::nr_read_t* syscall_t::release_read_syscall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.read_syscall)
  if (has_read_syscall()) {
    clear_has_syscall_t_cnt();
    ::syscall_types::nr_read_t* temp = syscall_t_cnt_.read_syscall_;
    syscall_t_cnt_.read_syscall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void syscall_t::set_allocated_read_syscall(::syscall_types::nr_read_t* read_syscall) {
  clear_syscall_t_cnt();
  if (read_syscall) {
    set_has_read_syscall();
    syscall_t_cnt_.read_syscall_ = read_syscall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.read_syscall)
}

// optional .syscall_types.nr_write_t write_sycall = 5;
bool syscall_t::has_write_sycall() const {
  return syscall_t_cnt_case() == kWriteSycall;
}
void syscall_t::set_has_write_sycall() {
  _oneof_case_[0] = kWriteSycall;
}
void syscall_t::clear_write_sycall() {
  if (has_write_sycall()) {
    delete syscall_t_cnt_.write_sycall_;
    clear_has_syscall_t_cnt();
  }
}
 const ::syscall_types::nr_write_t& syscall_t::write_sycall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.write_sycall)
  return has_write_sycall()
      ? *syscall_t_cnt_.write_sycall_
      : ::syscall_types::nr_write_t::default_instance();
}
::syscall_types::nr_write_t* syscall_t::mutable_write_sycall() {
  if (!has_write_sycall()) {
    clear_syscall_t_cnt();
    set_has_write_sycall();
    syscall_t_cnt_.write_sycall_ = new ::syscall_types::nr_write_t;
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.write_sycall)
  return syscall_t_cnt_.write_sycall_;
}
::syscall_types::nr_write_t* syscall_t::release_write_sycall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.write_sycall)
  if (has_write_sycall()) {
    clear_has_syscall_t_cnt();
    ::syscall_types::nr_write_t* temp = syscall_t_cnt_.write_sycall_;
    syscall_t_cnt_.write_sycall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void syscall_t::set_allocated_write_sycall(::syscall_types::nr_write_t* write_sycall) {
  clear_syscall_t_cnt();
  if (write_sycall) {
    set_has_write_sycall();
    syscall_t_cnt_.write_sycall_ = write_sycall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.write_sycall)
}

// optional .syscall_types.sys_generic_t generic_sycall = 6;
bool syscall_t::has_generic_sycall() const {
  return syscall_t_cnt_case() == kGenericSycall;
}
void syscall_t::set_has_generic_sycall() {
  _oneof_case_[0] = kGenericSycall;
}
void syscall_t::clear_generic_sycall() {
  if (has_generic_sycall()) {
    delete syscall_t_cnt_.generic_sycall_;
    clear_has_syscall_t_cnt();
  }
}
 const ::syscall_types::sys_generic_t& syscall_t::generic_sycall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.generic_sycall)
  return has_generic_sycall()
      ? *syscall_t_cnt_.generic_sycall_
      : ::syscall_types::sys_generic_t::default_instance();
}
::syscall_types::sys_generic_t* syscall_t::mutable_generic_sycall() {
  if (!has_generic_sycall()) {
    clear_syscall_t_cnt();
    set_has_generic_sycall();
    syscall_t_cnt_.generic_sycall_ = new ::syscall_types::sys_generic_t;
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.generic_sycall)
  return syscall_t_cnt_.generic_sycall_;
}
::syscall_types::sys_generic_t* syscall_t::release_generic_sycall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.generic_sycall)
  if (has_generic_sycall()) {
    clear_has_syscall_t_cnt();
    ::syscall_types::sys_generic_t* temp = syscall_t_cnt_.generic_sycall_;
    syscall_t_cnt_.generic_sycall_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void syscall_t::set_allocated_generic_sycall(::syscall_types::sys_generic_t* generic_sycall) {
  clear_syscall_t_cnt();
  if (generic_sycall) {
    set_has_generic_sycall();
    syscall_t_cnt_.generic_sycall_ = generic_sycall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.generic_sycall)
}

bool syscall_t::has_syscall_t_cnt() const {
  return syscall_t_cnt_case() != SYSCALL_T_CNT_NOT_SET;
}
void syscall_t::clear_has_syscall_t_cnt() {
  _oneof_case_[0] = SYSCALL_T_CNT_NOT_SET;
}
syscall_t::SyscallTCntCase syscall_t::syscall_t_cnt_case() const {
  return syscall_t::SyscallTCntCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nr_read_pol::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nr_read_pol::nr_read_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_read_pol)
}
nr_read_pol::nr_read_pol(const nr_read_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_read_pol)
}

void nr_read_pol::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

nr_read_pol::~nr_read_pol() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_read_pol)
  SharedDtor();
}

void nr_read_pol::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void nr_read_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nr_read_pol::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[2].descriptor;
}

const nr_read_pol& nr_read_pol::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

nr_read_pol* nr_read_pol::New(::google::protobuf::Arena* arena) const {
  nr_read_pol* n = new nr_read_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nr_read_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_read_pol)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nr_read_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_read_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "syscall_types.nr_read_pol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_read_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_read_pol)
  return false;
#undef DO_
}

void nr_read_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_read_pol)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_read_pol.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_read_pol)
}

::google::protobuf::uint8* nr_read_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_read_pol)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_read_pol.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_read_pol)
  return target;
}

size_t nr_read_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_read_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nr_read_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_read_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nr_read_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_read_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_read_pol)
    MergeFrom(*source);
  }
}

void nr_read_pol::MergeFrom(const nr_read_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void nr_read_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_read_pol::CopyFrom(const nr_read_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_read_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void nr_read_pol::Swap(nr_read_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nr_read_pol::InternalSwap(nr_read_pol* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nr_read_pol::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nr_read_pol

// required string name = 1;
bool nr_read_pol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nr_read_pol::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void nr_read_pol::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void nr_read_pol::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& nr_read_pol::name() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_pol.name)
  return name_.GetNoArena();
}
void nr_read_pol::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_pol.name)
}
#if LANG_CXX11
void nr_read_pol::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_read_pol.name)
}
#endif
void nr_read_pol::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_read_pol.name)
}
void nr_read_pol::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_read_pol.name)
}
::std::string* nr_read_pol::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_read_pol.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* nr_read_pol::release_name() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_read_pol.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void nr_read_pol::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_read_pol.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nr_open_t::kFileNameFieldNumber;
const int nr_open_t::kFlagsFieldNumber;
const int nr_open_t::kModeFieldNumber;
const int nr_open_t::kFileDescriptorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nr_open_t::nr_open_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_open_t)
}
nr_open_t::nr_open_t(const nr_open_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&file_descriptor_) -
    reinterpret_cast<char*>(&flags_) + sizeof(file_descriptor_));
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_open_t)
}

void nr_open_t::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, reinterpret_cast<char*>(&file_descriptor_) -
    reinterpret_cast<char*>(&flags_) + sizeof(file_descriptor_));
}

nr_open_t::~nr_open_t() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_open_t)
  SharedDtor();
}

void nr_open_t::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void nr_open_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nr_open_t::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[3].descriptor;
}

const nr_open_t& nr_open_t::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

nr_open_t* nr_open_t::New(::google::protobuf::Arena* arena) const {
  nr_open_t* n = new nr_open_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nr_open_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_open_t)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&flags_, 0, reinterpret_cast<char*>(&file_descriptor_) -
      reinterpret_cast<char*>(&flags_) + sizeof(file_descriptor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nr_open_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_open_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "syscall_types.nr_open_t.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 flags = 2;
      case 2: {
        if (tag == 16u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 mode = 3;
      case 3: {
        if (tag == 24u) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 file_descriptor = 4;
      case 4: {
        if (tag == 32u) {
          set_has_file_descriptor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_descriptor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_open_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_open_t)
  return false;
#undef DO_
}

void nr_open_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_open_t)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_open_t.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required sint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->flags(), output);
  }

  // required uint32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }

  // required int32 file_descriptor = 4;
  if (has_file_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->file_descriptor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_open_t)
}

::google::protobuf::uint8* nr_open_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_open_t)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_open_t.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required sint32 flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->flags(), target);
  }

  // required uint32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mode(), target);
  }

  // required int32 file_descriptor = 4;
  if (has_file_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->file_descriptor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_open_t)
  return target;
}

size_t nr_open_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.nr_open_t)
  size_t total_size = 0;

  if (has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_flags()) {
    // required sint32 flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->flags());
  }

  if (has_mode()) {
    // required uint32 mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  if (has_file_descriptor()) {
    // required int32 file_descriptor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->file_descriptor());
  }

  return total_size;
}
size_t nr_open_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_open_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());

    // required sint32 flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->flags());

    // required uint32 mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());

    // required int32 file_descriptor = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->file_descriptor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nr_open_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_open_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_open_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nr_open_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_open_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_open_t)
    MergeFrom(*source);
  }
}

void nr_open_t::MergeFrom(const nr_open_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_open_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_file_descriptor()) {
      set_file_descriptor(from.file_descriptor());
    }
  }
}

void nr_open_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_open_t::CopyFrom(const nr_open_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_open_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void nr_open_t::Swap(nr_open_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nr_open_t::InternalSwap(nr_open_t* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(flags_, other->flags_);
  std::swap(mode_, other->mode_);
  std::swap(file_descriptor_, other->file_descriptor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nr_open_t::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nr_open_t

// required string file_name = 1;
bool nr_open_t::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nr_open_t::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void nr_open_t::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void nr_open_t::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& nr_open_t::file_name() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.file_name)
  return file_name_.GetNoArena();
}
void nr_open_t::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.file_name)
}
#if LANG_CXX11
void nr_open_t::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_open_t.file_name)
}
#endif
void nr_open_t::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_open_t.file_name)
}
void nr_open_t::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_open_t.file_name)
}
::std::string* nr_open_t::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_open_t.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* nr_open_t::release_file_name() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_open_t.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void nr_open_t::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_open_t.file_name)
}

// required sint32 flags = 2;
bool nr_open_t::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nr_open_t::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void nr_open_t::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void nr_open_t::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 nr_open_t::flags() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.flags)
  return flags_;
}
void nr_open_t::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.flags)
}

// required uint32 mode = 3;
bool nr_open_t::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void nr_open_t::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void nr_open_t::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void nr_open_t::clear_mode() {
  mode_ = 0u;
  clear_has_mode();
}
::google::protobuf::uint32 nr_open_t::mode() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.mode)
  return mode_;
}
void nr_open_t::set_mode(::google::protobuf::uint32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.mode)
}

// required int32 file_descriptor = 4;
bool nr_open_t::has_file_descriptor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void nr_open_t::set_has_file_descriptor() {
  _has_bits_[0] |= 0x00000008u;
}
void nr_open_t::clear_has_file_descriptor() {
  _has_bits_[0] &= ~0x00000008u;
}
void nr_open_t::clear_file_descriptor() {
  file_descriptor_ = 0;
  clear_has_file_descriptor();
}
::google::protobuf::int32 nr_open_t::file_descriptor() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.file_descriptor)
  return file_descriptor_;
}
void nr_open_t::set_file_descriptor(::google::protobuf::int32 value) {
  set_has_file_descriptor();
  file_descriptor_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.file_descriptor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nr_read_t::kFileDescriptorFieldNumber;
const int nr_read_t::kBufferAddressFieldNumber;
const int nr_read_t::kCountFieldNumber;
const int nr_read_t::kBufferDataFieldNumber;
const int nr_read_t::kCountEffectiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nr_read_t::nr_read_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_read_t)
}
nr_read_t::nr_read_t(const nr_read_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer_data()) {
    buffer_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
  }
  ::memcpy(&buffer_address_, &from.buffer_address_,
    reinterpret_cast<char*>(&count_effective_) -
    reinterpret_cast<char*>(&buffer_address_) + sizeof(count_effective_));
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_read_t)
}

void nr_read_t::SharedCtor() {
  _cached_size_ = 0;
  buffer_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buffer_address_, 0, reinterpret_cast<char*>(&count_effective_) -
    reinterpret_cast<char*>(&buffer_address_) + sizeof(count_effective_));
}

nr_read_t::~nr_read_t() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_read_t)
  SharedDtor();
}

void nr_read_t::SharedDtor() {
  buffer_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void nr_read_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nr_read_t::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[4].descriptor;
}

const nr_read_t& nr_read_t::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

nr_read_t* nr_read_t::New(::google::protobuf::Arena* arena) const {
  nr_read_t* n = new nr_read_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nr_read_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_read_t)
  if (has_buffer_data()) {
    GOOGLE_DCHECK(!buffer_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buffer_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&buffer_address_, 0, reinterpret_cast<char*>(&count_effective_) -
      reinterpret_cast<char*>(&buffer_address_) + sizeof(count_effective_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nr_read_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_read_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 file_descriptor = 1;
      case 1: {
        if (tag == 8u) {
          set_has_file_descriptor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_descriptor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 buffer_address = 2;
      case 2: {
        if (tag == 16u) {
          set_has_buffer_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24u) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buffer_data = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count_effective = 5;
      case 5: {
        if (tag == 40u) {
          set_has_count_effective();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_effective_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_read_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_read_t)
  return false;
#undef DO_
}

void nr_read_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_read_t)
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_descriptor(), output);
  }

  // required uint64 buffer_address = 2;
  if (has_buffer_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buffer_address(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer_data(), output);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_effective(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_read_t)
}

::google::protobuf::uint8* nr_read_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_read_t)
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_descriptor(), target);
  }

  // required uint64 buffer_address = 2;
  if (has_buffer_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buffer_address(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer_data(), target);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_effective(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_read_t)
  return target;
}

size_t nr_read_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.nr_read_t)
  size_t total_size = 0;

  if (has_buffer_data()) {
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer_data());
  }

  if (has_buffer_address()) {
    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer_address());
  }

  if (has_file_descriptor()) {
    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_count_effective()) {
    // required uint32 count_effective = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_effective());
  }

  return total_size;
}
size_t nr_read_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_read_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer_data());

    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer_address());

    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());

    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 count_effective = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_effective());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nr_read_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_read_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_read_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nr_read_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_read_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_read_t)
    MergeFrom(*source);
  }
}

void nr_read_t::MergeFrom(const nr_read_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_read_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_buffer_data()) {
      set_has_buffer_data();
      buffer_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
    }
    if (from.has_buffer_address()) {
      set_buffer_address(from.buffer_address());
    }
    if (from.has_file_descriptor()) {
      set_file_descriptor(from.file_descriptor());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_count_effective()) {
      set_count_effective(from.count_effective());
    }
  }
}

void nr_read_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_read_t::CopyFrom(const nr_read_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_read_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void nr_read_t::Swap(nr_read_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nr_read_t::InternalSwap(nr_read_t* other) {
  buffer_data_.Swap(&other->buffer_data_);
  std::swap(buffer_address_, other->buffer_address_);
  std::swap(file_descriptor_, other->file_descriptor_);
  std::swap(count_, other->count_);
  std::swap(count_effective_, other->count_effective_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nr_read_t::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nr_read_t

// required uint32 file_descriptor = 1;
bool nr_read_t::has_file_descriptor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void nr_read_t::set_has_file_descriptor() {
  _has_bits_[0] |= 0x00000004u;
}
void nr_read_t::clear_has_file_descriptor() {
  _has_bits_[0] &= ~0x00000004u;
}
void nr_read_t::clear_file_descriptor() {
  file_descriptor_ = 0u;
  clear_has_file_descriptor();
}
::google::protobuf::uint32 nr_read_t::file_descriptor() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.file_descriptor)
  return file_descriptor_;
}
void nr_read_t::set_file_descriptor(::google::protobuf::uint32 value) {
  set_has_file_descriptor();
  file_descriptor_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.file_descriptor)
}

// required uint64 buffer_address = 2;
bool nr_read_t::has_buffer_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nr_read_t::set_has_buffer_address() {
  _has_bits_[0] |= 0x00000002u;
}
void nr_read_t::clear_has_buffer_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void nr_read_t::clear_buffer_address() {
  buffer_address_ = GOOGLE_ULONGLONG(0);
  clear_has_buffer_address();
}
::google::protobuf::uint64 nr_read_t::buffer_address() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.buffer_address)
  return buffer_address_;
}
void nr_read_t::set_buffer_address(::google::protobuf::uint64 value) {
  set_has_buffer_address();
  buffer_address_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.buffer_address)
}

// required uint32 count = 3;
bool nr_read_t::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void nr_read_t::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void nr_read_t::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void nr_read_t::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 nr_read_t::count() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.count)
  return count_;
}
void nr_read_t::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.count)
}

// required bytes buffer_data = 4;
bool nr_read_t::has_buffer_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nr_read_t::set_has_buffer_data() {
  _has_bits_[0] |= 0x00000001u;
}
void nr_read_t::clear_has_buffer_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void nr_read_t::clear_buffer_data() {
  buffer_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer_data();
}
const ::std::string& nr_read_t::buffer_data() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.buffer_data)
  return buffer_data_.GetNoArena();
}
void nr_read_t::set_buffer_data(const ::std::string& value) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.buffer_data)
}
#if LANG_CXX11
void nr_read_t::set_buffer_data(::std::string&& value) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_read_t.buffer_data)
}
#endif
void nr_read_t::set_buffer_data(const char* value) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_read_t.buffer_data)
}
void nr_read_t::set_buffer_data(const void* value, size_t size) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_read_t.buffer_data)
}
::std::string* nr_read_t::mutable_buffer_data() {
  set_has_buffer_data();
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_read_t.buffer_data)
  return buffer_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* nr_read_t::release_buffer_data() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_read_t.buffer_data)
  clear_has_buffer_data();
  return buffer_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void nr_read_t::set_allocated_buffer_data(::std::string* buffer_data) {
  if (buffer_data != NULL) {
    set_has_buffer_data();
  } else {
    clear_has_buffer_data();
  }
  buffer_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer_data);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_read_t.buffer_data)
}

// required uint32 count_effective = 5;
bool nr_read_t::has_count_effective() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void nr_read_t::set_has_count_effective() {
  _has_bits_[0] |= 0x00000010u;
}
void nr_read_t::clear_has_count_effective() {
  _has_bits_[0] &= ~0x00000010u;
}
void nr_read_t::clear_count_effective() {
  count_effective_ = 0u;
  clear_has_count_effective();
}
::google::protobuf::uint32 nr_read_t::count_effective() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.count_effective)
  return count_effective_;
}
void nr_read_t::set_count_effective(::google::protobuf::uint32 value) {
  set_has_count_effective();
  count_effective_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.count_effective)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nr_write_t::kFileDescriptorFieldNumber;
const int nr_write_t::kBufferAddressFieldNumber;
const int nr_write_t::kCountFieldNumber;
const int nr_write_t::kBufferDataFieldNumber;
const int nr_write_t::kCountEffectiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nr_write_t::nr_write_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_write_t)
}
nr_write_t::nr_write_t(const nr_write_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer_data()) {
    buffer_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
  }
  ::memcpy(&buffer_address_, &from.buffer_address_,
    reinterpret_cast<char*>(&count_effective_) -
    reinterpret_cast<char*>(&buffer_address_) + sizeof(count_effective_));
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_write_t)
}

void nr_write_t::SharedCtor() {
  _cached_size_ = 0;
  buffer_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buffer_address_, 0, reinterpret_cast<char*>(&count_effective_) -
    reinterpret_cast<char*>(&buffer_address_) + sizeof(count_effective_));
}

nr_write_t::~nr_write_t() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_write_t)
  SharedDtor();
}

void nr_write_t::SharedDtor() {
  buffer_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void nr_write_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nr_write_t::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[5].descriptor;
}

const nr_write_t& nr_write_t::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

nr_write_t* nr_write_t::New(::google::protobuf::Arena* arena) const {
  nr_write_t* n = new nr_write_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nr_write_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_write_t)
  if (has_buffer_data()) {
    GOOGLE_DCHECK(!buffer_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*buffer_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&buffer_address_, 0, reinterpret_cast<char*>(&count_effective_) -
      reinterpret_cast<char*>(&buffer_address_) + sizeof(count_effective_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool nr_write_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_write_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 file_descriptor = 1;
      case 1: {
        if (tag == 8u) {
          set_has_file_descriptor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_descriptor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 buffer_address = 2;
      case 2: {
        if (tag == 16u) {
          set_has_buffer_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24u) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buffer_data = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count_effective = 5;
      case 5: {
        if (tag == 40u) {
          set_has_count_effective();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_effective_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_write_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_write_t)
  return false;
#undef DO_
}

void nr_write_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_write_t)
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_descriptor(), output);
  }

  // required uint64 buffer_address = 2;
  if (has_buffer_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buffer_address(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer_data(), output);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count_effective(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_write_t)
}

::google::protobuf::uint8* nr_write_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_write_t)
  // required uint32 file_descriptor = 1;
  if (has_file_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_descriptor(), target);
  }

  // required uint64 buffer_address = 2;
  if (has_buffer_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buffer_address(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required bytes buffer_data = 4;
  if (has_buffer_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer_data(), target);
  }

  // required uint32 count_effective = 5;
  if (has_count_effective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_effective(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_write_t)
  return target;
}

size_t nr_write_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.nr_write_t)
  size_t total_size = 0;

  if (has_buffer_data()) {
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer_data());
  }

  if (has_buffer_address()) {
    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer_address());
  }

  if (has_file_descriptor()) {
    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_count_effective()) {
    // required uint32 count_effective = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_effective());
  }

  return total_size;
}
size_t nr_write_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_write_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->buffer_data());

    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buffer_address());

    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());

    // required uint32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 count_effective = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count_effective());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nr_write_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_write_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_write_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const nr_write_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_write_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_write_t)
    MergeFrom(*source);
  }
}

void nr_write_t::MergeFrom(const nr_write_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_write_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_buffer_data()) {
      set_has_buffer_data();
      buffer_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
    }
    if (from.has_buffer_address()) {
      set_buffer_address(from.buffer_address());
    }
    if (from.has_file_descriptor()) {
      set_file_descriptor(from.file_descriptor());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_count_effective()) {
      set_count_effective(from.count_effective());
    }
  }
}

void nr_write_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_write_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_write_t::CopyFrom(const nr_write_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_write_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_write_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void nr_write_t::Swap(nr_write_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nr_write_t::InternalSwap(nr_write_t* other) {
  buffer_data_.Swap(&other->buffer_data_);
  std::swap(buffer_address_, other->buffer_address_);
  std::swap(file_descriptor_, other->file_descriptor_);
  std::swap(count_, other->count_);
  std::swap(count_effective_, other->count_effective_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nr_write_t::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nr_write_t

// required uint32 file_descriptor = 1;
bool nr_write_t::has_file_descriptor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void nr_write_t::set_has_file_descriptor() {
  _has_bits_[0] |= 0x00000004u;
}
void nr_write_t::clear_has_file_descriptor() {
  _has_bits_[0] &= ~0x00000004u;
}
void nr_write_t::clear_file_descriptor() {
  file_descriptor_ = 0u;
  clear_has_file_descriptor();
}
::google::protobuf::uint32 nr_write_t::file_descriptor() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.file_descriptor)
  return file_descriptor_;
}
void nr_write_t::set_file_descriptor(::google::protobuf::uint32 value) {
  set_has_file_descriptor();
  file_descriptor_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.file_descriptor)
}

// required uint64 buffer_address = 2;
bool nr_write_t::has_buffer_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void nr_write_t::set_has_buffer_address() {
  _has_bits_[0] |= 0x00000002u;
}
void nr_write_t::clear_has_buffer_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void nr_write_t::clear_buffer_address() {
  buffer_address_ = GOOGLE_ULONGLONG(0);
  clear_has_buffer_address();
}
::google::protobuf::uint64 nr_write_t::buffer_address() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.buffer_address)
  return buffer_address_;
}
void nr_write_t::set_buffer_address(::google::protobuf::uint64 value) {
  set_has_buffer_address();
  buffer_address_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.buffer_address)
}

// required uint32 count = 3;
bool nr_write_t::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void nr_write_t::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void nr_write_t::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void nr_write_t::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 nr_write_t::count() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.count)
  return count_;
}
void nr_write_t::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.count)
}

// required bytes buffer_data = 4;
bool nr_write_t::has_buffer_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void nr_write_t::set_has_buffer_data() {
  _has_bits_[0] |= 0x00000001u;
}
void nr_write_t::clear_has_buffer_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void nr_write_t::clear_buffer_data() {
  buffer_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer_data();
}
const ::std::string& nr_write_t::buffer_data() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.buffer_data)
  return buffer_data_.GetNoArena();
}
void nr_write_t::set_buffer_data(const ::std::string& value) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.buffer_data)
}
#if LANG_CXX11
void nr_write_t::set_buffer_data(::std::string&& value) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_write_t.buffer_data)
}
#endif
void nr_write_t::set_buffer_data(const char* value) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_write_t.buffer_data)
}
void nr_write_t::set_buffer_data(const void* value, size_t size) {
  set_has_buffer_data();
  buffer_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_write_t.buffer_data)
}
::std::string* nr_write_t::mutable_buffer_data() {
  set_has_buffer_data();
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_write_t.buffer_data)
  return buffer_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* nr_write_t::release_buffer_data() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_write_t.buffer_data)
  clear_has_buffer_data();
  return buffer_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void nr_write_t::set_allocated_buffer_data(::std::string* buffer_data) {
  if (buffer_data != NULL) {
    set_has_buffer_data();
  } else {
    clear_has_buffer_data();
  }
  buffer_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer_data);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_write_t.buffer_data)
}

// required uint32 count_effective = 5;
bool nr_write_t::has_count_effective() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void nr_write_t::set_has_count_effective() {
  _has_bits_[0] |= 0x00000010u;
}
void nr_write_t::clear_has_count_effective() {
  _has_bits_[0] &= ~0x00000010u;
}
void nr_write_t::clear_count_effective() {
  count_effective_ = 0u;
  clear_has_count_effective();
}
::google::protobuf::uint32 nr_write_t::count_effective() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.count_effective)
  return count_effective_;
}
void nr_write_t::set_count_effective(::google::protobuf::uint32 value) {
  set_has_count_effective();
  count_effective_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.count_effective)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sys_generic_t::kNameFieldNumber;
const int sys_generic_t::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sys_generic_t::sys_generic_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_syscall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.sys_generic_t)
}
sys_generic_t::sys_generic_t(const sys_generic_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:syscall_types.sys_generic_t)
}

void sys_generic_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = 0u;
}

sys_generic_t::~sys_generic_t() {
  // @@protoc_insertion_point(destructor:syscall_types.sys_generic_t)
  SharedDtor();
}

void sys_generic_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sys_generic_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_generic_t::descriptor() {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[6].descriptor;
}

const sys_generic_t& sys_generic_t::default_instance() {
  protobuf_syscall_2eproto::InitDefaults();
  return *internal_default_instance();
}

sys_generic_t* sys_generic_t::New(::google::protobuf::Arena* arena) const {
  sys_generic_t* n = new sys_generic_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sys_generic_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.sys_generic_t)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  address_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sys_generic_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.sys_generic_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "syscall_types.sys_generic_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 address = 2;
      case 2: {
        if (tag == 16u) {
          set_has_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.sys_generic_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.sys_generic_t)
  return false;
#undef DO_
}

void sys_generic_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.sys_generic_t)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.sys_generic_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.sys_generic_t)
}

::google::protobuf::uint8* sys_generic_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.sys_generic_t)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "syscall_types.sys_generic_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.sys_generic_t)
  return target;
}

size_t sys_generic_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.sys_generic_t)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_address()) {
    // required uint32 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  return total_size;
}
size_t sys_generic_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.sys_generic_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_generic_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.sys_generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  const sys_generic_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sys_generic_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.sys_generic_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.sys_generic_t)
    MergeFrom(*source);
  }
}

void sys_generic_t::MergeFrom(const sys_generic_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.sys_generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
}

void sys_generic_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.sys_generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_generic_t::CopyFrom(const sys_generic_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.sys_generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_generic_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void sys_generic_t::Swap(sys_generic_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sys_generic_t::InternalSwap(sys_generic_t* other) {
  name_.Swap(&other->name_);
  std::swap(address_, other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sys_generic_t::GetMetadata() const {
  protobuf_syscall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_syscall_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sys_generic_t

// required string name = 1;
bool sys_generic_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sys_generic_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void sys_generic_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void sys_generic_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& sys_generic_t::name() const {
  // @@protoc_insertion_point(field_get:syscall_types.sys_generic_t.name)
  return name_.GetNoArena();
}
void sys_generic_t::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.sys_generic_t.name)
}
#if LANG_CXX11
void sys_generic_t::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.sys_generic_t.name)
}
#endif
void sys_generic_t::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.sys_generic_t.name)
}
void sys_generic_t::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.sys_generic_t.name)
}
::std::string* sys_generic_t::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:syscall_types.sys_generic_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sys_generic_t::release_name() {
  // @@protoc_insertion_point(field_release:syscall_types.sys_generic_t.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sys_generic_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.sys_generic_t.name)
}

// required uint32 address = 2;
bool sys_generic_t::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void sys_generic_t::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void sys_generic_t::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void sys_generic_t::clear_address() {
  address_ = 0u;
  clear_has_address();
}
::google::protobuf::uint32 sys_generic_t::address() const {
  // @@protoc_insertion_point(field_get:syscall_types.sys_generic_t.address)
  return address_;
}
void sys_generic_t::set_address(::google::protobuf::uint32 value) {
  set_has_address();
  address_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.sys_generic_t.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace syscall_types

// @@protoc_insertion_point(global_scope)
