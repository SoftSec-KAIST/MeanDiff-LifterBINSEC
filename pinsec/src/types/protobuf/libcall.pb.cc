// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libcall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libcall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace libcall_types {
class libcall_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<libcall_pol> {
  public:
  const ::libcall_types::strcpy_pol* strcpy_;
  const ::libcall_types::printf_pol* printf_;
  const ::libcall_types::atoi_pol* atoi_;
  const ::libcall_types::malloc_pol* malloc_;
  const ::libcall_types::getmodulehandle_pol* getmodulehandle_;
  const ::libcall_types::getprocaddress_pol* getprocaddress_;
  const ::libcall_types::getmainargs_pol* getmainargs_;
  const ::libcall_types::gethostname_pol* gethostname_;
  const ::libcall_types::free_pol* free_;
  const ::libcall_types::memcpy_pol* memcpy_;
  const ::libcall_types::memset_pol* memset_;
  const ::libcall_types::fgetc_pol* fgetc_;
  const ::libcall_types::read_pol* read_;
  const ::libcall_types::strchr_pol* strchr_;
  const ::libcall_types::exit_pol* exit_;
  const ::libcall_types::strcmp_pol* strcmp_;
  const ::libcall_types::ctype_b_loc_pol* ctype_b_loc_;
  const ::libcall_types::fscanf_pol* fscanf_;
  const ::libcall_types::strncpy_pol* strncpy_;
  const ::libcall_types::fstat_pol* fstat_;
  const ::libcall_types::realloc_pol* realloc_;
  const ::libcall_types::mmap_pol* mmap_;
  const ::libcall_types::qsort_pol* qsort_;
  const ::libcall_types::bsearch_pol* bsearch_;
  const ::libcall_types::open_pol* open_stub_;
  const ::libcall_types::lseek_pol* lseek_;
  const ::libcall_types::fread_pol* fread_;
  const ::libcall_types::strncmp_pol* strncmp_;
  const ::libcall_types::memcmp_pol* memcmp_;
  const ::libcall_types::fxstat64_pol* fxstat64_;
  const ::libcall_types::generic_pol* generic_;
} _libcall_pol_default_instance_;
class libcall_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<libcall_t> {
  public:
  const ::libcall_types::strcpy_t* strcpy_;
  const ::libcall_types::printf_t* printf_;
  const ::libcall_types::atoi_t* atoi_;
  const ::libcall_types::malloc_t* malloc_;
  const ::libcall_types::getmodulehandle_t* getmodulehandle_;
  const ::libcall_types::getprocaddress_t* getprocaddress_;
  const ::libcall_types::getmainargs_t* getmainargs_;
  const ::libcall_types::gethostname_t* gethostname_;
  const ::libcall_types::free_t* free_;
  const ::libcall_types::memcpy_t* memcpy_;
  const ::libcall_types::memset_t* memset_;
  const ::libcall_types::fgetc_t* fgetc_;
  const ::libcall_types::generic_t* generic_;
  const ::libcall_types::read_t* read_;
  const ::libcall_types::strchr_t* strchr_;
  const ::libcall_types::exit_t* exit_;
  const ::libcall_types::strcmp_t* strcmp_;
  const ::libcall_types::ctype_b_loc_t* ctype_b_loc_;
  const ::libcall_types::fscanf_t* fscanf_;
  const ::libcall_types::strncpy_t* strncpy_;
  const ::libcall_types::fstat_t* fstat_;
  const ::libcall_types::realloc_t* realloc_;
  const ::libcall_types::mmap_t* mmap_;
  const ::libcall_types::qsort_t* qsort_;
  const ::libcall_types::bsearch_t* bsearch_;
  const ::libcall_types::open_t* open_stub_;
  const ::libcall_types::lseek_t* lseek_;
  const ::libcall_types::fread_t* fread_;
  const ::libcall_types::strncmp_t* strncmp_;
  const ::libcall_types::memcmp_t* memcmp_;
  const ::libcall_types::fxstat64_t* fxstat64_;
} _libcall_t_default_instance_;
class generic_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<generic_pol> {
} _generic_pol_default_instance_;
class ctype_b_loc_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ctype_b_loc_pol> {
} _ctype_b_loc_pol_default_instance_;
class exit_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<exit_pol> {
} _exit_pol_default_instance_;
class fscanf_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fscanf_pol> {
} _fscanf_pol_default_instance_;
class read_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<read_pol> {
} _read_pol_default_instance_;
class fread_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fread_pol> {
} _fread_pol_default_instance_;
class strcmp_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strcmp_pol> {
} _strcmp_pol_default_instance_;
class strncmp_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strncmp_pol> {
} _strncmp_pol_default_instance_;
class memcmp_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<memcmp_pol> {
} _memcmp_pol_default_instance_;
class strchr_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strchr_pol> {
} _strchr_pol_default_instance_;
class strncpy_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strncpy_pol> {
} _strncpy_pol_default_instance_;
class fstat_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fstat_pol> {
} _fstat_pol_default_instance_;
class fxstat64_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fxstat64_pol> {
} _fxstat64_pol_default_instance_;
class realloc_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<realloc_pol> {
} _realloc_pol_default_instance_;
class mmap_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mmap_pol> {
} _mmap_pol_default_instance_;
class qsort_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<qsort_pol> {
} _qsort_pol_default_instance_;
class bsearch_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<bsearch_pol> {
} _bsearch_pol_default_instance_;
class open_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<open_pol> {
} _open_pol_default_instance_;
class strcpy_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strcpy_pol> {
} _strcpy_pol_default_instance_;
class printf_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<printf_pol> {
} _printf_pol_default_instance_;
class atoi_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<atoi_pol> {
} _atoi_pol_default_instance_;
class malloc_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<malloc_pol> {
} _malloc_pol_default_instance_;
class getmodulehandle_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<getmodulehandle_pol> {
} _getmodulehandle_pol_default_instance_;
class getprocaddress_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<getprocaddress_pol> {
} _getprocaddress_pol_default_instance_;
class getmainargs_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<getmainargs_pol> {
} _getmainargs_pol_default_instance_;
class gethostname_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<gethostname_pol> {
} _gethostname_pol_default_instance_;
class free_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<free_pol> {
} _free_pol_default_instance_;
class memcpy_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<memcpy_pol> {
} _memcpy_pol_default_instance_;
class memset_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<memset_pol> {
} _memset_pol_default_instance_;
class fgetc_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fgetc_pol> {
} _fgetc_pol_default_instance_;
class lseek_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<lseek_pol> {
} _lseek_pol_default_instance_;
class exit_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<exit_t> {
} _exit_t_default_instance_;
class generic_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<generic_t> {
} _generic_t_default_instance_;
class fscanf_elem_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fscanf_elem_t> {
  public:
  ::google::protobuf::uint64 value_dec_;
  ::google::protobuf::internal::ArenaStringPtr value_string_;
} _fscanf_elem_t_default_instance_;
class fscanf_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fscanf_t> {
} _fscanf_t_default_instance_;
class ctype_b_loc_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ctype_b_loc_t> {
} _ctype_b_loc_t_default_instance_;
class read_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<read_t> {
} _read_t_default_instance_;
class fread_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fread_t> {
} _fread_t_default_instance_;
class strchr_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strchr_t> {
} _strchr_t_default_instance_;
class strncpy_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strncpy_t> {
} _strncpy_t_default_instance_;
class fstat_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fstat_t> {
} _fstat_t_default_instance_;
class fxstat64_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fxstat64_t> {
} _fxstat64_t_default_instance_;
class realloc_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<realloc_t> {
} _realloc_t_default_instance_;
class mmap_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<mmap_t> {
} _mmap_t_default_instance_;
class qsort_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<qsort_t> {
} _qsort_t_default_instance_;
class bsearch_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<bsearch_t> {
} _bsearch_t_default_instance_;
class open_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<open_t> {
} _open_t_default_instance_;
class strcpy_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strcpy_t> {
} _strcpy_t_default_instance_;
class strcmp_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strcmp_t> {
} _strcmp_t_default_instance_;
class strncmp_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<strncmp_t> {
} _strncmp_t_default_instance_;
class memcmp_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<memcmp_t> {
} _memcmp_t_default_instance_;
class printf_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<printf_t> {
} _printf_t_default_instance_;
class atoi_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<atoi_t> {
} _atoi_t_default_instance_;
class malloc_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<malloc_t> {
} _malloc_t_default_instance_;
class getmodulehandle_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<getmodulehandle_t> {
} _getmodulehandle_t_default_instance_;
class getprocaddress_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<getprocaddress_t> {
} _getprocaddress_t_default_instance_;
class getmainargs_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<getmainargs_t> {
} _getmainargs_t_default_instance_;
class gethostname_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<gethostname_t> {
} _gethostname_t_default_instance_;
class free_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<free_t> {
} _free_t_default_instance_;
class memcpy_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<memcpy_t> {
} _memcpy_t_default_instance_;
class memset_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<memset_t> {
} _memset_t_default_instance_;
class fgetc_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<fgetc_t> {
} _fgetc_t_default_instance_;
class lseek_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<lseek_t> {
} _lseek_t_default_instance_;

namespace protobuf_libcall_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[65];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, restrict_addresses_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), strcpy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), printf_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), atoi_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), malloc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), getmodulehandle_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), getprocaddress_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), getmainargs_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), gethostname_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), free_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), memcpy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), memset_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), fgetc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), read_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), strchr_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), exit_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), strcmp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), ctype_b_loc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), fscanf_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), strncpy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), fstat_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), realloc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), mmap_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), qsort_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), bsearch_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), open_stub_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), lseek_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), fread_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), strncmp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), memcmp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), fxstat64_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_pol_default_instance_), generic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_pol, libcall_cnt_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, func_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, func_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, is_traced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, ident_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), strcpy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), printf_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), atoi_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), malloc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), getmodulehandle_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), getprocaddress_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), getmainargs_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), gethostname_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), free_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), memcpy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), memset_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), fgetc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), generic_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), read_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), strchr_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), exit_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), strcmp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), ctype_b_loc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), fscanf_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), strncpy_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), fstat_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), realloc_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), mmap_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), qsort_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), bsearch_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), open_stub_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), lseek_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), fread_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), strncmp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), memcmp_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_libcall_t_default_instance_), fxstat64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(libcall_t, libcall_cnt_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generic_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generic_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generic_pol, ret_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_pol, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_pol, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_pol, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_pol, elems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_pol, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_pol, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_pol, buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_pol, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_pol, ret_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, ptr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, nmemb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_pol, ret_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_pol, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_pol, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_pol, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_pol, s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_pol, s2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_pol, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_pol, s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_pol, s2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_pol, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_pol, sc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_pol, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_pol, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_pol, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_pol, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_pol, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_pol, ptr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_pol, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, prot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_pol, ret_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_pol, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_pol, nmemb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_pol, compare_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, nmemb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, compare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_pol, ret_),
  0,
  1,
  3,
  4,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_pol, pathname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_pol, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_pol, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_pol, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_pol, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_pol, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_pol, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_pol, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_pol, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_pol, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_pol, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_pol, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_pol, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_pol, hmodule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_pol, proc_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_pol, ret_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, argc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, argv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, dowildcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, startinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_pol, ret_),
  0,
  1,
  2,
  4,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_pol, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_pol, namelen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_pol, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(free_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(free_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(free_pol, ptr_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_pol, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_pol, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_pol, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_pol, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_pol, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_pol, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_pol, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_pol, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_pol, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_pol, whence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_pol, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generic_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generic_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(generic_t, ret_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_elem_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_elem_t, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_elem_t, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_elem_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_elem_t, addr_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_fscanf_elem_t_default_instance_), value_dec_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_fscanf_elem_t_default_instance_), value_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_elem_t, fscanf_cnt_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_t, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_t, elems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fscanf_t, ret_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_t, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ctype_b_loc_t, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_t, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_t, buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_t, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(read_t, ret_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, ptr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, nmemb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fread_t, ret_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_t, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_t, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_t, size_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strchr_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_t, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_t, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_t, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncpy_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_t, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_t, buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fstat_t, ret_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_t, vers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_t, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_t, buf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fxstat64_t, ret_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_t, ptr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(realloc_t, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, prot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mmap_t, ret_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_t, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_t, nmemb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qsort_t, compare_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, nmemb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, compare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bsearch_t, ret_),
  0,
  1,
  3,
  4,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_t, pathname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_t, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(open_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_t, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_t, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcpy_t, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, s2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, size_max_s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, size_max_s2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strcmp_t, ret_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_t, s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_t, s2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_t, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strncmp_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_t, s1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_t, s2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_t, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcmp_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_t, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(printf_t, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_t, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(atoi_t, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(malloc_t, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_t, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmodulehandle_t, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_t, hmodule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_t, proc_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getprocaddress_t, ret_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, argc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, argv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, env_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, dowildcard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, startinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getmainargs_t, ret_),
  0,
  1,
  2,
  4,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_t, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_t, namelen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gethostname_t, ret_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(free_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(free_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(free_t, ptr_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_t, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_t, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memcpy_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_t, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_t, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_t, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(memset_t, ret_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_t, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fgetc_t, ret_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_t, fd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_t, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_t, whence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lseek_t, ret_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 40, sizeof(libcall_pol)},
  { 75, 115, sizeof(libcall_t)},
  { 150, 155, sizeof(generic_pol)},
  { 156, 162, sizeof(ctype_b_loc_pol)},
  { 164, 168, sizeof(exit_pol)},
  { 168, 175, sizeof(fscanf_pol)},
  { 178, 186, sizeof(read_pol)},
  { 190, 199, sizeof(fread_pol)},
  { 204, 211, sizeof(strcmp_pol)},
  { 214, 222, sizeof(strncmp_pol)},
  { 226, 234, sizeof(memcmp_pol)},
  { 238, 245, sizeof(strchr_pol)},
  { 248, 256, sizeof(strncpy_pol)},
  { 260, 264, sizeof(fstat_pol)},
  { 264, 268, sizeof(fxstat64_pol)},
  { 268, 275, sizeof(realloc_pol)},
  { 278, 289, sizeof(mmap_pol)},
  { 296, 304, sizeof(qsort_pol)},
  { 308, 318, sizeof(bsearch_pol)},
  { 324, 332, sizeof(open_pol)},
  { 336, 343, sizeof(strcpy_pol)},
  { 346, 352, sizeof(printf_pol)},
  { 354, 360, sizeof(atoi_pol)},
  { 362, 368, sizeof(malloc_pol)},
  { 370, 376, sizeof(getmodulehandle_pol)},
  { 378, 385, sizeof(getprocaddress_pol)},
  { 388, 398, sizeof(getmainargs_pol)},
  { 404, 411, sizeof(gethostname_pol)},
  { 414, 419, sizeof(free_pol)},
  { 420, 428, sizeof(memcpy_pol)},
  { 432, 440, sizeof(memset_pol)},
  { 444, 450, sizeof(fgetc_pol)},
  { 452, 460, sizeof(lseek_pol)},
  { 464, 468, sizeof(exit_t)},
  { 468, 473, sizeof(generic_t)},
  { 474, 483, sizeof(fscanf_elem_t)},
  { 487, 494, sizeof(fscanf_t)},
  { 497, 503, sizeof(ctype_b_loc_t)},
  { 505, 513, sizeof(read_t)},
  { 517, 526, sizeof(fread_t)},
  { 531, 539, sizeof(strchr_t)},
  { 543, 551, sizeof(strncpy_t)},
  { 555, 562, sizeof(fstat_t)},
  { 565, 573, sizeof(fxstat64_t)},
  { 577, 584, sizeof(realloc_t)},
  { 587, 598, sizeof(mmap_t)},
  { 605, 613, sizeof(qsort_t)},
  { 617, 627, sizeof(bsearch_t)},
  { 633, 641, sizeof(open_t)},
  { 645, 652, sizeof(strcpy_t)},
  { 655, 664, sizeof(strcmp_t)},
  { 669, 677, sizeof(strncmp_t)},
  { 681, 689, sizeof(memcmp_t)},
  { 693, 699, sizeof(printf_t)},
  { 701, 707, sizeof(atoi_t)},
  { 709, 715, sizeof(malloc_t)},
  { 717, 723, sizeof(getmodulehandle_t)},
  { 725, 732, sizeof(getprocaddress_t)},
  { 735, 745, sizeof(getmainargs_t)},
  { 751, 758, sizeof(gethostname_t)},
  { 761, 766, sizeof(free_t)},
  { 767, 775, sizeof(memcpy_t)},
  { 779, 787, sizeof(memset_t)},
  { 791, 797, sizeof(fgetc_t)},
  { 799, 807, sizeof(lseek_t)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_libcall_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_libcall_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_generic_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ctype_b_loc_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_exit_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fscanf_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_read_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fread_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strcmp_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strncmp_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_memcmp_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strchr_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strncpy_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fstat_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fxstat64_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_realloc_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mmap_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qsort_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_bsearch_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_open_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strcpy_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_printf_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_atoi_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_malloc_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_getmodulehandle_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_getprocaddress_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_getmainargs_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_gethostname_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_free_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_memcpy_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_memset_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fgetc_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_lseek_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_exit_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_generic_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fscanf_elem_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fscanf_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ctype_b_loc_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_read_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fread_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strchr_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strncpy_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fstat_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fxstat64_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_realloc_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_mmap_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_qsort_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_bsearch_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_open_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strcpy_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strcmp_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_strncmp_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_memcmp_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_printf_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_atoi_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_malloc_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_getmodulehandle_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_getprocaddress_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_getmainargs_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_gethostname_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_free_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_memcpy_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_memset_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_fgetc_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_lseek_t_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "libcall.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 65);
}

}  // namespace

void TableStruct::Shutdown() {
  _libcall_pol_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _libcall_t_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _generic_pol_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ctype_b_loc_pol_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _exit_pol_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _fscanf_pol_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _read_pol_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _fread_pol_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _strcmp_pol_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _strncmp_pol_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _memcmp_pol_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _strchr_pol_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _strncpy_pol_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _fstat_pol_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _fxstat64_pol_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _realloc_pol_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _mmap_pol_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _qsort_pol_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _bsearch_pol_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _open_pol_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _strcpy_pol_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _printf_pol_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _atoi_pol_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _malloc_pol_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _getmodulehandle_pol_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _getprocaddress_pol_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _getmainargs_pol_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _gethostname_pol_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _free_pol_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _memcpy_pol_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _memset_pol_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _fgetc_pol_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _lseek_pol_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _exit_t_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _generic_t_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _fscanf_elem_t_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _fscanf_t_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _ctype_b_loc_t_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _read_t_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _fread_t_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _strchr_t_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _strncpy_t_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _fstat_t_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _fxstat64_t_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _realloc_t_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _mmap_t_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _qsort_t_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _bsearch_t_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _open_t_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _strcpy_t_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _strcmp_t_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _strncmp_t_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _memcmp_t_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _printf_t_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _atoi_t_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _malloc_t_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _getmodulehandle_t_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _getprocaddress_t_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _getmainargs_t_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _gethostname_t_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _free_t_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _memcpy_t_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _memset_t_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _fgetc_t_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _lseek_t_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::common::protobuf_common_2eproto::InitDefaults();
  _libcall_pol_default_instance_.DefaultConstruct();
  _libcall_t_default_instance_.DefaultConstruct();
  _generic_pol_default_instance_.DefaultConstruct();
  _ctype_b_loc_pol_default_instance_.DefaultConstruct();
  _exit_pol_default_instance_.DefaultConstruct();
  _fscanf_pol_default_instance_.DefaultConstruct();
  _read_pol_default_instance_.DefaultConstruct();
  _fread_pol_default_instance_.DefaultConstruct();
  _strcmp_pol_default_instance_.DefaultConstruct();
  _strncmp_pol_default_instance_.DefaultConstruct();
  _memcmp_pol_default_instance_.DefaultConstruct();
  _strchr_pol_default_instance_.DefaultConstruct();
  _strncpy_pol_default_instance_.DefaultConstruct();
  _fstat_pol_default_instance_.DefaultConstruct();
  _fxstat64_pol_default_instance_.DefaultConstruct();
  _realloc_pol_default_instance_.DefaultConstruct();
  _mmap_pol_default_instance_.DefaultConstruct();
  _qsort_pol_default_instance_.DefaultConstruct();
  _bsearch_pol_default_instance_.DefaultConstruct();
  _open_pol_default_instance_.DefaultConstruct();
  _strcpy_pol_default_instance_.DefaultConstruct();
  _printf_pol_default_instance_.DefaultConstruct();
  _atoi_pol_default_instance_.DefaultConstruct();
  _malloc_pol_default_instance_.DefaultConstruct();
  _getmodulehandle_pol_default_instance_.DefaultConstruct();
  _getprocaddress_pol_default_instance_.DefaultConstruct();
  _getmainargs_pol_default_instance_.DefaultConstruct();
  _gethostname_pol_default_instance_.DefaultConstruct();
  _free_pol_default_instance_.DefaultConstruct();
  _memcpy_pol_default_instance_.DefaultConstruct();
  _memset_pol_default_instance_.DefaultConstruct();
  _fgetc_pol_default_instance_.DefaultConstruct();
  _lseek_pol_default_instance_.DefaultConstruct();
  _exit_t_default_instance_.DefaultConstruct();
  _generic_t_default_instance_.DefaultConstruct();
  _fscanf_elem_t_default_instance_.DefaultConstruct();
  _fscanf_t_default_instance_.DefaultConstruct();
  _ctype_b_loc_t_default_instance_.DefaultConstruct();
  _read_t_default_instance_.DefaultConstruct();
  _fread_t_default_instance_.DefaultConstruct();
  _strchr_t_default_instance_.DefaultConstruct();
  _strncpy_t_default_instance_.DefaultConstruct();
  _fstat_t_default_instance_.DefaultConstruct();
  _fxstat64_t_default_instance_.DefaultConstruct();
  _realloc_t_default_instance_.DefaultConstruct();
  _mmap_t_default_instance_.DefaultConstruct();
  _qsort_t_default_instance_.DefaultConstruct();
  _bsearch_t_default_instance_.DefaultConstruct();
  _open_t_default_instance_.DefaultConstruct();
  _strcpy_t_default_instance_.DefaultConstruct();
  _strcmp_t_default_instance_.DefaultConstruct();
  _strncmp_t_default_instance_.DefaultConstruct();
  _memcmp_t_default_instance_.DefaultConstruct();
  _printf_t_default_instance_.DefaultConstruct();
  _atoi_t_default_instance_.DefaultConstruct();
  _malloc_t_default_instance_.DefaultConstruct();
  _getmodulehandle_t_default_instance_.DefaultConstruct();
  _getprocaddress_t_default_instance_.DefaultConstruct();
  _getmainargs_t_default_instance_.DefaultConstruct();
  _gethostname_t_default_instance_.DefaultConstruct();
  _free_t_default_instance_.DefaultConstruct();
  _memcpy_t_default_instance_.DefaultConstruct();
  _memset_t_default_instance_.DefaultConstruct();
  _fgetc_t_default_instance_.DefaultConstruct();
  _lseek_t_default_instance_.DefaultConstruct();
  _libcall_pol_default_instance_.strcpy_ = const_cast< ::libcall_types::strcpy_pol*>(
      ::libcall_types::strcpy_pol::internal_default_instance());
  _libcall_pol_default_instance_.printf_ = const_cast< ::libcall_types::printf_pol*>(
      ::libcall_types::printf_pol::internal_default_instance());
  _libcall_pol_default_instance_.atoi_ = const_cast< ::libcall_types::atoi_pol*>(
      ::libcall_types::atoi_pol::internal_default_instance());
  _libcall_pol_default_instance_.malloc_ = const_cast< ::libcall_types::malloc_pol*>(
      ::libcall_types::malloc_pol::internal_default_instance());
  _libcall_pol_default_instance_.getmodulehandle_ = const_cast< ::libcall_types::getmodulehandle_pol*>(
      ::libcall_types::getmodulehandle_pol::internal_default_instance());
  _libcall_pol_default_instance_.getprocaddress_ = const_cast< ::libcall_types::getprocaddress_pol*>(
      ::libcall_types::getprocaddress_pol::internal_default_instance());
  _libcall_pol_default_instance_.getmainargs_ = const_cast< ::libcall_types::getmainargs_pol*>(
      ::libcall_types::getmainargs_pol::internal_default_instance());
  _libcall_pol_default_instance_.gethostname_ = const_cast< ::libcall_types::gethostname_pol*>(
      ::libcall_types::gethostname_pol::internal_default_instance());
  _libcall_pol_default_instance_.free_ = const_cast< ::libcall_types::free_pol*>(
      ::libcall_types::free_pol::internal_default_instance());
  _libcall_pol_default_instance_.memcpy_ = const_cast< ::libcall_types::memcpy_pol*>(
      ::libcall_types::memcpy_pol::internal_default_instance());
  _libcall_pol_default_instance_.memset_ = const_cast< ::libcall_types::memset_pol*>(
      ::libcall_types::memset_pol::internal_default_instance());
  _libcall_pol_default_instance_.fgetc_ = const_cast< ::libcall_types::fgetc_pol*>(
      ::libcall_types::fgetc_pol::internal_default_instance());
  _libcall_pol_default_instance_.read_ = const_cast< ::libcall_types::read_pol*>(
      ::libcall_types::read_pol::internal_default_instance());
  _libcall_pol_default_instance_.strchr_ = const_cast< ::libcall_types::strchr_pol*>(
      ::libcall_types::strchr_pol::internal_default_instance());
  _libcall_pol_default_instance_.exit_ = const_cast< ::libcall_types::exit_pol*>(
      ::libcall_types::exit_pol::internal_default_instance());
  _libcall_pol_default_instance_.strcmp_ = const_cast< ::libcall_types::strcmp_pol*>(
      ::libcall_types::strcmp_pol::internal_default_instance());
  _libcall_pol_default_instance_.ctype_b_loc_ = const_cast< ::libcall_types::ctype_b_loc_pol*>(
      ::libcall_types::ctype_b_loc_pol::internal_default_instance());
  _libcall_pol_default_instance_.fscanf_ = const_cast< ::libcall_types::fscanf_pol*>(
      ::libcall_types::fscanf_pol::internal_default_instance());
  _libcall_pol_default_instance_.strncpy_ = const_cast< ::libcall_types::strncpy_pol*>(
      ::libcall_types::strncpy_pol::internal_default_instance());
  _libcall_pol_default_instance_.fstat_ = const_cast< ::libcall_types::fstat_pol*>(
      ::libcall_types::fstat_pol::internal_default_instance());
  _libcall_pol_default_instance_.realloc_ = const_cast< ::libcall_types::realloc_pol*>(
      ::libcall_types::realloc_pol::internal_default_instance());
  _libcall_pol_default_instance_.mmap_ = const_cast< ::libcall_types::mmap_pol*>(
      ::libcall_types::mmap_pol::internal_default_instance());
  _libcall_pol_default_instance_.qsort_ = const_cast< ::libcall_types::qsort_pol*>(
      ::libcall_types::qsort_pol::internal_default_instance());
  _libcall_pol_default_instance_.bsearch_ = const_cast< ::libcall_types::bsearch_pol*>(
      ::libcall_types::bsearch_pol::internal_default_instance());
  _libcall_pol_default_instance_.open_stub_ = const_cast< ::libcall_types::open_pol*>(
      ::libcall_types::open_pol::internal_default_instance());
  _libcall_pol_default_instance_.lseek_ = const_cast< ::libcall_types::lseek_pol*>(
      ::libcall_types::lseek_pol::internal_default_instance());
  _libcall_pol_default_instance_.fread_ = const_cast< ::libcall_types::fread_pol*>(
      ::libcall_types::fread_pol::internal_default_instance());
  _libcall_pol_default_instance_.strncmp_ = const_cast< ::libcall_types::strncmp_pol*>(
      ::libcall_types::strncmp_pol::internal_default_instance());
  _libcall_pol_default_instance_.memcmp_ = const_cast< ::libcall_types::memcmp_pol*>(
      ::libcall_types::memcmp_pol::internal_default_instance());
  _libcall_pol_default_instance_.fxstat64_ = const_cast< ::libcall_types::fxstat64_pol*>(
      ::libcall_types::fxstat64_pol::internal_default_instance());
  _libcall_pol_default_instance_.generic_ = const_cast< ::libcall_types::generic_pol*>(
      ::libcall_types::generic_pol::internal_default_instance());
  _libcall_t_default_instance_.strcpy_ = const_cast< ::libcall_types::strcpy_t*>(
      ::libcall_types::strcpy_t::internal_default_instance());
  _libcall_t_default_instance_.printf_ = const_cast< ::libcall_types::printf_t*>(
      ::libcall_types::printf_t::internal_default_instance());
  _libcall_t_default_instance_.atoi_ = const_cast< ::libcall_types::atoi_t*>(
      ::libcall_types::atoi_t::internal_default_instance());
  _libcall_t_default_instance_.malloc_ = const_cast< ::libcall_types::malloc_t*>(
      ::libcall_types::malloc_t::internal_default_instance());
  _libcall_t_default_instance_.getmodulehandle_ = const_cast< ::libcall_types::getmodulehandle_t*>(
      ::libcall_types::getmodulehandle_t::internal_default_instance());
  _libcall_t_default_instance_.getprocaddress_ = const_cast< ::libcall_types::getprocaddress_t*>(
      ::libcall_types::getprocaddress_t::internal_default_instance());
  _libcall_t_default_instance_.getmainargs_ = const_cast< ::libcall_types::getmainargs_t*>(
      ::libcall_types::getmainargs_t::internal_default_instance());
  _libcall_t_default_instance_.gethostname_ = const_cast< ::libcall_types::gethostname_t*>(
      ::libcall_types::gethostname_t::internal_default_instance());
  _libcall_t_default_instance_.free_ = const_cast< ::libcall_types::free_t*>(
      ::libcall_types::free_t::internal_default_instance());
  _libcall_t_default_instance_.memcpy_ = const_cast< ::libcall_types::memcpy_t*>(
      ::libcall_types::memcpy_t::internal_default_instance());
  _libcall_t_default_instance_.memset_ = const_cast< ::libcall_types::memset_t*>(
      ::libcall_types::memset_t::internal_default_instance());
  _libcall_t_default_instance_.fgetc_ = const_cast< ::libcall_types::fgetc_t*>(
      ::libcall_types::fgetc_t::internal_default_instance());
  _libcall_t_default_instance_.generic_ = const_cast< ::libcall_types::generic_t*>(
      ::libcall_types::generic_t::internal_default_instance());
  _libcall_t_default_instance_.read_ = const_cast< ::libcall_types::read_t*>(
      ::libcall_types::read_t::internal_default_instance());
  _libcall_t_default_instance_.strchr_ = const_cast< ::libcall_types::strchr_t*>(
      ::libcall_types::strchr_t::internal_default_instance());
  _libcall_t_default_instance_.exit_ = const_cast< ::libcall_types::exit_t*>(
      ::libcall_types::exit_t::internal_default_instance());
  _libcall_t_default_instance_.strcmp_ = const_cast< ::libcall_types::strcmp_t*>(
      ::libcall_types::strcmp_t::internal_default_instance());
  _libcall_t_default_instance_.ctype_b_loc_ = const_cast< ::libcall_types::ctype_b_loc_t*>(
      ::libcall_types::ctype_b_loc_t::internal_default_instance());
  _libcall_t_default_instance_.fscanf_ = const_cast< ::libcall_types::fscanf_t*>(
      ::libcall_types::fscanf_t::internal_default_instance());
  _libcall_t_default_instance_.strncpy_ = const_cast< ::libcall_types::strncpy_t*>(
      ::libcall_types::strncpy_t::internal_default_instance());
  _libcall_t_default_instance_.fstat_ = const_cast< ::libcall_types::fstat_t*>(
      ::libcall_types::fstat_t::internal_default_instance());
  _libcall_t_default_instance_.realloc_ = const_cast< ::libcall_types::realloc_t*>(
      ::libcall_types::realloc_t::internal_default_instance());
  _libcall_t_default_instance_.mmap_ = const_cast< ::libcall_types::mmap_t*>(
      ::libcall_types::mmap_t::internal_default_instance());
  _libcall_t_default_instance_.qsort_ = const_cast< ::libcall_types::qsort_t*>(
      ::libcall_types::qsort_t::internal_default_instance());
  _libcall_t_default_instance_.bsearch_ = const_cast< ::libcall_types::bsearch_t*>(
      ::libcall_types::bsearch_t::internal_default_instance());
  _libcall_t_default_instance_.open_stub_ = const_cast< ::libcall_types::open_t*>(
      ::libcall_types::open_t::internal_default_instance());
  _libcall_t_default_instance_.lseek_ = const_cast< ::libcall_types::lseek_t*>(
      ::libcall_types::lseek_t::internal_default_instance());
  _libcall_t_default_instance_.fread_ = const_cast< ::libcall_types::fread_t*>(
      ::libcall_types::fread_t::internal_default_instance());
  _libcall_t_default_instance_.strncmp_ = const_cast< ::libcall_types::strncmp_t*>(
      ::libcall_types::strncmp_t::internal_default_instance());
  _libcall_t_default_instance_.memcmp_ = const_cast< ::libcall_types::memcmp_t*>(
      ::libcall_types::memcmp_t::internal_default_instance());
  _libcall_t_default_instance_.fxstat64_ = const_cast< ::libcall_types::fxstat64_t*>(
      ::libcall_types::fxstat64_t::internal_default_instance());
  _ctype_b_loc_pol_default_instance_.get_mutable()->table_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _read_pol_default_instance_.get_mutable()->buf_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _fread_pol_default_instance_.get_mutable()->ptr_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _strcmp_pol_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _strcmp_pol_default_instance_.get_mutable()->dst_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _strchr_pol_default_instance_.get_mutable()->sc_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _strchr_pol_default_instance_.get_mutable()->c_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _mmap_pol_default_instance_.get_mutable()->ret_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _qsort_pol_default_instance_.get_mutable()->base_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _bsearch_pol_default_instance_.get_mutable()->key_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _bsearch_pol_default_instance_.get_mutable()->base_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _bsearch_pol_default_instance_.get_mutable()->ret_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _open_pol_default_instance_.get_mutable()->pathname_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _strcpy_pol_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _strcpy_pol_default_instance_.get_mutable()->dst_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _printf_pol_default_instance_.get_mutable()->format_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _atoi_pol_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _getmodulehandle_pol_default_instance_.get_mutable()->module_name_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _getprocaddress_pol_default_instance_.get_mutable()->proc_name_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _getmainargs_pol_default_instance_.get_mutable()->argc_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _getmainargs_pol_default_instance_.get_mutable()->argv_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _getmainargs_pol_default_instance_.get_mutable()->env_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _getmainargs_pol_default_instance_.get_mutable()->startinfo_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _gethostname_pol_default_instance_.get_mutable()->name_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _memcpy_pol_default_instance_.get_mutable()->dest_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _memcpy_pol_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _memset_pol_default_instance_.get_mutable()->s_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  _fscanf_elem_t_default_instance_.value_dec_ = GOOGLE_ULONGLONG(0);
  _fscanf_elem_t_default_instance_.value_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ctype_b_loc_t_default_instance_.get_mutable()->table_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _read_t_default_instance_.get_mutable()->buf_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _fread_t_default_instance_.get_mutable()->ptr_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _fstat_t_default_instance_.get_mutable()->buf_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _fxstat64_t_default_instance_.get_mutable()->buf_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _mmap_t_default_instance_.get_mutable()->ret_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _qsort_t_default_instance_.get_mutable()->base_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _bsearch_t_default_instance_.get_mutable()->key_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _bsearch_t_default_instance_.get_mutable()->base_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _bsearch_t_default_instance_.get_mutable()->ret_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _open_t_default_instance_.get_mutable()->pathname_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _strcpy_t_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _strcpy_t_default_instance_.get_mutable()->dst_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _printf_t_default_instance_.get_mutable()->format_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _atoi_t_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _getmodulehandle_t_default_instance_.get_mutable()->module_name_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _getprocaddress_t_default_instance_.get_mutable()->proc_name_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _getmainargs_t_default_instance_.get_mutable()->argc_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _getmainargs_t_default_instance_.get_mutable()->argv_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _getmainargs_t_default_instance_.get_mutable()->env_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _getmainargs_t_default_instance_.get_mutable()->startinfo_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _gethostname_t_default_instance_.get_mutable()->name_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _memcpy_t_default_instance_.get_mutable()->dest_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _memcpy_t_default_instance_.get_mutable()->src_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _memset_t_default_instance_.get_mutable()->s_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rlibcall.proto\022\rlibcall_types\032\014common.p"
      "roto\"\312\014\n\013libcall_pol\022\014\n\004name\030\001 \002(\t\0220\n\005id"
      "ent\030\002 \001(\0162\030.libcall_types.lib_ident:\007GEN"
      "ERIC\022,\n\006action\030\003 \001(\0162\026.common.tracing_ac"
      "tion:\004SKIP\022\032\n\022restrict_addresses\030\004 \003(\004\022+"
      "\n\006strcpy\030\005 \001(\0132\031.libcall_types.strcpy_po"
      "lH\000\022+\n\006printf\030\006 \001(\0132\031.libcall_types.prin"
      "tf_polH\000\022\'\n\004atoi\030\007 \001(\0132\027.libcall_types.a"
      "toi_polH\000\022+\n\006malloc\030\010 \001(\0132\031.libcall_type"
      "s.malloc_polH\000\022=\n\017getmodulehandle\030\t \001(\0132"
      "\".libcall_types.getmodulehandle_polH\000\022;\n"
      "\016getprocaddress\030\n \001(\0132!.libcall_types.ge"
      "tprocaddress_polH\000\0225\n\013getmainargs\030\013 \001(\0132"
      "\036.libcall_types.getmainargs_polH\000\0225\n\013get"
      "hostname\030\014 \001(\0132\036.libcall_types.gethostna"
      "me_polH\000\022\'\n\004free\030\r \001(\0132\027.libcall_types.f"
      "ree_polH\000\022+\n\006memcpy\030\016 \001(\0132\031.libcall_type"
      "s.memcpy_polH\000\022+\n\006memset\030\017 \001(\0132\031.libcall"
      "_types.memset_polH\000\022)\n\005fgetc\030\020 \001(\0132\030.lib"
      "call_types.fgetc_polH\000\022\'\n\004read\030\021 \001(\0132\027.l"
      "ibcall_types.read_polH\000\022+\n\006strchr\030\022 \001(\0132"
      "\031.libcall_types.strchr_polH\000\022\'\n\004exit\030\023 \001"
      "(\0132\027.libcall_types.exit_polH\000\022+\n\006strcmp\030"
      "\024 \001(\0132\031.libcall_types.strcmp_polH\000\0225\n\013ct"
      "ype_b_loc\030\026 \001(\0132\036.libcall_types.ctype_b_"
      "loc_polH\000\022+\n\006fscanf\030\027 \001(\0132\031.libcall_type"
      "s.fscanf_polH\000\022-\n\007strncpy\030\030 \001(\0132\032.libcal"
      "l_types.strncpy_polH\000\022)\n\005fstat\030\031 \001(\0132\030.l"
      "ibcall_types.fstat_polH\000\022-\n\007realloc\030\032 \001("
      "\0132\032.libcall_types.realloc_polH\000\022\'\n\004mmap\030"
      "\033 \001(\0132\027.libcall_types.mmap_polH\000\022)\n\005qsor"
      "t\030\034 \001(\0132\030.libcall_types.qsort_polH\000\022-\n\007b"
      "search\030\035 \001(\0132\032.libcall_types.bsearch_pol"
      "H\000\022,\n\topen_stub\030\036 \001(\0132\027.libcall_types.op"
      "en_polH\000\022)\n\005lseek\030\037 \001(\0132\030.libcall_types."
      "lseek_polH\000\022)\n\005fread\030  \001(\0132\030.libcall_typ"
      "es.fread_polH\000\022-\n\007strncmp\030! \001(\0132\032.libcal"
      "l_types.strncmp_polH\000\022+\n\006memcmp\030\" \001(\0132\031."
      "libcall_types.memcmp_polH\000\022/\n\010fxstat64\030#"
      " \001(\0132\033.libcall_types.fxstat64_polH\000\022-\n\007g"
      "eneric\0302 \001(\0132\032.libcall_types.generic_pol"
      "H\000B\r\n\013libcall_cnt\"\342\013\n\tlibcall_t\022\021\n\tfunc_"
      "addr\030\001 \002(\004\022\021\n\tfunc_name\030\002 \002(\t\022\021\n\tis_trac"
      "ed\030\003 \002(\010\022\'\n\005ident\030\004 \002(\0162\030.libcall_types."
      "lib_ident\022)\n\006strcpy\030\005 \001(\0132\027.libcall_type"
      "s.strcpy_tH\000\022)\n\006printf\030\006 \001(\0132\027.libcall_t"
      "ypes.printf_tH\000\022%\n\004atoi\030\007 \001(\0132\025.libcall_"
      "types.atoi_tH\000\022)\n\006malloc\030\010 \001(\0132\027.libcall"
      "_types.malloc_tH\000\022;\n\017getmodulehandle\030\t \001"
      "(\0132 .libcall_types.getmodulehandle_tH\000\0229"
      "\n\016getprocaddress\030\n \001(\0132\037.libcall_types.g"
      "etprocaddress_tH\000\0223\n\013getmainargs\030\013 \001(\0132\034"
      ".libcall_types.getmainargs_tH\000\0223\n\013gethos"
      "tname\030\014 \001(\0132\034.libcall_types.gethostname_"
      "tH\000\022%\n\004free\030\r \001(\0132\025.libcall_types.free_t"
      "H\000\022)\n\006memcpy\030\016 \001(\0132\027.libcall_types.memcp"
      "y_tH\000\022)\n\006memset\030\017 \001(\0132\027.libcall_types.me"
      "mset_tH\000\022\'\n\005fgetc\030\020 \001(\0132\026.libcall_types."
      "fgetc_tH\000\022+\n\007generic\030\021 \001(\0132\030.libcall_typ"
      "es.generic_tH\000\022%\n\004read\030\022 \001(\0132\025.libcall_t"
      "ypes.read_tH\000\022)\n\006strchr\030\023 \001(\0132\027.libcall_"
      "types.strchr_tH\000\022%\n\004exit\030\024 \001(\0132\025.libcall"
      "_types.exit_tH\000\022)\n\006strcmp\030\025 \001(\0132\027.libcal"
      "l_types.strcmp_tH\000\0223\n\013ctype_b_loc\030\027 \001(\0132"
      "\034.libcall_types.ctype_b_loc_tH\000\022)\n\006fscan"
      "f\030\030 \001(\0132\027.libcall_types.fscanf_tH\000\022+\n\007st"
      "rncpy\030\031 \001(\0132\030.libcall_types.strncpy_tH\000\022"
      "\'\n\005fstat\030\032 \001(\0132\026.libcall_types.fstat_tH\000"
      "\022+\n\007realloc\030\033 \001(\0132\030.libcall_types.reallo"
      "c_tH\000\022%\n\004mmap\030\034 \001(\0132\025.libcall_types.mmap"
      "_tH\000\022\'\n\005qsort\030\035 \001(\0132\026.libcall_types.qsor"
      "t_tH\000\022+\n\007bsearch\030\036 \001(\0132\030.libcall_types.b"
      "search_tH\000\022*\n\topen_stub\030\037 \001(\0132\025.libcall_"
      "types.open_tH\000\022\'\n\005lseek\030  \001(\0132\026.libcall_"
      "types.lseek_tH\000\022\'\n\005fread\030! \001(\0132\026.libcall"
      "_types.fread_tH\000\022+\n\007strncmp\030\" \001(\0132\030.libc"
      "all_types.strncmp_tH\000\022)\n\006memcmp\030# \001(\0132\027."
      "libcall_types.memcmp_tH\000\022-\n\010fxstat64\030$ \001"
      "(\0132\031.libcall_types.fxstat64_tH\000B\r\n\013libca"
      "ll_cnt\"*\n\013generic_pol\022\033\n\003ret\030\001 \002(\0162\016.com"
      "mon.action\"Q\n\017ctype_b_loc_pol\022!\n\005table\030\001"
      " \002(\0132\022.common.memory_pol\022\033\n\003ret\030\002 \002(\0162\016."
      "common.action\"\n\n\010exit_pol\"h\n\nfscanf_pol\022"
      "\036\n\006stream\030\001 \002(\0162\016.common.action\022\035\n\005elems"
      "\030\002 \002(\0162\016.common.action\022\033\n\003ret\030\003 \002(\0162\016.co"
      "mmon.action\"\203\001\n\010read_pol\022\032\n\002fd\030\001 \002(\0162\016.c"
      "ommon.action\022\037\n\003buf\030\002 \002(\0132\022.common.memor"
      "y_pol\022\035\n\005count\030\003 \002(\0162\016.common.action\022\033\n\003"
      "ret\030\004 \002(\0162\016.common.action\"\246\001\n\tfread_pol\022"
      "\037\n\003ptr\030\001 \002(\0132\022.common.memory_pol\022\034\n\004size"
      "\030\002 \002(\0162\016.common.action\022\035\n\005nmemb\030\003 \002(\0162\016."
      "common.action\022\036\n\006stream\030\004 \002(\0162\016.common.a"
      "ction\022\033\n\003ret\030\005 \002(\0162\016.common.action\"k\n\nst"
      "rcmp_pol\022\037\n\003src\030\001 \002(\0132\022.common.memory_po"
      "l\022\037\n\003dst\030\002 \002(\0132\022.common.memory_pol\022\033\n\003re"
      "t\030\003 \002(\0162\016.common.action\"}\n\013strncmp_pol\022\032"
      "\n\002s1\030\001 \002(\0162\016.common.action\022\032\n\002s2\030\002 \002(\0162\016"
      ".common.action\022\031\n\001n\030\003 \002(\0162\016.common.actio"
      "n\022\033\n\003ret\030\004 \002(\0162\016.common.action\"|\n\nmemcmp"
      "_pol\022\032\n\002s1\030\001 \002(\0162\016.common.action\022\032\n\002s2\030\002"
      " \002(\0162\016.common.action\022\031\n\001n\030\003 \002(\0162\016.common"
      ".action\022\033\n\003ret\030\004 \002(\0162\016.common.action\"h\n\n"
      "strchr_pol\022\036\n\002sc\030\001 \002(\0132\022.common.memory_p"
      "ol\022\035\n\001c\030\002 \002(\0132\022.common.memory_pol\022\033\n\003ret"
      "\030\003 \002(\0162\016.common.action\"\177\n\013strncpy_pol\022\033\n"
      "\003dst\030\001 \002(\0162\016.common.action\022\033\n\003src\030\002 \002(\0162"
      "\016.common.action\022\031\n\001n\030\003 \002(\0162\016.common.acti"
      "on\022\033\n\003ret\030\004 \002(\0162\016.common.action\"\013\n\tfstat"
      "_pol\"\016\n\014fxstat64_pol\"e\n\013realloc_pol\022\033\n\003p"
      "tr\030\001 \002(\0162\016.common.action\022\034\n\004size\030\002 \002(\0162\016"
      ".common.action\022\033\n\003ret\030\003 \002(\0162\016.common.act"
      "ion\"\342\001\n\010mmap_pol\022\034\n\004addr\030\001 \002(\0162\016.common."
      "action\022\036\n\006length\030\002 \002(\0162\016.common.action\022\034"
      "\n\004prot\030\003 \002(\0162\016.common.action\022\035\n\005flags\030\004 "
      "\002(\0162\016.common.action\022\032\n\002fd\030\005 \002(\0162\016.common"
      ".action\022\036\n\006offset\030\006 \002(\0162\016.common.action\022"
      "\037\n\003ret\030\007 \002(\0132\022.common.memory_pol\"\213\001\n\tqso"
      "rt_pol\022 \n\004base\030\001 \002(\0132\022.common.memory_pol"
      "\022\035\n\005nmemb\030\002 \002(\0162\016.common.action\022\034\n\004size\030"
      "\003 \002(\0162\016.common.action\022\037\n\007compare\030\004 \002(\0162\016"
      ".common.action\"\317\001\n\013bsearch_pol\022\037\n\003key\030\001 "
      "\002(\0132\022.common.memory_pol\022 \n\004base\030\002 \002(\0132\022."
      "common.memory_pol\022\035\n\005nmemb\030\003 \002(\0162\016.commo"
      "n.action\022\034\n\004size\030\004 \002(\0162\016.common.action\022\037"
      "\n\007compare\030\005 \002(\0162\016.common.action\022\037\n\003ret\030\006"
      " \002(\0132\022.common.memory_pol\"\212\001\n\010open_pol\022$\n"
      "\010pathname\030\001 \002(\0132\022.common.memory_pol\022\035\n\005f"
      "lags\030\002 \002(\0162\016.common.action\022\034\n\004mode\030\003 \002(\016"
      "2\016.common.action\022\033\n\003ret\030\004 \002(\0162\016.common.a"
      "ction\"k\n\nstrcpy_pol\022\037\n\003src\030\001 \002(\0132\022.commo"
      "n.memory_pol\022\037\n\003dst\030\002 \002(\0132\022.common.memor"
      "y_pol\022\033\n\003ret\030\003 \002(\0162\016.common.action\"M\n\npr"
      "intf_pol\022\"\n\006format\030\001 \002(\0132\022.common.memory"
      "_pol\022\033\n\003ret\030\002 \002(\0162\016.common.action\"H\n\010ato"
      "i_pol\022\037\n\003src\030\001 \002(\0132\022.common.memory_pol\022\033"
      "\n\003ret\030\003 \002(\0162\016.common.action\"G\n\nmalloc_po"
      "l\022\034\n\004size\030\001 \002(\0162\016.common.action\022\033\n\003ret\030\002"
      " \002(\0162\016.common.action\"[\n\023getmodulehandle_"
      "pol\022\'\n\013module_name\030\001 \002(\0132\022.common.memory"
      "_pol\022\033\n\003ret\030\002 \002(\0162\016.common.action\"y\n\022get"
      "procaddress_pol\022\037\n\007hmodule\030\001 \002(\0162\016.commo"
      "n.action\022%\n\tproc_name\030\002 \002(\0132\022.common.mem"
      "ory_pol\022\033\n\003ret\030\003 \002(\0162\016.common.action\"\336\001\n"
      "\017getmainargs_pol\022 \n\004argc\030\001 \002(\0132\022.common."
      "memory_pol\022 \n\004argv\030\002 \002(\0132\022.common.memory"
      "_pol\022\037\n\003env\030\003 \002(\0132\022.common.memory_pol\022\"\n"
      "\ndowildcard\030\004 \002(\0162\016.common.action\022%\n\tsta"
      "rtinfo\030\005 \002(\0132\022.common.memory_pol\022\033\n\003ret\030"
      "\006 \002(\0162\016.common.action\"q\n\017gethostname_pol"
      "\022 \n\004name\030\001 \002(\0132\022.common.memory_pol\022\037\n\007na"
      "melen\030\002 \002(\0162\016.common.action\022\033\n\003ret\030\003 \002(\016"
      "2\016.common.action\"\'\n\010free_pol\022\033\n\003ptr\030\001 \002("
      "\0162\016.common.action\"\212\001\n\nmemcpy_pol\022 \n\004dest"
      "\030\001 \002(\0132\022.common.memory_pol\022\037\n\003src\030\002 \002(\0132"
      "\022.common.memory_pol\022\034\n\004size\030\003 \002(\0162\016.comm"
      "on.action\022\033\n\003ret\030\004 \002(\0162\016.common.action\"\201"
      "\001\n\nmemset_pol\022\035\n\001s\030\001 \002(\0132\022.common.memory"
      "_pol\022\031\n\001c\030\002 \002(\0162\016.common.action\022\034\n\004size\030"
      "\003 \002(\0162\016.common.action\022\033\n\003ret\030\004 \002(\0162\016.com"
      "mon.action\"H\n\tfgetc_pol\022\036\n\006stream\030\001 \002(\0162"
      "\016.common.action\022\033\n\003ret\030\002 \002(\0162\016.common.ac"
      "tion\"\204\001\n\tlseek_pol\022\032\n\002fd\030\001 \002(\0162\016.common."
      "action\022\036\n\006offset\030\002 \002(\0162\016.common.action\022\036"
      "\n\006whence\030\003 \002(\0162\016.common.action\022\033\n\003ret\030\004 "
      "\002(\0162\016.common.action\"\010\n\006exit_t\"\030\n\tgeneric"
      "_t\022\013\n\003ret\030\001 \002(\004\"\202\001\n\rfscanf_elem_t\022(\n\004typ"
      "e\030\001 \002(\0162\032.libcall_types.fscanf_enum\022\014\n\004a"
      "ddr\030\002 \002(\004\022\023\n\tvalue_dec\030\003 \001(\004H\000\022\026\n\014value_"
      "string\030\004 \001(\tH\000B\014\n\nfscanf_cnt\"T\n\010fscanf_t"
      "\022\016\n\006stream\030\001 \002(\004\022+\n\005elems\030\002 \003(\0132\034.libcal"
      "l_types.fscanf_elem_t\022\013\n\003ret\030\003 \002(\004\"=\n\rct"
      "ype_b_loc_t\022\037\n\005table\030\001 \002(\0132\020.common.memo"
      "ry_t\022\013\n\003ret\030\002 \002(\004\"O\n\006read_t\022\n\n\002fd\030\001 \002(\004\022"
      "\035\n\003buf\030\002 \002(\0132\020.common.memory_t\022\r\n\005count\030"
      "\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"b\n\007fread_t\022\035\n\003ptr\030\001 \002"
      "(\0132\020.common.memory_t\022\014\n\004size\030\002 \002(\004\022\r\n\005nm"
      "emb\030\003 \002(\004\022\016\n\006stream\030\004 \002(\004\022\013\n\003ret\030\005 \002(\004\"\?"
      "\n\010strchr_t\022\t\n\001s\030\001 \002(\004\022\t\n\001c\030\002 \002(\004\022\020\n\010size"
      "_max\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"=\n\tstrncpy_t\022\013\n\003"
      "dst\030\001 \002(\004\022\013\n\003src\030\002 \002(\004\022\t\n\001n\030\003 \002(\004\022\013\n\003ret"
      "\030\004 \002(\004\"A\n\007fstat_t\022\n\n\002fd\030\001 \002(\004\022\035\n\003buf\030\002 \002"
      "(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002(\004\"R\n\nfxs"
      "tat64_t\022\014\n\004vers\030\001 \002(\004\022\n\n\002fd\030\002 \002(\004\022\035\n\003buf"
      "\030\003 \002(\0132\020.common.memory_t\022\013\n\003ret\030\004 \002(\004\"3\n"
      "\trealloc_t\022\013\n\003ptr\030\001 \002(\004\022\014\n\004size\030\002 \002(\004\022\013\n"
      "\003ret\030\003 \002(\004\"~\n\006mmap_t\022\014\n\004addr\030\001 \002(\004\022\016\n\006le"
      "ngth\030\002 \002(\004\022\014\n\004prot\030\003 \002(\004\022\r\n\005flags\030\004 \002(\004\022"
      "\n\n\002fd\030\005 \002(\004\022\016\n\006offset\030\006 \002(\004\022\035\n\003ret\030\007 \002(\013"
      "2\020.common.memory_t\"W\n\007qsort_t\022\036\n\004base\030\001 "
      "\002(\0132\020.common.memory_t\022\r\n\005nmemb\030\002 \002(\004\022\014\n\004"
      "size\030\003 \002(\004\022\017\n\007compare\030\004 \002(\004\"\227\001\n\tbsearch_"
      "t\022\035\n\003key\030\001 \002(\0132\020.common.memory_t\022\036\n\004base"
      "\030\002 \002(\0132\020.common.memory_t\022\r\n\005nmemb\030\003 \002(\004\022"
      "\014\n\004size\030\004 \002(\004\022\017\n\007compare\030\005 \002(\004\022\035\n\003ret\030\006 "
      "\002(\0132\020.common.memory_t\"V\n\006open_t\022\"\n\010pathn"
      "ame\030\001 \002(\0132\020.common.memory_t\022\r\n\005flags\030\003 \002"
      "(\004\022\014\n\004mode\030\004 \002(\004\022\013\n\003ret\030\005 \002(\004\"U\n\010strcpy_"
      "t\022\035\n\003src\030\001 \002(\0132\020.common.memory_t\022\035\n\003dst\030"
      "\002 \002(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002(\004\"Y\n\010"
      "strcmp_t\022\n\n\002s1\030\001 \002(\004\022\n\n\002s2\030\002 \002(\004\022\023\n\013size"
      "_max_s1\030\003 \002(\004\022\023\n\013size_max_s2\030\004 \002(\004\022\013\n\003re"
      "t\030\005 \002(\004\";\n\tstrncmp_t\022\n\n\002s1\030\001 \002(\004\022\n\n\002s2\030\002"
      " \002(\004\022\t\n\001n\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\":\n\010memcmp_t"
      "\022\n\n\002s1\030\001 \002(\004\022\n\n\002s2\030\002 \002(\004\022\t\n\001n\030\003 \002(\004\022\013\n\003r"
      "et\030\004 \002(\004\"9\n\010printf_t\022 \n\006format\030\001 \002(\0132\020.c"
      "ommon.memory_t\022\013\n\003ret\030\002 \002(\004\"4\n\006atoi_t\022\035\n"
      "\003src\030\001 \002(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002("
      "\004\"%\n\010malloc_t\022\014\n\004size\030\001 \002(\004\022\013\n\003ret\030\002 \002(\004"
      "\"G\n\021getmodulehandle_t\022%\n\013module_name\030\001 \002"
      "(\0132\020.common.memory_t\022\013\n\003ret\030\002 \002(\004\"U\n\020get"
      "procaddress_t\022\017\n\007hmodule\030\001 \002(\004\022#\n\tproc_n"
      "ame\030\002 \002(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002(\004"
      "\"\264\001\n\rgetmainargs_t\022\036\n\004argc\030\001 \002(\0132\020.commo"
      "n.memory_t\022\036\n\004argv\030\002 \002(\0132\020.common.memory"
      "_t\022\035\n\003env\030\003 \002(\0132\020.common.memory_t\022\022\n\ndow"
      "ildcard\030\004 \002(\004\022#\n\tstartinfo\030\005 \002(\0132\020.commo"
      "n.memory_t\022\013\n\003ret\030\006 \002(\004\"M\n\rgethostname_t"
      "\022\036\n\004name\030\001 \002(\0132\020.common.memory_t\022\017\n\007name"
      "len\030\002 \002(\004\022\013\n\003ret\030\003 \002(\004\"\025\n\006free_t\022\013\n\003ptr\030"
      "\001 \002(\004\"d\n\010memcpy_t\022\036\n\004dest\030\001 \002(\0132\020.common"
      ".memory_t\022\035\n\003src\030\002 \002(\0132\020.common.memory_t"
      "\022\014\n\004size\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"M\n\010memset_t\022"
      "\033\n\001s\030\001 \002(\0132\020.common.memory_t\022\t\n\001c\030\002 \002(\004\022"
      "\014\n\004size\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"&\n\007fgetc_t\022\016\n"
      "\006stream\030\001 \002(\004\022\013\n\003ret\030\002 \002(\004\"B\n\007lseek_t\022\n\n"
      "\002fd\030\001 \002(\004\022\016\n\006offset\030\002 \002(\004\022\016\n\006whence\030\003 \002("
      "\004\022\013\n\003ret\030\004 \002(\004*\265\003\n\tlib_ident\022\013\n\007INVALID\020"
      "\000\022\n\n\006PRINTF\020\001\022\n\n\006STRCPY\020\002\022\010\n\004ATOI\020\003\022\n\n\006M"
      "ALLOC\020\004\022\010\n\004FREE\020\005\022\n\n\006MEMCPY\020\006\022\n\n\006MEMSET\020"
      "\007\022\t\n\005FGETC\020\010\022\010\n\004READ\020\t\022\n\n\006STRCHR\020\n\022\010\n\004EX"
      "IT\020\013\022\n\n\006STRCMP\020\014\022\017\n\013CTYPE_B_LOC\020\r\022\n\n\006FSC"
      "ANF\020\016\022\013\n\007STRRCHR\020\017\022\013\n\007STRNCPY\020\020\022\t\n\005FSTAT"
      "\020\021\022\013\n\007REALLOC\020\022\022\010\n\004MMAP\020\023\022\t\n\005QSORT\020\024\022\013\n\007"
      "BSEARCH\020\025\022\r\n\tOPEN_STUB\020\026\022\t\n\005LSEEK\020\027\022\t\n\005F"
      "READ\020\030\022\013\n\007STRNCMP\020\031\022\n\n\006MEMCMP\020\032\022\014\n\010FXSTA"
      "T64\020\033\022\023\n\017GETMODULEHANDLE\020d\022\022\n\016GETPROCADD"
      "RESS\020e\022\017\n\013GETMAINARGS\020f\022\017\n\013GETHOSTNAME\020g"
      "\022\014\n\007GENERIC\020\377\001*\210\001\n\013fscanf_enum\022\005\n\001d\020\000\022\006\n"
      "\002dd\020\001\022\005\n\001i\020\002\022\005\n\001o\020\003\022\005\n\001u\020\004\022\005\n\001x\020\005\022\006\n\002xx\020"
      "\006\022\005\n\001f\020\007\022\005\n\001e\020\010\022\005\n\001g\020\t\022\006\n\002ee\020\n\022\005\n\001a\020\013\022\005\n"
      "\001s\020\014\022\005\n\001c\020\r\022\006\n\002sb\020\016\022\005\n\001p\020\017\022\005\n\001n\020\020"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "libcall.proto", &protobuf_RegisterTypes);
  ::common::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_libcall_2eproto

const ::google::protobuf::EnumDescriptor* lib_ident_descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_enum_descriptors[0];
}
bool lib_ident_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 100:
    case 101:
    case 102:
    case 103:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* fscanf_enum_descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_enum_descriptors[1];
}
bool fscanf_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int libcall_pol::kNameFieldNumber;
const int libcall_pol::kIdentFieldNumber;
const int libcall_pol::kActionFieldNumber;
const int libcall_pol::kRestrictAddressesFieldNumber;
const int libcall_pol::kStrcpyFieldNumber;
const int libcall_pol::kPrintfFieldNumber;
const int libcall_pol::kAtoiFieldNumber;
const int libcall_pol::kMallocFieldNumber;
const int libcall_pol::kGetmodulehandleFieldNumber;
const int libcall_pol::kGetprocaddressFieldNumber;
const int libcall_pol::kGetmainargsFieldNumber;
const int libcall_pol::kGethostnameFieldNumber;
const int libcall_pol::kFreeFieldNumber;
const int libcall_pol::kMemcpyFieldNumber;
const int libcall_pol::kMemsetFieldNumber;
const int libcall_pol::kFgetcFieldNumber;
const int libcall_pol::kReadFieldNumber;
const int libcall_pol::kStrchrFieldNumber;
const int libcall_pol::kExitFieldNumber;
const int libcall_pol::kStrcmpFieldNumber;
const int libcall_pol::kCtypeBLocFieldNumber;
const int libcall_pol::kFscanfFieldNumber;
const int libcall_pol::kStrncpyFieldNumber;
const int libcall_pol::kFstatFieldNumber;
const int libcall_pol::kReallocFieldNumber;
const int libcall_pol::kMmapFieldNumber;
const int libcall_pol::kQsortFieldNumber;
const int libcall_pol::kBsearchFieldNumber;
const int libcall_pol::kOpenStubFieldNumber;
const int libcall_pol::kLseekFieldNumber;
const int libcall_pol::kFreadFieldNumber;
const int libcall_pol::kStrncmpFieldNumber;
const int libcall_pol::kMemcmpFieldNumber;
const int libcall_pol::kFxstat64FieldNumber;
const int libcall_pol::kGenericFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

libcall_pol::libcall_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.libcall_pol)
}
libcall_pol::libcall_pol(const libcall_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      restrict_addresses_(from.restrict_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&action_, &from.action_,
    reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&action_) + sizeof(ident_));
  clear_has_libcall_cnt();
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_pol::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_pol::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_pol::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_pol::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_pol::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_pol::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_pol::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_pol::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_pol::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_pol::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_pol::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_pol::MergeFrom(from.fgetc());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_pol::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_pol::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_pol::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_pol::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_pol::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_pol::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_pol::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_pol::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_pol::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_pol::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_pol::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_pol::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_pol::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_pol::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_pol::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_pol::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_pol::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_pol::MergeFrom(from.fxstat64());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_pol::MergeFrom(from.generic());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:libcall_types.libcall_pol)
}

void libcall_pol::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  ident_ = 255;
  clear_has_libcall_cnt();
}

libcall_pol::~libcall_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.libcall_pol)
  SharedDtor();
}

void libcall_pol::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_libcall_cnt()) {
    clear_libcall_cnt();
  }
}

void libcall_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* libcall_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[0].descriptor;
}

const libcall_pol& libcall_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

libcall_pol* libcall_pol::New(::google::protobuf::Arena* arena) const {
  libcall_pol* n = new libcall_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void libcall_pol::clear_libcall_cnt() {
// @@protoc_insertion_point(one_of_clear_start:libcall_types.libcall_pol)
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      delete libcall_cnt_.strcpy_;
      break;
    }
    case kPrintf: {
      delete libcall_cnt_.printf_;
      break;
    }
    case kAtoi: {
      delete libcall_cnt_.atoi_;
      break;
    }
    case kMalloc: {
      delete libcall_cnt_.malloc_;
      break;
    }
    case kGetmodulehandle: {
      delete libcall_cnt_.getmodulehandle_;
      break;
    }
    case kGetprocaddress: {
      delete libcall_cnt_.getprocaddress_;
      break;
    }
    case kGetmainargs: {
      delete libcall_cnt_.getmainargs_;
      break;
    }
    case kGethostname: {
      delete libcall_cnt_.gethostname_;
      break;
    }
    case kFree: {
      delete libcall_cnt_.free_;
      break;
    }
    case kMemcpy: {
      delete libcall_cnt_.memcpy_;
      break;
    }
    case kMemset: {
      delete libcall_cnt_.memset_;
      break;
    }
    case kFgetc: {
      delete libcall_cnt_.fgetc_;
      break;
    }
    case kRead: {
      delete libcall_cnt_.read_;
      break;
    }
    case kStrchr: {
      delete libcall_cnt_.strchr_;
      break;
    }
    case kExit: {
      delete libcall_cnt_.exit_;
      break;
    }
    case kStrcmp: {
      delete libcall_cnt_.strcmp_;
      break;
    }
    case kCtypeBLoc: {
      delete libcall_cnt_.ctype_b_loc_;
      break;
    }
    case kFscanf: {
      delete libcall_cnt_.fscanf_;
      break;
    }
    case kStrncpy: {
      delete libcall_cnt_.strncpy_;
      break;
    }
    case kFstat: {
      delete libcall_cnt_.fstat_;
      break;
    }
    case kRealloc: {
      delete libcall_cnt_.realloc_;
      break;
    }
    case kMmap: {
      delete libcall_cnt_.mmap_;
      break;
    }
    case kQsort: {
      delete libcall_cnt_.qsort_;
      break;
    }
    case kBsearch: {
      delete libcall_cnt_.bsearch_;
      break;
    }
    case kOpenStub: {
      delete libcall_cnt_.open_stub_;
      break;
    }
    case kLseek: {
      delete libcall_cnt_.lseek_;
      break;
    }
    case kFread: {
      delete libcall_cnt_.fread_;
      break;
    }
    case kStrncmp: {
      delete libcall_cnt_.strncmp_;
      break;
    }
    case kMemcmp: {
      delete libcall_cnt_.memcmp_;
      break;
    }
    case kFxstat64: {
      delete libcall_cnt_.fxstat64_;
      break;
    }
    case kGeneric: {
      delete libcall_cnt_.generic_;
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIBCALL_CNT_NOT_SET;
}


void libcall_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.libcall_pol)
  restrict_addresses_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    action_ = 0;
    ident_ = 255;
  }
  clear_libcall_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool libcall_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.libcall_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "libcall_types.libcall_pol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::libcall_types::lib_ident_IsValid(value)) {
            set_ident(static_cast< ::libcall_types::lib_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.tracing_action action = 3 [default = SKIP];
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::tracing_action_IsValid(value)) {
            set_action(static_cast< ::common::tracing_action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 restrict_addresses = 4;
      case 4: {
        if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_restrict_addresses())));
        } else if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_restrict_addresses())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcpy_pol strcpy = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.printf_pol printf = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_printf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.atoi_pol atoi = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atoi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.malloc_pol malloc = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_malloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmodulehandle_pol getmodulehandle = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmodulehandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getprocaddress_pol getprocaddress = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getprocaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmainargs_pol getmainargs = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmainargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.gethostname_pol gethostname = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gethostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.free_pol free = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcpy_pol memcpy = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memset_pol memset = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fgetc_pol fgetc = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fgetc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.read_pol read = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strchr_pol strchr = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strchr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.exit_pol exit = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcmp_pol strcmp = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.ctype_b_loc_pol ctype_b_loc = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctype_b_loc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fscanf_pol fscanf = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fscanf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncpy_pol strncpy = 24;
      case 24: {
        if (tag == 194u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strncpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fstat_pol fstat = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.realloc_pol realloc = 26;
      case 26: {
        if (tag == 210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.mmap_pol mmap = 27;
      case 27: {
        if (tag == 218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.qsort_pol qsort = 28;
      case 28: {
        if (tag == 226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qsort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.bsearch_pol bsearch = 29;
      case 29: {
        if (tag == 234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.open_pol open_stub = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_stub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.lseek_pol lseek = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lseek()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fread_pol fread = 32;
      case 32: {
        if (tag == 258u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncmp_pol strncmp = 33;
      case 33: {
        if (tag == 266u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strncmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcmp_pol memcmp = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fxstat64_pol fxstat64 = 35;
      case 35: {
        if (tag == 282u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fxstat64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.generic_pol generic = 50;
      case 50: {
        if (tag == 402u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.libcall_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.libcall_pol)
  return false;
#undef DO_
}

void libcall_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.libcall_pol)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_pol.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ident(), output);
  }

  // optional .common.tracing_action action = 3 [default = SKIP];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // repeated uint64 restrict_addresses = 4;
  for (int i = 0; i < this->restrict_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->restrict_addresses(i), output);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *libcall_cnt_.strcpy_, output);
      break;
    case kPrintf:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *libcall_cnt_.printf_, output);
      break;
    case kAtoi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *libcall_cnt_.atoi_, output);
      break;
    case kMalloc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *libcall_cnt_.malloc_, output);
      break;
    case kGetmodulehandle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *libcall_cnt_.getmodulehandle_, output);
      break;
    case kGetprocaddress:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *libcall_cnt_.getprocaddress_, output);
      break;
    case kGetmainargs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *libcall_cnt_.getmainargs_, output);
      break;
    case kGethostname:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *libcall_cnt_.gethostname_, output);
      break;
    case kFree:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *libcall_cnt_.free_, output);
      break;
    case kMemcpy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, *libcall_cnt_.memcpy_, output);
      break;
    case kMemset:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, *libcall_cnt_.memset_, output);
      break;
    case kFgetc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, *libcall_cnt_.fgetc_, output);
      break;
    case kRead:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, *libcall_cnt_.read_, output);
      break;
    case kStrchr:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, *libcall_cnt_.strchr_, output);
      break;
    case kExit:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, *libcall_cnt_.exit_, output);
      break;
    case kStrcmp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *libcall_cnt_.strcmp_, output);
      break;
    case kCtypeBLoc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, *libcall_cnt_.ctype_b_loc_, output);
      break;
    case kFscanf:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, *libcall_cnt_.fscanf_, output);
      break;
    case kStrncpy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, *libcall_cnt_.strncpy_, output);
      break;
    case kFstat:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, *libcall_cnt_.fstat_, output);
      break;
    case kRealloc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, *libcall_cnt_.realloc_, output);
      break;
    case kMmap:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, *libcall_cnt_.mmap_, output);
      break;
    case kQsort:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, *libcall_cnt_.qsort_, output);
      break;
    case kBsearch:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, *libcall_cnt_.bsearch_, output);
      break;
    case kOpenStub:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, *libcall_cnt_.open_stub_, output);
      break;
    case kLseek:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, *libcall_cnt_.lseek_, output);
      break;
    case kFread:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, *libcall_cnt_.fread_, output);
      break;
    case kStrncmp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, *libcall_cnt_.strncmp_, output);
      break;
    case kMemcmp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, *libcall_cnt_.memcmp_, output);
      break;
    case kFxstat64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, *libcall_cnt_.fxstat64_, output);
      break;
    case kGeneric:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        50, *libcall_cnt_.generic_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.libcall_pol)
}

::google::protobuf::uint8* libcall_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.libcall_pol)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_pol.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ident(), target);
  }

  // optional .common.tracing_action action = 3 [default = SKIP];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // repeated uint64 restrict_addresses = 4;
  for (int i = 0; i < this->restrict_addresses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->restrict_addresses(i), target);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *libcall_cnt_.strcpy_, false, target);
      break;
    case kPrintf:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *libcall_cnt_.printf_, false, target);
      break;
    case kAtoi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *libcall_cnt_.atoi_, false, target);
      break;
    case kMalloc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *libcall_cnt_.malloc_, false, target);
      break;
    case kGetmodulehandle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *libcall_cnt_.getmodulehandle_, false, target);
      break;
    case kGetprocaddress:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *libcall_cnt_.getprocaddress_, false, target);
      break;
    case kGetmainargs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *libcall_cnt_.getmainargs_, false, target);
      break;
    case kGethostname:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *libcall_cnt_.gethostname_, false, target);
      break;
    case kFree:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *libcall_cnt_.free_, false, target);
      break;
    case kMemcpy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          14, *libcall_cnt_.memcpy_, false, target);
      break;
    case kMemset:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          15, *libcall_cnt_.memset_, false, target);
      break;
    case kFgetc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          16, *libcall_cnt_.fgetc_, false, target);
      break;
    case kRead:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          17, *libcall_cnt_.read_, false, target);
      break;
    case kStrchr:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          18, *libcall_cnt_.strchr_, false, target);
      break;
    case kExit:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          19, *libcall_cnt_.exit_, false, target);
      break;
    case kStrcmp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          20, *libcall_cnt_.strcmp_, false, target);
      break;
    case kCtypeBLoc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          22, *libcall_cnt_.ctype_b_loc_, false, target);
      break;
    case kFscanf:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          23, *libcall_cnt_.fscanf_, false, target);
      break;
    case kStrncpy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          24, *libcall_cnt_.strncpy_, false, target);
      break;
    case kFstat:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          25, *libcall_cnt_.fstat_, false, target);
      break;
    case kRealloc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          26, *libcall_cnt_.realloc_, false, target);
      break;
    case kMmap:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          27, *libcall_cnt_.mmap_, false, target);
      break;
    case kQsort:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          28, *libcall_cnt_.qsort_, false, target);
      break;
    case kBsearch:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          29, *libcall_cnt_.bsearch_, false, target);
      break;
    case kOpenStub:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          30, *libcall_cnt_.open_stub_, false, target);
      break;
    case kLseek:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          31, *libcall_cnt_.lseek_, false, target);
      break;
    case kFread:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          32, *libcall_cnt_.fread_, false, target);
      break;
    case kStrncmp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          33, *libcall_cnt_.strncmp_, false, target);
      break;
    case kMemcmp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          34, *libcall_cnt_.memcmp_, false, target);
      break;
    case kFxstat64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          35, *libcall_cnt_.fxstat64_, false, target);
      break;
    case kGeneric:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          50, *libcall_cnt_.generic_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.libcall_pol)
  return target;
}

size_t libcall_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.libcall_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated uint64 restrict_addresses = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->restrict_addresses_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->restrict_addresses_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional .common.tracing_action action = 3 [default = SKIP];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
    if (has_ident()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());
    }

  }
  switch (libcall_cnt_case()) {
    // optional .libcall_types.strcpy_pol strcpy = 5;
    case kStrcpy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strcpy_);
      break;
    }
    // optional .libcall_types.printf_pol printf = 6;
    case kPrintf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.printf_);
      break;
    }
    // optional .libcall_types.atoi_pol atoi = 7;
    case kAtoi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.atoi_);
      break;
    }
    // optional .libcall_types.malloc_pol malloc = 8;
    case kMalloc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.malloc_);
      break;
    }
    // optional .libcall_types.getmodulehandle_pol getmodulehandle = 9;
    case kGetmodulehandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.getmodulehandle_);
      break;
    }
    // optional .libcall_types.getprocaddress_pol getprocaddress = 10;
    case kGetprocaddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.getprocaddress_);
      break;
    }
    // optional .libcall_types.getmainargs_pol getmainargs = 11;
    case kGetmainargs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.getmainargs_);
      break;
    }
    // optional .libcall_types.gethostname_pol gethostname = 12;
    case kGethostname: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.gethostname_);
      break;
    }
    // optional .libcall_types.free_pol free = 13;
    case kFree: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.free_);
      break;
    }
    // optional .libcall_types.memcpy_pol memcpy = 14;
    case kMemcpy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.memcpy_);
      break;
    }
    // optional .libcall_types.memset_pol memset = 15;
    case kMemset: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.memset_);
      break;
    }
    // optional .libcall_types.fgetc_pol fgetc = 16;
    case kFgetc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fgetc_);
      break;
    }
    // optional .libcall_types.read_pol read = 17;
    case kRead: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.read_);
      break;
    }
    // optional .libcall_types.strchr_pol strchr = 18;
    case kStrchr: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strchr_);
      break;
    }
    // optional .libcall_types.exit_pol exit = 19;
    case kExit: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.exit_);
      break;
    }
    // optional .libcall_types.strcmp_pol strcmp = 20;
    case kStrcmp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strcmp_);
      break;
    }
    // optional .libcall_types.ctype_b_loc_pol ctype_b_loc = 22;
    case kCtypeBLoc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.ctype_b_loc_);
      break;
    }
    // optional .libcall_types.fscanf_pol fscanf = 23;
    case kFscanf: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fscanf_);
      break;
    }
    // optional .libcall_types.strncpy_pol strncpy = 24;
    case kStrncpy: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strncpy_);
      break;
    }
    // optional .libcall_types.fstat_pol fstat = 25;
    case kFstat: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fstat_);
      break;
    }
    // optional .libcall_types.realloc_pol realloc = 26;
    case kRealloc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.realloc_);
      break;
    }
    // optional .libcall_types.mmap_pol mmap = 27;
    case kMmap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.mmap_);
      break;
    }
    // optional .libcall_types.qsort_pol qsort = 28;
    case kQsort: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.qsort_);
      break;
    }
    // optional .libcall_types.bsearch_pol bsearch = 29;
    case kBsearch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.bsearch_);
      break;
    }
    // optional .libcall_types.open_pol open_stub = 30;
    case kOpenStub: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.open_stub_);
      break;
    }
    // optional .libcall_types.lseek_pol lseek = 31;
    case kLseek: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.lseek_);
      break;
    }
    // optional .libcall_types.fread_pol fread = 32;
    case kFread: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fread_);
      break;
    }
    // optional .libcall_types.strncmp_pol strncmp = 33;
    case kStrncmp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strncmp_);
      break;
    }
    // optional .libcall_types.memcmp_pol memcmp = 34;
    case kMemcmp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.memcmp_);
      break;
    }
    // optional .libcall_types.fxstat64_pol fxstat64 = 35;
    case kFxstat64: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fxstat64_);
      break;
    }
    // optional .libcall_types.generic_pol generic = 50;
    case kGeneric: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.generic_);
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void libcall_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.libcall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const libcall_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const libcall_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.libcall_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.libcall_pol)
    MergeFrom(*source);
  }
}

void libcall_pol::MergeFrom(const libcall_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.libcall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  restrict_addresses_.MergeFrom(from.restrict_addresses_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_ident()) {
      set_ident(from.ident());
    }
  }
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_pol::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_pol::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_pol::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_pol::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_pol::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_pol::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_pol::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_pol::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_pol::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_pol::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_pol::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_pol::MergeFrom(from.fgetc());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_pol::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_pol::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_pol::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_pol::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_pol::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_pol::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_pol::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_pol::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_pol::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_pol::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_pol::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_pol::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_pol::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_pol::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_pol::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_pol::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_pol::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_pol::MergeFrom(from.fxstat64());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_pol::MergeFrom(from.generic());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
}

void libcall_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.libcall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void libcall_pol::CopyFrom(const libcall_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.libcall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool libcall_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      if (has_strcpy()) {
        if (!this->strcpy().IsInitialized()) return false;
      }
      break;
    }
    case kPrintf: {
      if (has_printf()) {
        if (!this->printf().IsInitialized()) return false;
      }
      break;
    }
    case kAtoi: {
      if (has_atoi()) {
        if (!this->atoi().IsInitialized()) return false;
      }
      break;
    }
    case kMalloc: {
      if (has_malloc()) {
        if (!this->malloc().IsInitialized()) return false;
      }
      break;
    }
    case kGetmodulehandle: {
      if (has_getmodulehandle()) {
        if (!this->getmodulehandle().IsInitialized()) return false;
      }
      break;
    }
    case kGetprocaddress: {
      if (has_getprocaddress()) {
        if (!this->getprocaddress().IsInitialized()) return false;
      }
      break;
    }
    case kGetmainargs: {
      if (has_getmainargs()) {
        if (!this->getmainargs().IsInitialized()) return false;
      }
      break;
    }
    case kGethostname: {
      if (has_gethostname()) {
        if (!this->gethostname().IsInitialized()) return false;
      }
      break;
    }
    case kFree: {
      if (has_free()) {
        if (!this->free().IsInitialized()) return false;
      }
      break;
    }
    case kMemcpy: {
      if (has_memcpy()) {
        if (!this->memcpy().IsInitialized()) return false;
      }
      break;
    }
    case kMemset: {
      if (has_memset()) {
        if (!this->memset().IsInitialized()) return false;
      }
      break;
    }
    case kFgetc: {
      if (has_fgetc()) {
        if (!this->fgetc().IsInitialized()) return false;
      }
      break;
    }
    case kRead: {
      if (has_read()) {
        if (!this->read().IsInitialized()) return false;
      }
      break;
    }
    case kStrchr: {
      if (has_strchr()) {
        if (!this->strchr().IsInitialized()) return false;
      }
      break;
    }
    case kExit: {
      break;
    }
    case kStrcmp: {
      if (has_strcmp()) {
        if (!this->strcmp().IsInitialized()) return false;
      }
      break;
    }
    case kCtypeBLoc: {
      if (has_ctype_b_loc()) {
        if (!this->ctype_b_loc().IsInitialized()) return false;
      }
      break;
    }
    case kFscanf: {
      if (has_fscanf()) {
        if (!this->fscanf().IsInitialized()) return false;
      }
      break;
    }
    case kStrncpy: {
      if (has_strncpy()) {
        if (!this->strncpy().IsInitialized()) return false;
      }
      break;
    }
    case kFstat: {
      break;
    }
    case kRealloc: {
      if (has_realloc()) {
        if (!this->realloc().IsInitialized()) return false;
      }
      break;
    }
    case kMmap: {
      if (has_mmap()) {
        if (!this->mmap().IsInitialized()) return false;
      }
      break;
    }
    case kQsort: {
      if (has_qsort()) {
        if (!this->qsort().IsInitialized()) return false;
      }
      break;
    }
    case kBsearch: {
      if (has_bsearch()) {
        if (!this->bsearch().IsInitialized()) return false;
      }
      break;
    }
    case kOpenStub: {
      if (has_open_stub()) {
        if (!this->open_stub().IsInitialized()) return false;
      }
      break;
    }
    case kLseek: {
      if (has_lseek()) {
        if (!this->lseek().IsInitialized()) return false;
      }
      break;
    }
    case kFread: {
      if (has_fread()) {
        if (!this->fread().IsInitialized()) return false;
      }
      break;
    }
    case kStrncmp: {
      if (has_strncmp()) {
        if (!this->strncmp().IsInitialized()) return false;
      }
      break;
    }
    case kMemcmp: {
      if (has_memcmp()) {
        if (!this->memcmp().IsInitialized()) return false;
      }
      break;
    }
    case kFxstat64: {
      break;
    }
    case kGeneric: {
      if (has_generic()) {
        if (!this->generic().IsInitialized()) return false;
      }
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void libcall_pol::Swap(libcall_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void libcall_pol::InternalSwap(libcall_pol* other) {
  restrict_addresses_.UnsafeArenaSwap(&other->restrict_addresses_);
  name_.Swap(&other->name_);
  std::swap(action_, other->action_);
  std::swap(ident_, other->ident_);
  std::swap(libcall_cnt_, other->libcall_cnt_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata libcall_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// libcall_pol

// required string name = 1;
bool libcall_pol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void libcall_pol::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void libcall_pol::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void libcall_pol::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& libcall_pol::name() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.name)
  return name_.GetNoArena();
}
void libcall_pol::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libcall_types.libcall_pol.name)
}
#if LANG_CXX11
void libcall_pol::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libcall_types.libcall_pol.name)
}
#endif
void libcall_pol::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libcall_types.libcall_pol.name)
}
void libcall_pol::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libcall_types.libcall_pol.name)
}
::std::string* libcall_pol::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* libcall_pol::release_name() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void libcall_pol::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.name)
}

// optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
bool libcall_pol::has_ident() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void libcall_pol::set_has_ident() {
  _has_bits_[0] |= 0x00000004u;
}
void libcall_pol::clear_has_ident() {
  _has_bits_[0] &= ~0x00000004u;
}
void libcall_pol::clear_ident() {
  ident_ = 255;
  clear_has_ident();
}
::libcall_types::lib_ident libcall_pol::ident() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.ident)
  return static_cast< ::libcall_types::lib_ident >(ident_);
}
void libcall_pol::set_ident(::libcall_types::lib_ident value) {
  assert(::libcall_types::lib_ident_IsValid(value));
  set_has_ident();
  ident_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.libcall_pol.ident)
}

// optional .common.tracing_action action = 3 [default = SKIP];
bool libcall_pol::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void libcall_pol::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
void libcall_pol::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
void libcall_pol::clear_action() {
  action_ = 0;
  clear_has_action();
}
::common::tracing_action libcall_pol::action() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.action)
  return static_cast< ::common::tracing_action >(action_);
}
void libcall_pol::set_action(::common::tracing_action value) {
  assert(::common::tracing_action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.libcall_pol.action)
}

// repeated uint64 restrict_addresses = 4;
int libcall_pol::restrict_addresses_size() const {
  return restrict_addresses_.size();
}
void libcall_pol::clear_restrict_addresses() {
  restrict_addresses_.Clear();
}
::google::protobuf::uint64 libcall_pol::restrict_addresses(int index) const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.restrict_addresses)
  return restrict_addresses_.Get(index);
}
void libcall_pol::set_restrict_addresses(int index, ::google::protobuf::uint64 value) {
  restrict_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:libcall_types.libcall_pol.restrict_addresses)
}
void libcall_pol::add_restrict_addresses(::google::protobuf::uint64 value) {
  restrict_addresses_.Add(value);
  // @@protoc_insertion_point(field_add:libcall_types.libcall_pol.restrict_addresses)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
libcall_pol::restrict_addresses() const {
  // @@protoc_insertion_point(field_list:libcall_types.libcall_pol.restrict_addresses)
  return restrict_addresses_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
libcall_pol::mutable_restrict_addresses() {
  // @@protoc_insertion_point(field_mutable_list:libcall_types.libcall_pol.restrict_addresses)
  return &restrict_addresses_;
}

// optional .libcall_types.strcpy_pol strcpy = 5;
bool libcall_pol::has_strcpy() const {
  return libcall_cnt_case() == kStrcpy;
}
void libcall_pol::set_has_strcpy() {
  _oneof_case_[0] = kStrcpy;
}
void libcall_pol::clear_strcpy() {
  if (has_strcpy()) {
    delete libcall_cnt_.strcpy_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strcpy_pol& libcall_pol::strcpy() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.strcpy)
  return has_strcpy()
      ? *libcall_cnt_.strcpy_
      : ::libcall_types::strcpy_pol::default_instance();
}
::libcall_types::strcpy_pol* libcall_pol::mutable_strcpy() {
  if (!has_strcpy()) {
    clear_libcall_cnt();
    set_has_strcpy();
    libcall_cnt_.strcpy_ = new ::libcall_types::strcpy_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.strcpy)
  return libcall_cnt_.strcpy_;
}
::libcall_types::strcpy_pol* libcall_pol::release_strcpy() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.strcpy)
  if (has_strcpy()) {
    clear_has_libcall_cnt();
    ::libcall_types::strcpy_pol* temp = libcall_cnt_.strcpy_;
    libcall_cnt_.strcpy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_strcpy(::libcall_types::strcpy_pol* strcpy) {
  clear_libcall_cnt();
  if (strcpy) {
    set_has_strcpy();
    libcall_cnt_.strcpy_ = strcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strcpy)
}

// optional .libcall_types.printf_pol printf = 6;
bool libcall_pol::has_printf() const {
  return libcall_cnt_case() == kPrintf;
}
void libcall_pol::set_has_printf() {
  _oneof_case_[0] = kPrintf;
}
void libcall_pol::clear_printf() {
  if (has_printf()) {
    delete libcall_cnt_.printf_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::printf_pol& libcall_pol::printf() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.printf)
  return has_printf()
      ? *libcall_cnt_.printf_
      : ::libcall_types::printf_pol::default_instance();
}
::libcall_types::printf_pol* libcall_pol::mutable_printf() {
  if (!has_printf()) {
    clear_libcall_cnt();
    set_has_printf();
    libcall_cnt_.printf_ = new ::libcall_types::printf_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.printf)
  return libcall_cnt_.printf_;
}
::libcall_types::printf_pol* libcall_pol::release_printf() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.printf)
  if (has_printf()) {
    clear_has_libcall_cnt();
    ::libcall_types::printf_pol* temp = libcall_cnt_.printf_;
    libcall_cnt_.printf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_printf(::libcall_types::printf_pol* printf) {
  clear_libcall_cnt();
  if (printf) {
    set_has_printf();
    libcall_cnt_.printf_ = printf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.printf)
}

// optional .libcall_types.atoi_pol atoi = 7;
bool libcall_pol::has_atoi() const {
  return libcall_cnt_case() == kAtoi;
}
void libcall_pol::set_has_atoi() {
  _oneof_case_[0] = kAtoi;
}
void libcall_pol::clear_atoi() {
  if (has_atoi()) {
    delete libcall_cnt_.atoi_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::atoi_pol& libcall_pol::atoi() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.atoi)
  return has_atoi()
      ? *libcall_cnt_.atoi_
      : ::libcall_types::atoi_pol::default_instance();
}
::libcall_types::atoi_pol* libcall_pol::mutable_atoi() {
  if (!has_atoi()) {
    clear_libcall_cnt();
    set_has_atoi();
    libcall_cnt_.atoi_ = new ::libcall_types::atoi_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.atoi)
  return libcall_cnt_.atoi_;
}
::libcall_types::atoi_pol* libcall_pol::release_atoi() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.atoi)
  if (has_atoi()) {
    clear_has_libcall_cnt();
    ::libcall_types::atoi_pol* temp = libcall_cnt_.atoi_;
    libcall_cnt_.atoi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_atoi(::libcall_types::atoi_pol* atoi) {
  clear_libcall_cnt();
  if (atoi) {
    set_has_atoi();
    libcall_cnt_.atoi_ = atoi;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.atoi)
}

// optional .libcall_types.malloc_pol malloc = 8;
bool libcall_pol::has_malloc() const {
  return libcall_cnt_case() == kMalloc;
}
void libcall_pol::set_has_malloc() {
  _oneof_case_[0] = kMalloc;
}
void libcall_pol::clear_malloc() {
  if (has_malloc()) {
    delete libcall_cnt_.malloc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::malloc_pol& libcall_pol::malloc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.malloc)
  return has_malloc()
      ? *libcall_cnt_.malloc_
      : ::libcall_types::malloc_pol::default_instance();
}
::libcall_types::malloc_pol* libcall_pol::mutable_malloc() {
  if (!has_malloc()) {
    clear_libcall_cnt();
    set_has_malloc();
    libcall_cnt_.malloc_ = new ::libcall_types::malloc_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.malloc)
  return libcall_cnt_.malloc_;
}
::libcall_types::malloc_pol* libcall_pol::release_malloc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.malloc)
  if (has_malloc()) {
    clear_has_libcall_cnt();
    ::libcall_types::malloc_pol* temp = libcall_cnt_.malloc_;
    libcall_cnt_.malloc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_malloc(::libcall_types::malloc_pol* malloc) {
  clear_libcall_cnt();
  if (malloc) {
    set_has_malloc();
    libcall_cnt_.malloc_ = malloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.malloc)
}

// optional .libcall_types.getmodulehandle_pol getmodulehandle = 9;
bool libcall_pol::has_getmodulehandle() const {
  return libcall_cnt_case() == kGetmodulehandle;
}
void libcall_pol::set_has_getmodulehandle() {
  _oneof_case_[0] = kGetmodulehandle;
}
void libcall_pol::clear_getmodulehandle() {
  if (has_getmodulehandle()) {
    delete libcall_cnt_.getmodulehandle_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::getmodulehandle_pol& libcall_pol::getmodulehandle() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.getmodulehandle)
  return has_getmodulehandle()
      ? *libcall_cnt_.getmodulehandle_
      : ::libcall_types::getmodulehandle_pol::default_instance();
}
::libcall_types::getmodulehandle_pol* libcall_pol::mutable_getmodulehandle() {
  if (!has_getmodulehandle()) {
    clear_libcall_cnt();
    set_has_getmodulehandle();
    libcall_cnt_.getmodulehandle_ = new ::libcall_types::getmodulehandle_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.getmodulehandle)
  return libcall_cnt_.getmodulehandle_;
}
::libcall_types::getmodulehandle_pol* libcall_pol::release_getmodulehandle() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.getmodulehandle)
  if (has_getmodulehandle()) {
    clear_has_libcall_cnt();
    ::libcall_types::getmodulehandle_pol* temp = libcall_cnt_.getmodulehandle_;
    libcall_cnt_.getmodulehandle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_getmodulehandle(::libcall_types::getmodulehandle_pol* getmodulehandle) {
  clear_libcall_cnt();
  if (getmodulehandle) {
    set_has_getmodulehandle();
    libcall_cnt_.getmodulehandle_ = getmodulehandle;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.getmodulehandle)
}

// optional .libcall_types.getprocaddress_pol getprocaddress = 10;
bool libcall_pol::has_getprocaddress() const {
  return libcall_cnt_case() == kGetprocaddress;
}
void libcall_pol::set_has_getprocaddress() {
  _oneof_case_[0] = kGetprocaddress;
}
void libcall_pol::clear_getprocaddress() {
  if (has_getprocaddress()) {
    delete libcall_cnt_.getprocaddress_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::getprocaddress_pol& libcall_pol::getprocaddress() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.getprocaddress)
  return has_getprocaddress()
      ? *libcall_cnt_.getprocaddress_
      : ::libcall_types::getprocaddress_pol::default_instance();
}
::libcall_types::getprocaddress_pol* libcall_pol::mutable_getprocaddress() {
  if (!has_getprocaddress()) {
    clear_libcall_cnt();
    set_has_getprocaddress();
    libcall_cnt_.getprocaddress_ = new ::libcall_types::getprocaddress_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.getprocaddress)
  return libcall_cnt_.getprocaddress_;
}
::libcall_types::getprocaddress_pol* libcall_pol::release_getprocaddress() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.getprocaddress)
  if (has_getprocaddress()) {
    clear_has_libcall_cnt();
    ::libcall_types::getprocaddress_pol* temp = libcall_cnt_.getprocaddress_;
    libcall_cnt_.getprocaddress_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_getprocaddress(::libcall_types::getprocaddress_pol* getprocaddress) {
  clear_libcall_cnt();
  if (getprocaddress) {
    set_has_getprocaddress();
    libcall_cnt_.getprocaddress_ = getprocaddress;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.getprocaddress)
}

// optional .libcall_types.getmainargs_pol getmainargs = 11;
bool libcall_pol::has_getmainargs() const {
  return libcall_cnt_case() == kGetmainargs;
}
void libcall_pol::set_has_getmainargs() {
  _oneof_case_[0] = kGetmainargs;
}
void libcall_pol::clear_getmainargs() {
  if (has_getmainargs()) {
    delete libcall_cnt_.getmainargs_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::getmainargs_pol& libcall_pol::getmainargs() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.getmainargs)
  return has_getmainargs()
      ? *libcall_cnt_.getmainargs_
      : ::libcall_types::getmainargs_pol::default_instance();
}
::libcall_types::getmainargs_pol* libcall_pol::mutable_getmainargs() {
  if (!has_getmainargs()) {
    clear_libcall_cnt();
    set_has_getmainargs();
    libcall_cnt_.getmainargs_ = new ::libcall_types::getmainargs_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.getmainargs)
  return libcall_cnt_.getmainargs_;
}
::libcall_types::getmainargs_pol* libcall_pol::release_getmainargs() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.getmainargs)
  if (has_getmainargs()) {
    clear_has_libcall_cnt();
    ::libcall_types::getmainargs_pol* temp = libcall_cnt_.getmainargs_;
    libcall_cnt_.getmainargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_getmainargs(::libcall_types::getmainargs_pol* getmainargs) {
  clear_libcall_cnt();
  if (getmainargs) {
    set_has_getmainargs();
    libcall_cnt_.getmainargs_ = getmainargs;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.getmainargs)
}

// optional .libcall_types.gethostname_pol gethostname = 12;
bool libcall_pol::has_gethostname() const {
  return libcall_cnt_case() == kGethostname;
}
void libcall_pol::set_has_gethostname() {
  _oneof_case_[0] = kGethostname;
}
void libcall_pol::clear_gethostname() {
  if (has_gethostname()) {
    delete libcall_cnt_.gethostname_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::gethostname_pol& libcall_pol::gethostname() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.gethostname)
  return has_gethostname()
      ? *libcall_cnt_.gethostname_
      : ::libcall_types::gethostname_pol::default_instance();
}
::libcall_types::gethostname_pol* libcall_pol::mutable_gethostname() {
  if (!has_gethostname()) {
    clear_libcall_cnt();
    set_has_gethostname();
    libcall_cnt_.gethostname_ = new ::libcall_types::gethostname_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.gethostname)
  return libcall_cnt_.gethostname_;
}
::libcall_types::gethostname_pol* libcall_pol::release_gethostname() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.gethostname)
  if (has_gethostname()) {
    clear_has_libcall_cnt();
    ::libcall_types::gethostname_pol* temp = libcall_cnt_.gethostname_;
    libcall_cnt_.gethostname_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_gethostname(::libcall_types::gethostname_pol* gethostname) {
  clear_libcall_cnt();
  if (gethostname) {
    set_has_gethostname();
    libcall_cnt_.gethostname_ = gethostname;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.gethostname)
}

// optional .libcall_types.free_pol free = 13;
bool libcall_pol::has_free() const {
  return libcall_cnt_case() == kFree;
}
void libcall_pol::set_has_free() {
  _oneof_case_[0] = kFree;
}
void libcall_pol::clear_free() {
  if (has_free()) {
    delete libcall_cnt_.free_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::free_pol& libcall_pol::free() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.free)
  return has_free()
      ? *libcall_cnt_.free_
      : ::libcall_types::free_pol::default_instance();
}
::libcall_types::free_pol* libcall_pol::mutable_free() {
  if (!has_free()) {
    clear_libcall_cnt();
    set_has_free();
    libcall_cnt_.free_ = new ::libcall_types::free_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.free)
  return libcall_cnt_.free_;
}
::libcall_types::free_pol* libcall_pol::release_free() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.free)
  if (has_free()) {
    clear_has_libcall_cnt();
    ::libcall_types::free_pol* temp = libcall_cnt_.free_;
    libcall_cnt_.free_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_free(::libcall_types::free_pol* free) {
  clear_libcall_cnt();
  if (free) {
    set_has_free();
    libcall_cnt_.free_ = free;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.free)
}

// optional .libcall_types.memcpy_pol memcpy = 14;
bool libcall_pol::has_memcpy() const {
  return libcall_cnt_case() == kMemcpy;
}
void libcall_pol::set_has_memcpy() {
  _oneof_case_[0] = kMemcpy;
}
void libcall_pol::clear_memcpy() {
  if (has_memcpy()) {
    delete libcall_cnt_.memcpy_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::memcpy_pol& libcall_pol::memcpy() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.memcpy)
  return has_memcpy()
      ? *libcall_cnt_.memcpy_
      : ::libcall_types::memcpy_pol::default_instance();
}
::libcall_types::memcpy_pol* libcall_pol::mutable_memcpy() {
  if (!has_memcpy()) {
    clear_libcall_cnt();
    set_has_memcpy();
    libcall_cnt_.memcpy_ = new ::libcall_types::memcpy_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.memcpy)
  return libcall_cnt_.memcpy_;
}
::libcall_types::memcpy_pol* libcall_pol::release_memcpy() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.memcpy)
  if (has_memcpy()) {
    clear_has_libcall_cnt();
    ::libcall_types::memcpy_pol* temp = libcall_cnt_.memcpy_;
    libcall_cnt_.memcpy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_memcpy(::libcall_types::memcpy_pol* memcpy) {
  clear_libcall_cnt();
  if (memcpy) {
    set_has_memcpy();
    libcall_cnt_.memcpy_ = memcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.memcpy)
}

// optional .libcall_types.memset_pol memset = 15;
bool libcall_pol::has_memset() const {
  return libcall_cnt_case() == kMemset;
}
void libcall_pol::set_has_memset() {
  _oneof_case_[0] = kMemset;
}
void libcall_pol::clear_memset() {
  if (has_memset()) {
    delete libcall_cnt_.memset_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::memset_pol& libcall_pol::memset() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.memset)
  return has_memset()
      ? *libcall_cnt_.memset_
      : ::libcall_types::memset_pol::default_instance();
}
::libcall_types::memset_pol* libcall_pol::mutable_memset() {
  if (!has_memset()) {
    clear_libcall_cnt();
    set_has_memset();
    libcall_cnt_.memset_ = new ::libcall_types::memset_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.memset)
  return libcall_cnt_.memset_;
}
::libcall_types::memset_pol* libcall_pol::release_memset() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.memset)
  if (has_memset()) {
    clear_has_libcall_cnt();
    ::libcall_types::memset_pol* temp = libcall_cnt_.memset_;
    libcall_cnt_.memset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_memset(::libcall_types::memset_pol* memset) {
  clear_libcall_cnt();
  if (memset) {
    set_has_memset();
    libcall_cnt_.memset_ = memset;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.memset)
}

// optional .libcall_types.fgetc_pol fgetc = 16;
bool libcall_pol::has_fgetc() const {
  return libcall_cnt_case() == kFgetc;
}
void libcall_pol::set_has_fgetc() {
  _oneof_case_[0] = kFgetc;
}
void libcall_pol::clear_fgetc() {
  if (has_fgetc()) {
    delete libcall_cnt_.fgetc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fgetc_pol& libcall_pol::fgetc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.fgetc)
  return has_fgetc()
      ? *libcall_cnt_.fgetc_
      : ::libcall_types::fgetc_pol::default_instance();
}
::libcall_types::fgetc_pol* libcall_pol::mutable_fgetc() {
  if (!has_fgetc()) {
    clear_libcall_cnt();
    set_has_fgetc();
    libcall_cnt_.fgetc_ = new ::libcall_types::fgetc_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.fgetc)
  return libcall_cnt_.fgetc_;
}
::libcall_types::fgetc_pol* libcall_pol::release_fgetc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.fgetc)
  if (has_fgetc()) {
    clear_has_libcall_cnt();
    ::libcall_types::fgetc_pol* temp = libcall_cnt_.fgetc_;
    libcall_cnt_.fgetc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_fgetc(::libcall_types::fgetc_pol* fgetc) {
  clear_libcall_cnt();
  if (fgetc) {
    set_has_fgetc();
    libcall_cnt_.fgetc_ = fgetc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fgetc)
}

// optional .libcall_types.read_pol read = 17;
bool libcall_pol::has_read() const {
  return libcall_cnt_case() == kRead;
}
void libcall_pol::set_has_read() {
  _oneof_case_[0] = kRead;
}
void libcall_pol::clear_read() {
  if (has_read()) {
    delete libcall_cnt_.read_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::read_pol& libcall_pol::read() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.read)
  return has_read()
      ? *libcall_cnt_.read_
      : ::libcall_types::read_pol::default_instance();
}
::libcall_types::read_pol* libcall_pol::mutable_read() {
  if (!has_read()) {
    clear_libcall_cnt();
    set_has_read();
    libcall_cnt_.read_ = new ::libcall_types::read_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.read)
  return libcall_cnt_.read_;
}
::libcall_types::read_pol* libcall_pol::release_read() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.read)
  if (has_read()) {
    clear_has_libcall_cnt();
    ::libcall_types::read_pol* temp = libcall_cnt_.read_;
    libcall_cnt_.read_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_read(::libcall_types::read_pol* read) {
  clear_libcall_cnt();
  if (read) {
    set_has_read();
    libcall_cnt_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.read)
}

// optional .libcall_types.strchr_pol strchr = 18;
bool libcall_pol::has_strchr() const {
  return libcall_cnt_case() == kStrchr;
}
void libcall_pol::set_has_strchr() {
  _oneof_case_[0] = kStrchr;
}
void libcall_pol::clear_strchr() {
  if (has_strchr()) {
    delete libcall_cnt_.strchr_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strchr_pol& libcall_pol::strchr() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.strchr)
  return has_strchr()
      ? *libcall_cnt_.strchr_
      : ::libcall_types::strchr_pol::default_instance();
}
::libcall_types::strchr_pol* libcall_pol::mutable_strchr() {
  if (!has_strchr()) {
    clear_libcall_cnt();
    set_has_strchr();
    libcall_cnt_.strchr_ = new ::libcall_types::strchr_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.strchr)
  return libcall_cnt_.strchr_;
}
::libcall_types::strchr_pol* libcall_pol::release_strchr() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.strchr)
  if (has_strchr()) {
    clear_has_libcall_cnt();
    ::libcall_types::strchr_pol* temp = libcall_cnt_.strchr_;
    libcall_cnt_.strchr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_strchr(::libcall_types::strchr_pol* strchr) {
  clear_libcall_cnt();
  if (strchr) {
    set_has_strchr();
    libcall_cnt_.strchr_ = strchr;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strchr)
}

// optional .libcall_types.exit_pol exit = 19;
bool libcall_pol::has_exit() const {
  return libcall_cnt_case() == kExit;
}
void libcall_pol::set_has_exit() {
  _oneof_case_[0] = kExit;
}
void libcall_pol::clear_exit() {
  if (has_exit()) {
    delete libcall_cnt_.exit_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::exit_pol& libcall_pol::exit() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.exit)
  return has_exit()
      ? *libcall_cnt_.exit_
      : ::libcall_types::exit_pol::default_instance();
}
::libcall_types::exit_pol* libcall_pol::mutable_exit() {
  if (!has_exit()) {
    clear_libcall_cnt();
    set_has_exit();
    libcall_cnt_.exit_ = new ::libcall_types::exit_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.exit)
  return libcall_cnt_.exit_;
}
::libcall_types::exit_pol* libcall_pol::release_exit() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.exit)
  if (has_exit()) {
    clear_has_libcall_cnt();
    ::libcall_types::exit_pol* temp = libcall_cnt_.exit_;
    libcall_cnt_.exit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_exit(::libcall_types::exit_pol* exit) {
  clear_libcall_cnt();
  if (exit) {
    set_has_exit();
    libcall_cnt_.exit_ = exit;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.exit)
}

// optional .libcall_types.strcmp_pol strcmp = 20;
bool libcall_pol::has_strcmp() const {
  return libcall_cnt_case() == kStrcmp;
}
void libcall_pol::set_has_strcmp() {
  _oneof_case_[0] = kStrcmp;
}
void libcall_pol::clear_strcmp() {
  if (has_strcmp()) {
    delete libcall_cnt_.strcmp_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strcmp_pol& libcall_pol::strcmp() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.strcmp)
  return has_strcmp()
      ? *libcall_cnt_.strcmp_
      : ::libcall_types::strcmp_pol::default_instance();
}
::libcall_types::strcmp_pol* libcall_pol::mutable_strcmp() {
  if (!has_strcmp()) {
    clear_libcall_cnt();
    set_has_strcmp();
    libcall_cnt_.strcmp_ = new ::libcall_types::strcmp_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.strcmp)
  return libcall_cnt_.strcmp_;
}
::libcall_types::strcmp_pol* libcall_pol::release_strcmp() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.strcmp)
  if (has_strcmp()) {
    clear_has_libcall_cnt();
    ::libcall_types::strcmp_pol* temp = libcall_cnt_.strcmp_;
    libcall_cnt_.strcmp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_strcmp(::libcall_types::strcmp_pol* strcmp) {
  clear_libcall_cnt();
  if (strcmp) {
    set_has_strcmp();
    libcall_cnt_.strcmp_ = strcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strcmp)
}

// optional .libcall_types.ctype_b_loc_pol ctype_b_loc = 22;
bool libcall_pol::has_ctype_b_loc() const {
  return libcall_cnt_case() == kCtypeBLoc;
}
void libcall_pol::set_has_ctype_b_loc() {
  _oneof_case_[0] = kCtypeBLoc;
}
void libcall_pol::clear_ctype_b_loc() {
  if (has_ctype_b_loc()) {
    delete libcall_cnt_.ctype_b_loc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::ctype_b_loc_pol& libcall_pol::ctype_b_loc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.ctype_b_loc)
  return has_ctype_b_loc()
      ? *libcall_cnt_.ctype_b_loc_
      : ::libcall_types::ctype_b_loc_pol::default_instance();
}
::libcall_types::ctype_b_loc_pol* libcall_pol::mutable_ctype_b_loc() {
  if (!has_ctype_b_loc()) {
    clear_libcall_cnt();
    set_has_ctype_b_loc();
    libcall_cnt_.ctype_b_loc_ = new ::libcall_types::ctype_b_loc_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.ctype_b_loc)
  return libcall_cnt_.ctype_b_loc_;
}
::libcall_types::ctype_b_loc_pol* libcall_pol::release_ctype_b_loc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.ctype_b_loc)
  if (has_ctype_b_loc()) {
    clear_has_libcall_cnt();
    ::libcall_types::ctype_b_loc_pol* temp = libcall_cnt_.ctype_b_loc_;
    libcall_cnt_.ctype_b_loc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_ctype_b_loc(::libcall_types::ctype_b_loc_pol* ctype_b_loc) {
  clear_libcall_cnt();
  if (ctype_b_loc) {
    set_has_ctype_b_loc();
    libcall_cnt_.ctype_b_loc_ = ctype_b_loc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.ctype_b_loc)
}

// optional .libcall_types.fscanf_pol fscanf = 23;
bool libcall_pol::has_fscanf() const {
  return libcall_cnt_case() == kFscanf;
}
void libcall_pol::set_has_fscanf() {
  _oneof_case_[0] = kFscanf;
}
void libcall_pol::clear_fscanf() {
  if (has_fscanf()) {
    delete libcall_cnt_.fscanf_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fscanf_pol& libcall_pol::fscanf() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.fscanf)
  return has_fscanf()
      ? *libcall_cnt_.fscanf_
      : ::libcall_types::fscanf_pol::default_instance();
}
::libcall_types::fscanf_pol* libcall_pol::mutable_fscanf() {
  if (!has_fscanf()) {
    clear_libcall_cnt();
    set_has_fscanf();
    libcall_cnt_.fscanf_ = new ::libcall_types::fscanf_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.fscanf)
  return libcall_cnt_.fscanf_;
}
::libcall_types::fscanf_pol* libcall_pol::release_fscanf() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.fscanf)
  if (has_fscanf()) {
    clear_has_libcall_cnt();
    ::libcall_types::fscanf_pol* temp = libcall_cnt_.fscanf_;
    libcall_cnt_.fscanf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_fscanf(::libcall_types::fscanf_pol* fscanf) {
  clear_libcall_cnt();
  if (fscanf) {
    set_has_fscanf();
    libcall_cnt_.fscanf_ = fscanf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fscanf)
}

// optional .libcall_types.strncpy_pol strncpy = 24;
bool libcall_pol::has_strncpy() const {
  return libcall_cnt_case() == kStrncpy;
}
void libcall_pol::set_has_strncpy() {
  _oneof_case_[0] = kStrncpy;
}
void libcall_pol::clear_strncpy() {
  if (has_strncpy()) {
    delete libcall_cnt_.strncpy_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strncpy_pol& libcall_pol::strncpy() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.strncpy)
  return has_strncpy()
      ? *libcall_cnt_.strncpy_
      : ::libcall_types::strncpy_pol::default_instance();
}
::libcall_types::strncpy_pol* libcall_pol::mutable_strncpy() {
  if (!has_strncpy()) {
    clear_libcall_cnt();
    set_has_strncpy();
    libcall_cnt_.strncpy_ = new ::libcall_types::strncpy_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.strncpy)
  return libcall_cnt_.strncpy_;
}
::libcall_types::strncpy_pol* libcall_pol::release_strncpy() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.strncpy)
  if (has_strncpy()) {
    clear_has_libcall_cnt();
    ::libcall_types::strncpy_pol* temp = libcall_cnt_.strncpy_;
    libcall_cnt_.strncpy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_strncpy(::libcall_types::strncpy_pol* strncpy) {
  clear_libcall_cnt();
  if (strncpy) {
    set_has_strncpy();
    libcall_cnt_.strncpy_ = strncpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strncpy)
}

// optional .libcall_types.fstat_pol fstat = 25;
bool libcall_pol::has_fstat() const {
  return libcall_cnt_case() == kFstat;
}
void libcall_pol::set_has_fstat() {
  _oneof_case_[0] = kFstat;
}
void libcall_pol::clear_fstat() {
  if (has_fstat()) {
    delete libcall_cnt_.fstat_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fstat_pol& libcall_pol::fstat() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.fstat)
  return has_fstat()
      ? *libcall_cnt_.fstat_
      : ::libcall_types::fstat_pol::default_instance();
}
::libcall_types::fstat_pol* libcall_pol::mutable_fstat() {
  if (!has_fstat()) {
    clear_libcall_cnt();
    set_has_fstat();
    libcall_cnt_.fstat_ = new ::libcall_types::fstat_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.fstat)
  return libcall_cnt_.fstat_;
}
::libcall_types::fstat_pol* libcall_pol::release_fstat() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.fstat)
  if (has_fstat()) {
    clear_has_libcall_cnt();
    ::libcall_types::fstat_pol* temp = libcall_cnt_.fstat_;
    libcall_cnt_.fstat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_fstat(::libcall_types::fstat_pol* fstat) {
  clear_libcall_cnt();
  if (fstat) {
    set_has_fstat();
    libcall_cnt_.fstat_ = fstat;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fstat)
}

// optional .libcall_types.realloc_pol realloc = 26;
bool libcall_pol::has_realloc() const {
  return libcall_cnt_case() == kRealloc;
}
void libcall_pol::set_has_realloc() {
  _oneof_case_[0] = kRealloc;
}
void libcall_pol::clear_realloc() {
  if (has_realloc()) {
    delete libcall_cnt_.realloc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::realloc_pol& libcall_pol::realloc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.realloc)
  return has_realloc()
      ? *libcall_cnt_.realloc_
      : ::libcall_types::realloc_pol::default_instance();
}
::libcall_types::realloc_pol* libcall_pol::mutable_realloc() {
  if (!has_realloc()) {
    clear_libcall_cnt();
    set_has_realloc();
    libcall_cnt_.realloc_ = new ::libcall_types::realloc_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.realloc)
  return libcall_cnt_.realloc_;
}
::libcall_types::realloc_pol* libcall_pol::release_realloc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.realloc)
  if (has_realloc()) {
    clear_has_libcall_cnt();
    ::libcall_types::realloc_pol* temp = libcall_cnt_.realloc_;
    libcall_cnt_.realloc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_realloc(::libcall_types::realloc_pol* realloc) {
  clear_libcall_cnt();
  if (realloc) {
    set_has_realloc();
    libcall_cnt_.realloc_ = realloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.realloc)
}

// optional .libcall_types.mmap_pol mmap = 27;
bool libcall_pol::has_mmap() const {
  return libcall_cnt_case() == kMmap;
}
void libcall_pol::set_has_mmap() {
  _oneof_case_[0] = kMmap;
}
void libcall_pol::clear_mmap() {
  if (has_mmap()) {
    delete libcall_cnt_.mmap_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::mmap_pol& libcall_pol::mmap() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.mmap)
  return has_mmap()
      ? *libcall_cnt_.mmap_
      : ::libcall_types::mmap_pol::default_instance();
}
::libcall_types::mmap_pol* libcall_pol::mutable_mmap() {
  if (!has_mmap()) {
    clear_libcall_cnt();
    set_has_mmap();
    libcall_cnt_.mmap_ = new ::libcall_types::mmap_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.mmap)
  return libcall_cnt_.mmap_;
}
::libcall_types::mmap_pol* libcall_pol::release_mmap() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.mmap)
  if (has_mmap()) {
    clear_has_libcall_cnt();
    ::libcall_types::mmap_pol* temp = libcall_cnt_.mmap_;
    libcall_cnt_.mmap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_mmap(::libcall_types::mmap_pol* mmap) {
  clear_libcall_cnt();
  if (mmap) {
    set_has_mmap();
    libcall_cnt_.mmap_ = mmap;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.mmap)
}

// optional .libcall_types.qsort_pol qsort = 28;
bool libcall_pol::has_qsort() const {
  return libcall_cnt_case() == kQsort;
}
void libcall_pol::set_has_qsort() {
  _oneof_case_[0] = kQsort;
}
void libcall_pol::clear_qsort() {
  if (has_qsort()) {
    delete libcall_cnt_.qsort_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::qsort_pol& libcall_pol::qsort() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.qsort)
  return has_qsort()
      ? *libcall_cnt_.qsort_
      : ::libcall_types::qsort_pol::default_instance();
}
::libcall_types::qsort_pol* libcall_pol::mutable_qsort() {
  if (!has_qsort()) {
    clear_libcall_cnt();
    set_has_qsort();
    libcall_cnt_.qsort_ = new ::libcall_types::qsort_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.qsort)
  return libcall_cnt_.qsort_;
}
::libcall_types::qsort_pol* libcall_pol::release_qsort() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.qsort)
  if (has_qsort()) {
    clear_has_libcall_cnt();
    ::libcall_types::qsort_pol* temp = libcall_cnt_.qsort_;
    libcall_cnt_.qsort_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_qsort(::libcall_types::qsort_pol* qsort) {
  clear_libcall_cnt();
  if (qsort) {
    set_has_qsort();
    libcall_cnt_.qsort_ = qsort;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.qsort)
}

// optional .libcall_types.bsearch_pol bsearch = 29;
bool libcall_pol::has_bsearch() const {
  return libcall_cnt_case() == kBsearch;
}
void libcall_pol::set_has_bsearch() {
  _oneof_case_[0] = kBsearch;
}
void libcall_pol::clear_bsearch() {
  if (has_bsearch()) {
    delete libcall_cnt_.bsearch_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::bsearch_pol& libcall_pol::bsearch() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.bsearch)
  return has_bsearch()
      ? *libcall_cnt_.bsearch_
      : ::libcall_types::bsearch_pol::default_instance();
}
::libcall_types::bsearch_pol* libcall_pol::mutable_bsearch() {
  if (!has_bsearch()) {
    clear_libcall_cnt();
    set_has_bsearch();
    libcall_cnt_.bsearch_ = new ::libcall_types::bsearch_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.bsearch)
  return libcall_cnt_.bsearch_;
}
::libcall_types::bsearch_pol* libcall_pol::release_bsearch() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.bsearch)
  if (has_bsearch()) {
    clear_has_libcall_cnt();
    ::libcall_types::bsearch_pol* temp = libcall_cnt_.bsearch_;
    libcall_cnt_.bsearch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_bsearch(::libcall_types::bsearch_pol* bsearch) {
  clear_libcall_cnt();
  if (bsearch) {
    set_has_bsearch();
    libcall_cnt_.bsearch_ = bsearch;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.bsearch)
}

// optional .libcall_types.open_pol open_stub = 30;
bool libcall_pol::has_open_stub() const {
  return libcall_cnt_case() == kOpenStub;
}
void libcall_pol::set_has_open_stub() {
  _oneof_case_[0] = kOpenStub;
}
void libcall_pol::clear_open_stub() {
  if (has_open_stub()) {
    delete libcall_cnt_.open_stub_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::open_pol& libcall_pol::open_stub() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.open_stub)
  return has_open_stub()
      ? *libcall_cnt_.open_stub_
      : ::libcall_types::open_pol::default_instance();
}
::libcall_types::open_pol* libcall_pol::mutable_open_stub() {
  if (!has_open_stub()) {
    clear_libcall_cnt();
    set_has_open_stub();
    libcall_cnt_.open_stub_ = new ::libcall_types::open_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.open_stub)
  return libcall_cnt_.open_stub_;
}
::libcall_types::open_pol* libcall_pol::release_open_stub() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.open_stub)
  if (has_open_stub()) {
    clear_has_libcall_cnt();
    ::libcall_types::open_pol* temp = libcall_cnt_.open_stub_;
    libcall_cnt_.open_stub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_open_stub(::libcall_types::open_pol* open_stub) {
  clear_libcall_cnt();
  if (open_stub) {
    set_has_open_stub();
    libcall_cnt_.open_stub_ = open_stub;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.open_stub)
}

// optional .libcall_types.lseek_pol lseek = 31;
bool libcall_pol::has_lseek() const {
  return libcall_cnt_case() == kLseek;
}
void libcall_pol::set_has_lseek() {
  _oneof_case_[0] = kLseek;
}
void libcall_pol::clear_lseek() {
  if (has_lseek()) {
    delete libcall_cnt_.lseek_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::lseek_pol& libcall_pol::lseek() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.lseek)
  return has_lseek()
      ? *libcall_cnt_.lseek_
      : ::libcall_types::lseek_pol::default_instance();
}
::libcall_types::lseek_pol* libcall_pol::mutable_lseek() {
  if (!has_lseek()) {
    clear_libcall_cnt();
    set_has_lseek();
    libcall_cnt_.lseek_ = new ::libcall_types::lseek_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.lseek)
  return libcall_cnt_.lseek_;
}
::libcall_types::lseek_pol* libcall_pol::release_lseek() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.lseek)
  if (has_lseek()) {
    clear_has_libcall_cnt();
    ::libcall_types::lseek_pol* temp = libcall_cnt_.lseek_;
    libcall_cnt_.lseek_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_lseek(::libcall_types::lseek_pol* lseek) {
  clear_libcall_cnt();
  if (lseek) {
    set_has_lseek();
    libcall_cnt_.lseek_ = lseek;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.lseek)
}

// optional .libcall_types.fread_pol fread = 32;
bool libcall_pol::has_fread() const {
  return libcall_cnt_case() == kFread;
}
void libcall_pol::set_has_fread() {
  _oneof_case_[0] = kFread;
}
void libcall_pol::clear_fread() {
  if (has_fread()) {
    delete libcall_cnt_.fread_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fread_pol& libcall_pol::fread() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.fread)
  return has_fread()
      ? *libcall_cnt_.fread_
      : ::libcall_types::fread_pol::default_instance();
}
::libcall_types::fread_pol* libcall_pol::mutable_fread() {
  if (!has_fread()) {
    clear_libcall_cnt();
    set_has_fread();
    libcall_cnt_.fread_ = new ::libcall_types::fread_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.fread)
  return libcall_cnt_.fread_;
}
::libcall_types::fread_pol* libcall_pol::release_fread() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.fread)
  if (has_fread()) {
    clear_has_libcall_cnt();
    ::libcall_types::fread_pol* temp = libcall_cnt_.fread_;
    libcall_cnt_.fread_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_fread(::libcall_types::fread_pol* fread) {
  clear_libcall_cnt();
  if (fread) {
    set_has_fread();
    libcall_cnt_.fread_ = fread;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fread)
}

// optional .libcall_types.strncmp_pol strncmp = 33;
bool libcall_pol::has_strncmp() const {
  return libcall_cnt_case() == kStrncmp;
}
void libcall_pol::set_has_strncmp() {
  _oneof_case_[0] = kStrncmp;
}
void libcall_pol::clear_strncmp() {
  if (has_strncmp()) {
    delete libcall_cnt_.strncmp_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strncmp_pol& libcall_pol::strncmp() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.strncmp)
  return has_strncmp()
      ? *libcall_cnt_.strncmp_
      : ::libcall_types::strncmp_pol::default_instance();
}
::libcall_types::strncmp_pol* libcall_pol::mutable_strncmp() {
  if (!has_strncmp()) {
    clear_libcall_cnt();
    set_has_strncmp();
    libcall_cnt_.strncmp_ = new ::libcall_types::strncmp_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.strncmp)
  return libcall_cnt_.strncmp_;
}
::libcall_types::strncmp_pol* libcall_pol::release_strncmp() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.strncmp)
  if (has_strncmp()) {
    clear_has_libcall_cnt();
    ::libcall_types::strncmp_pol* temp = libcall_cnt_.strncmp_;
    libcall_cnt_.strncmp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_strncmp(::libcall_types::strncmp_pol* strncmp) {
  clear_libcall_cnt();
  if (strncmp) {
    set_has_strncmp();
    libcall_cnt_.strncmp_ = strncmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strncmp)
}

// optional .libcall_types.memcmp_pol memcmp = 34;
bool libcall_pol::has_memcmp() const {
  return libcall_cnt_case() == kMemcmp;
}
void libcall_pol::set_has_memcmp() {
  _oneof_case_[0] = kMemcmp;
}
void libcall_pol::clear_memcmp() {
  if (has_memcmp()) {
    delete libcall_cnt_.memcmp_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::memcmp_pol& libcall_pol::memcmp() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.memcmp)
  return has_memcmp()
      ? *libcall_cnt_.memcmp_
      : ::libcall_types::memcmp_pol::default_instance();
}
::libcall_types::memcmp_pol* libcall_pol::mutable_memcmp() {
  if (!has_memcmp()) {
    clear_libcall_cnt();
    set_has_memcmp();
    libcall_cnt_.memcmp_ = new ::libcall_types::memcmp_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.memcmp)
  return libcall_cnt_.memcmp_;
}
::libcall_types::memcmp_pol* libcall_pol::release_memcmp() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.memcmp)
  if (has_memcmp()) {
    clear_has_libcall_cnt();
    ::libcall_types::memcmp_pol* temp = libcall_cnt_.memcmp_;
    libcall_cnt_.memcmp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_memcmp(::libcall_types::memcmp_pol* memcmp) {
  clear_libcall_cnt();
  if (memcmp) {
    set_has_memcmp();
    libcall_cnt_.memcmp_ = memcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.memcmp)
}

// optional .libcall_types.fxstat64_pol fxstat64 = 35;
bool libcall_pol::has_fxstat64() const {
  return libcall_cnt_case() == kFxstat64;
}
void libcall_pol::set_has_fxstat64() {
  _oneof_case_[0] = kFxstat64;
}
void libcall_pol::clear_fxstat64() {
  if (has_fxstat64()) {
    delete libcall_cnt_.fxstat64_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fxstat64_pol& libcall_pol::fxstat64() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.fxstat64)
  return has_fxstat64()
      ? *libcall_cnt_.fxstat64_
      : ::libcall_types::fxstat64_pol::default_instance();
}
::libcall_types::fxstat64_pol* libcall_pol::mutable_fxstat64() {
  if (!has_fxstat64()) {
    clear_libcall_cnt();
    set_has_fxstat64();
    libcall_cnt_.fxstat64_ = new ::libcall_types::fxstat64_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.fxstat64)
  return libcall_cnt_.fxstat64_;
}
::libcall_types::fxstat64_pol* libcall_pol::release_fxstat64() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.fxstat64)
  if (has_fxstat64()) {
    clear_has_libcall_cnt();
    ::libcall_types::fxstat64_pol* temp = libcall_cnt_.fxstat64_;
    libcall_cnt_.fxstat64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_fxstat64(::libcall_types::fxstat64_pol* fxstat64) {
  clear_libcall_cnt();
  if (fxstat64) {
    set_has_fxstat64();
    libcall_cnt_.fxstat64_ = fxstat64;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fxstat64)
}

// optional .libcall_types.generic_pol generic = 50;
bool libcall_pol::has_generic() const {
  return libcall_cnt_case() == kGeneric;
}
void libcall_pol::set_has_generic() {
  _oneof_case_[0] = kGeneric;
}
void libcall_pol::clear_generic() {
  if (has_generic()) {
    delete libcall_cnt_.generic_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::generic_pol& libcall_pol::generic() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_pol.generic)
  return has_generic()
      ? *libcall_cnt_.generic_
      : ::libcall_types::generic_pol::default_instance();
}
::libcall_types::generic_pol* libcall_pol::mutable_generic() {
  if (!has_generic()) {
    clear_libcall_cnt();
    set_has_generic();
    libcall_cnt_.generic_ = new ::libcall_types::generic_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_pol.generic)
  return libcall_cnt_.generic_;
}
::libcall_types::generic_pol* libcall_pol::release_generic() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_pol.generic)
  if (has_generic()) {
    clear_has_libcall_cnt();
    ::libcall_types::generic_pol* temp = libcall_cnt_.generic_;
    libcall_cnt_.generic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_pol::set_allocated_generic(::libcall_types::generic_pol* generic) {
  clear_libcall_cnt();
  if (generic) {
    set_has_generic();
    libcall_cnt_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.generic)
}

bool libcall_pol::has_libcall_cnt() const {
  return libcall_cnt_case() != LIBCALL_CNT_NOT_SET;
}
void libcall_pol::clear_has_libcall_cnt() {
  _oneof_case_[0] = LIBCALL_CNT_NOT_SET;
}
libcall_pol::LibcallCntCase libcall_pol::libcall_cnt_case() const {
  return libcall_pol::LibcallCntCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int libcall_t::kFuncAddrFieldNumber;
const int libcall_t::kFuncNameFieldNumber;
const int libcall_t::kIsTracedFieldNumber;
const int libcall_t::kIdentFieldNumber;
const int libcall_t::kStrcpyFieldNumber;
const int libcall_t::kPrintfFieldNumber;
const int libcall_t::kAtoiFieldNumber;
const int libcall_t::kMallocFieldNumber;
const int libcall_t::kGetmodulehandleFieldNumber;
const int libcall_t::kGetprocaddressFieldNumber;
const int libcall_t::kGetmainargsFieldNumber;
const int libcall_t::kGethostnameFieldNumber;
const int libcall_t::kFreeFieldNumber;
const int libcall_t::kMemcpyFieldNumber;
const int libcall_t::kMemsetFieldNumber;
const int libcall_t::kFgetcFieldNumber;
const int libcall_t::kGenericFieldNumber;
const int libcall_t::kReadFieldNumber;
const int libcall_t::kStrchrFieldNumber;
const int libcall_t::kExitFieldNumber;
const int libcall_t::kStrcmpFieldNumber;
const int libcall_t::kCtypeBLocFieldNumber;
const int libcall_t::kFscanfFieldNumber;
const int libcall_t::kStrncpyFieldNumber;
const int libcall_t::kFstatFieldNumber;
const int libcall_t::kReallocFieldNumber;
const int libcall_t::kMmapFieldNumber;
const int libcall_t::kQsortFieldNumber;
const int libcall_t::kBsearchFieldNumber;
const int libcall_t::kOpenStubFieldNumber;
const int libcall_t::kLseekFieldNumber;
const int libcall_t::kFreadFieldNumber;
const int libcall_t::kStrncmpFieldNumber;
const int libcall_t::kMemcmpFieldNumber;
const int libcall_t::kFxstat64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

libcall_t::libcall_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.libcall_t)
}
libcall_t::libcall_t(const libcall_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_func_name()) {
    func_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_name_);
  }
  ::memcpy(&func_addr_, &from.func_addr_,
    reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&func_addr_) + sizeof(ident_));
  clear_has_libcall_cnt();
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_t::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_t::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_t::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_t::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_t::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_t::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_t::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_t::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_t::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_t::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_t::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_t::MergeFrom(from.fgetc());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_t::MergeFrom(from.generic());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_t::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_t::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_t::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_t::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_t::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_t::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_t::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_t::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_t::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_t::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_t::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_t::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_t::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_t::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_t::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_t::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_t::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_t::MergeFrom(from.fxstat64());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:libcall_types.libcall_t)
}

void libcall_t::SharedCtor() {
  _cached_size_ = 0;
  func_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&func_addr_, 0, reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&func_addr_) + sizeof(ident_));
  clear_has_libcall_cnt();
}

libcall_t::~libcall_t() {
  // @@protoc_insertion_point(destructor:libcall_types.libcall_t)
  SharedDtor();
}

void libcall_t::SharedDtor() {
  func_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_libcall_cnt()) {
    clear_libcall_cnt();
  }
}

void libcall_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* libcall_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[1].descriptor;
}

const libcall_t& libcall_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

libcall_t* libcall_t::New(::google::protobuf::Arena* arena) const {
  libcall_t* n = new libcall_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void libcall_t::clear_libcall_cnt() {
// @@protoc_insertion_point(one_of_clear_start:libcall_types.libcall_t)
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      delete libcall_cnt_.strcpy_;
      break;
    }
    case kPrintf: {
      delete libcall_cnt_.printf_;
      break;
    }
    case kAtoi: {
      delete libcall_cnt_.atoi_;
      break;
    }
    case kMalloc: {
      delete libcall_cnt_.malloc_;
      break;
    }
    case kGetmodulehandle: {
      delete libcall_cnt_.getmodulehandle_;
      break;
    }
    case kGetprocaddress: {
      delete libcall_cnt_.getprocaddress_;
      break;
    }
    case kGetmainargs: {
      delete libcall_cnt_.getmainargs_;
      break;
    }
    case kGethostname: {
      delete libcall_cnt_.gethostname_;
      break;
    }
    case kFree: {
      delete libcall_cnt_.free_;
      break;
    }
    case kMemcpy: {
      delete libcall_cnt_.memcpy_;
      break;
    }
    case kMemset: {
      delete libcall_cnt_.memset_;
      break;
    }
    case kFgetc: {
      delete libcall_cnt_.fgetc_;
      break;
    }
    case kGeneric: {
      delete libcall_cnt_.generic_;
      break;
    }
    case kRead: {
      delete libcall_cnt_.read_;
      break;
    }
    case kStrchr: {
      delete libcall_cnt_.strchr_;
      break;
    }
    case kExit: {
      delete libcall_cnt_.exit_;
      break;
    }
    case kStrcmp: {
      delete libcall_cnt_.strcmp_;
      break;
    }
    case kCtypeBLoc: {
      delete libcall_cnt_.ctype_b_loc_;
      break;
    }
    case kFscanf: {
      delete libcall_cnt_.fscanf_;
      break;
    }
    case kStrncpy: {
      delete libcall_cnt_.strncpy_;
      break;
    }
    case kFstat: {
      delete libcall_cnt_.fstat_;
      break;
    }
    case kRealloc: {
      delete libcall_cnt_.realloc_;
      break;
    }
    case kMmap: {
      delete libcall_cnt_.mmap_;
      break;
    }
    case kQsort: {
      delete libcall_cnt_.qsort_;
      break;
    }
    case kBsearch: {
      delete libcall_cnt_.bsearch_;
      break;
    }
    case kOpenStub: {
      delete libcall_cnt_.open_stub_;
      break;
    }
    case kLseek: {
      delete libcall_cnt_.lseek_;
      break;
    }
    case kFread: {
      delete libcall_cnt_.fread_;
      break;
    }
    case kStrncmp: {
      delete libcall_cnt_.strncmp_;
      break;
    }
    case kMemcmp: {
      delete libcall_cnt_.memcmp_;
      break;
    }
    case kFxstat64: {
      delete libcall_cnt_.fxstat64_;
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIBCALL_CNT_NOT_SET;
}


void libcall_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.libcall_t)
  if (has_func_name()) {
    GOOGLE_DCHECK(!func_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*func_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&func_addr_, 0, reinterpret_cast<char*>(&ident_) -
      reinterpret_cast<char*>(&func_addr_) + sizeof(ident_));
  }
  clear_libcall_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool libcall_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.libcall_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 func_addr = 1;
      case 1: {
        if (tag == 8u) {
          set_has_func_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &func_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string func_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func_name().data(), this->func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "libcall_types.libcall_t.func_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_traced = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_traced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_traced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .libcall_types.lib_ident ident = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::libcall_types::lib_ident_IsValid(value)) {
            set_ident(static_cast< ::libcall_types::lib_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcpy_t strcpy = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.printf_t printf = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_printf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.atoi_t atoi = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atoi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.malloc_t malloc = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_malloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmodulehandle_t getmodulehandle = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmodulehandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getprocaddress_t getprocaddress = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getprocaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmainargs_t getmainargs = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmainargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.gethostname_t gethostname = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gethostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.free_t free = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcpy_t memcpy = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memset_t memset = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fgetc_t fgetc = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fgetc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.generic_t generic = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.read_t read = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strchr_t strchr = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strchr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.exit_t exit = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcmp_t strcmp = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.ctype_b_loc_t ctype_b_loc = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctype_b_loc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fscanf_t fscanf = 24;
      case 24: {
        if (tag == 194u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fscanf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncpy_t strncpy = 25;
      case 25: {
        if (tag == 202u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strncpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fstat_t fstat = 26;
      case 26: {
        if (tag == 210u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.realloc_t realloc = 27;
      case 27: {
        if (tag == 218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.mmap_t mmap = 28;
      case 28: {
        if (tag == 226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.qsort_t qsort = 29;
      case 29: {
        if (tag == 234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qsort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.bsearch_t bsearch = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.open_t open_stub = 31;
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_stub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.lseek_t lseek = 32;
      case 32: {
        if (tag == 258u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lseek()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fread_t fread = 33;
      case 33: {
        if (tag == 266u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncmp_t strncmp = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strncmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcmp_t memcmp = 35;
      case 35: {
        if (tag == 282u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fxstat64_t fxstat64 = 36;
      case 36: {
        if (tag == 290u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fxstat64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.libcall_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.libcall_t)
  return false;
#undef DO_
}

void libcall_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.libcall_t)
  // required uint64 func_addr = 1;
  if (has_func_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->func_addr(), output);
  }

  // required string func_name = 2;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_t.func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->func_name(), output);
  }

  // required bool is_traced = 3;
  if (has_is_traced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_traced(), output);
  }

  // required .libcall_types.lib_ident ident = 4;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ident(), output);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *libcall_cnt_.strcpy_, output);
      break;
    case kPrintf:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *libcall_cnt_.printf_, output);
      break;
    case kAtoi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *libcall_cnt_.atoi_, output);
      break;
    case kMalloc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *libcall_cnt_.malloc_, output);
      break;
    case kGetmodulehandle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *libcall_cnt_.getmodulehandle_, output);
      break;
    case kGetprocaddress:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *libcall_cnt_.getprocaddress_, output);
      break;
    case kGetmainargs:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *libcall_cnt_.getmainargs_, output);
      break;
    case kGethostname:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *libcall_cnt_.gethostname_, output);
      break;
    case kFree:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *libcall_cnt_.free_, output);
      break;
    case kMemcpy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, *libcall_cnt_.memcpy_, output);
      break;
    case kMemset:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, *libcall_cnt_.memset_, output);
      break;
    case kFgetc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, *libcall_cnt_.fgetc_, output);
      break;
    case kGeneric:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, *libcall_cnt_.generic_, output);
      break;
    case kRead:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, *libcall_cnt_.read_, output);
      break;
    case kStrchr:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, *libcall_cnt_.strchr_, output);
      break;
    case kExit:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *libcall_cnt_.exit_, output);
      break;
    case kStrcmp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, *libcall_cnt_.strcmp_, output);
      break;
    case kCtypeBLoc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, *libcall_cnt_.ctype_b_loc_, output);
      break;
    case kFscanf:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, *libcall_cnt_.fscanf_, output);
      break;
    case kStrncpy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, *libcall_cnt_.strncpy_, output);
      break;
    case kFstat:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, *libcall_cnt_.fstat_, output);
      break;
    case kRealloc:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, *libcall_cnt_.realloc_, output);
      break;
    case kMmap:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, *libcall_cnt_.mmap_, output);
      break;
    case kQsort:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, *libcall_cnt_.qsort_, output);
      break;
    case kBsearch:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, *libcall_cnt_.bsearch_, output);
      break;
    case kOpenStub:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, *libcall_cnt_.open_stub_, output);
      break;
    case kLseek:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, *libcall_cnt_.lseek_, output);
      break;
    case kFread:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, *libcall_cnt_.fread_, output);
      break;
    case kStrncmp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, *libcall_cnt_.strncmp_, output);
      break;
    case kMemcmp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, *libcall_cnt_.memcmp_, output);
      break;
    case kFxstat64:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        36, *libcall_cnt_.fxstat64_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.libcall_t)
}

::google::protobuf::uint8* libcall_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.libcall_t)
  // required uint64 func_addr = 1;
  if (has_func_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->func_addr(), target);
  }

  // required string func_name = 2;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_t.func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->func_name(), target);
  }

  // required bool is_traced = 3;
  if (has_is_traced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_traced(), target);
  }

  // required .libcall_types.lib_ident ident = 4;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ident(), target);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *libcall_cnt_.strcpy_, false, target);
      break;
    case kPrintf:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *libcall_cnt_.printf_, false, target);
      break;
    case kAtoi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *libcall_cnt_.atoi_, false, target);
      break;
    case kMalloc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *libcall_cnt_.malloc_, false, target);
      break;
    case kGetmodulehandle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *libcall_cnt_.getmodulehandle_, false, target);
      break;
    case kGetprocaddress:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *libcall_cnt_.getprocaddress_, false, target);
      break;
    case kGetmainargs:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *libcall_cnt_.getmainargs_, false, target);
      break;
    case kGethostname:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *libcall_cnt_.gethostname_, false, target);
      break;
    case kFree:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *libcall_cnt_.free_, false, target);
      break;
    case kMemcpy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          14, *libcall_cnt_.memcpy_, false, target);
      break;
    case kMemset:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          15, *libcall_cnt_.memset_, false, target);
      break;
    case kFgetc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          16, *libcall_cnt_.fgetc_, false, target);
      break;
    case kGeneric:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          17, *libcall_cnt_.generic_, false, target);
      break;
    case kRead:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          18, *libcall_cnt_.read_, false, target);
      break;
    case kStrchr:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          19, *libcall_cnt_.strchr_, false, target);
      break;
    case kExit:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          20, *libcall_cnt_.exit_, false, target);
      break;
    case kStrcmp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          21, *libcall_cnt_.strcmp_, false, target);
      break;
    case kCtypeBLoc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          23, *libcall_cnt_.ctype_b_loc_, false, target);
      break;
    case kFscanf:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          24, *libcall_cnt_.fscanf_, false, target);
      break;
    case kStrncpy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          25, *libcall_cnt_.strncpy_, false, target);
      break;
    case kFstat:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          26, *libcall_cnt_.fstat_, false, target);
      break;
    case kRealloc:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          27, *libcall_cnt_.realloc_, false, target);
      break;
    case kMmap:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          28, *libcall_cnt_.mmap_, false, target);
      break;
    case kQsort:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          29, *libcall_cnt_.qsort_, false, target);
      break;
    case kBsearch:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          30, *libcall_cnt_.bsearch_, false, target);
      break;
    case kOpenStub:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          31, *libcall_cnt_.open_stub_, false, target);
      break;
    case kLseek:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          32, *libcall_cnt_.lseek_, false, target);
      break;
    case kFread:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          33, *libcall_cnt_.fread_, false, target);
      break;
    case kStrncmp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          34, *libcall_cnt_.strncmp_, false, target);
      break;
    case kMemcmp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          35, *libcall_cnt_.memcmp_, false, target);
      break;
    case kFxstat64:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          36, *libcall_cnt_.fxstat64_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.libcall_t)
  return target;
}

size_t libcall_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.libcall_t)
  size_t total_size = 0;

  if (has_func_name()) {
    // required string func_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func_name());
  }

  if (has_func_addr()) {
    // required uint64 func_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->func_addr());
  }

  if (has_is_traced()) {
    // required bool is_traced = 3;
    total_size += 1 + 1;
  }

  if (has_ident()) {
    // required .libcall_types.lib_ident ident = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());
  }

  return total_size;
}
size_t libcall_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.libcall_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string func_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->func_name());

    // required uint64 func_addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->func_addr());

    // required bool is_traced = 3;
    total_size += 1 + 1;

    // required .libcall_types.lib_ident ident = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  switch (libcall_cnt_case()) {
    // optional .libcall_types.strcpy_t strcpy = 5;
    case kStrcpy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strcpy_);
      break;
    }
    // optional .libcall_types.printf_t printf = 6;
    case kPrintf: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.printf_);
      break;
    }
    // optional .libcall_types.atoi_t atoi = 7;
    case kAtoi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.atoi_);
      break;
    }
    // optional .libcall_types.malloc_t malloc = 8;
    case kMalloc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.malloc_);
      break;
    }
    // optional .libcall_types.getmodulehandle_t getmodulehandle = 9;
    case kGetmodulehandle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.getmodulehandle_);
      break;
    }
    // optional .libcall_types.getprocaddress_t getprocaddress = 10;
    case kGetprocaddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.getprocaddress_);
      break;
    }
    // optional .libcall_types.getmainargs_t getmainargs = 11;
    case kGetmainargs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.getmainargs_);
      break;
    }
    // optional .libcall_types.gethostname_t gethostname = 12;
    case kGethostname: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.gethostname_);
      break;
    }
    // optional .libcall_types.free_t free = 13;
    case kFree: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.free_);
      break;
    }
    // optional .libcall_types.memcpy_t memcpy = 14;
    case kMemcpy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.memcpy_);
      break;
    }
    // optional .libcall_types.memset_t memset = 15;
    case kMemset: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.memset_);
      break;
    }
    // optional .libcall_types.fgetc_t fgetc = 16;
    case kFgetc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fgetc_);
      break;
    }
    // optional .libcall_types.generic_t generic = 17;
    case kGeneric: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.generic_);
      break;
    }
    // optional .libcall_types.read_t read = 18;
    case kRead: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.read_);
      break;
    }
    // optional .libcall_types.strchr_t strchr = 19;
    case kStrchr: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strchr_);
      break;
    }
    // optional .libcall_types.exit_t exit = 20;
    case kExit: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.exit_);
      break;
    }
    // optional .libcall_types.strcmp_t strcmp = 21;
    case kStrcmp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strcmp_);
      break;
    }
    // optional .libcall_types.ctype_b_loc_t ctype_b_loc = 23;
    case kCtypeBLoc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.ctype_b_loc_);
      break;
    }
    // optional .libcall_types.fscanf_t fscanf = 24;
    case kFscanf: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fscanf_);
      break;
    }
    // optional .libcall_types.strncpy_t strncpy = 25;
    case kStrncpy: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strncpy_);
      break;
    }
    // optional .libcall_types.fstat_t fstat = 26;
    case kFstat: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fstat_);
      break;
    }
    // optional .libcall_types.realloc_t realloc = 27;
    case kRealloc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.realloc_);
      break;
    }
    // optional .libcall_types.mmap_t mmap = 28;
    case kMmap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.mmap_);
      break;
    }
    // optional .libcall_types.qsort_t qsort = 29;
    case kQsort: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.qsort_);
      break;
    }
    // optional .libcall_types.bsearch_t bsearch = 30;
    case kBsearch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.bsearch_);
      break;
    }
    // optional .libcall_types.open_t open_stub = 31;
    case kOpenStub: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.open_stub_);
      break;
    }
    // optional .libcall_types.lseek_t lseek = 32;
    case kLseek: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.lseek_);
      break;
    }
    // optional .libcall_types.fread_t fread = 33;
    case kFread: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fread_);
      break;
    }
    // optional .libcall_types.strncmp_t strncmp = 34;
    case kStrncmp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.strncmp_);
      break;
    }
    // optional .libcall_types.memcmp_t memcmp = 35;
    case kMemcmp: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.memcmp_);
      break;
    }
    // optional .libcall_types.fxstat64_t fxstat64 = 36;
    case kFxstat64: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *libcall_cnt_.fxstat64_);
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void libcall_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.libcall_t)
  GOOGLE_DCHECK_NE(&from, this);
  const libcall_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const libcall_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.libcall_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.libcall_t)
    MergeFrom(*source);
  }
}

void libcall_t::MergeFrom(const libcall_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.libcall_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_func_name()) {
      set_has_func_name();
      func_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.func_name_);
    }
    if (from.has_func_addr()) {
      set_func_addr(from.func_addr());
    }
    if (from.has_is_traced()) {
      set_is_traced(from.is_traced());
    }
    if (from.has_ident()) {
      set_ident(from.ident());
    }
  }
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_t::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_t::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_t::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_t::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_t::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_t::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_t::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_t::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_t::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_t::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_t::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_t::MergeFrom(from.fgetc());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_t::MergeFrom(from.generic());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_t::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_t::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_t::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_t::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_t::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_t::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_t::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_t::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_t::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_t::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_t::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_t::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_t::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_t::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_t::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_t::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_t::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_t::MergeFrom(from.fxstat64());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
}

void libcall_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.libcall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void libcall_t::CopyFrom(const libcall_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.libcall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool libcall_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      if (has_strcpy()) {
        if (!this->strcpy().IsInitialized()) return false;
      }
      break;
    }
    case kPrintf: {
      if (has_printf()) {
        if (!this->printf().IsInitialized()) return false;
      }
      break;
    }
    case kAtoi: {
      if (has_atoi()) {
        if (!this->atoi().IsInitialized()) return false;
      }
      break;
    }
    case kMalloc: {
      if (has_malloc()) {
        if (!this->malloc().IsInitialized()) return false;
      }
      break;
    }
    case kGetmodulehandle: {
      if (has_getmodulehandle()) {
        if (!this->getmodulehandle().IsInitialized()) return false;
      }
      break;
    }
    case kGetprocaddress: {
      if (has_getprocaddress()) {
        if (!this->getprocaddress().IsInitialized()) return false;
      }
      break;
    }
    case kGetmainargs: {
      if (has_getmainargs()) {
        if (!this->getmainargs().IsInitialized()) return false;
      }
      break;
    }
    case kGethostname: {
      if (has_gethostname()) {
        if (!this->gethostname().IsInitialized()) return false;
      }
      break;
    }
    case kFree: {
      if (has_free()) {
        if (!this->free().IsInitialized()) return false;
      }
      break;
    }
    case kMemcpy: {
      if (has_memcpy()) {
        if (!this->memcpy().IsInitialized()) return false;
      }
      break;
    }
    case kMemset: {
      if (has_memset()) {
        if (!this->memset().IsInitialized()) return false;
      }
      break;
    }
    case kFgetc: {
      if (has_fgetc()) {
        if (!this->fgetc().IsInitialized()) return false;
      }
      break;
    }
    case kGeneric: {
      if (has_generic()) {
        if (!this->generic().IsInitialized()) return false;
      }
      break;
    }
    case kRead: {
      if (has_read()) {
        if (!this->read().IsInitialized()) return false;
      }
      break;
    }
    case kStrchr: {
      if (has_strchr()) {
        if (!this->strchr().IsInitialized()) return false;
      }
      break;
    }
    case kExit: {
      break;
    }
    case kStrcmp: {
      if (has_strcmp()) {
        if (!this->strcmp().IsInitialized()) return false;
      }
      break;
    }
    case kCtypeBLoc: {
      if (has_ctype_b_loc()) {
        if (!this->ctype_b_loc().IsInitialized()) return false;
      }
      break;
    }
    case kFscanf: {
      if (has_fscanf()) {
        if (!this->fscanf().IsInitialized()) return false;
      }
      break;
    }
    case kStrncpy: {
      if (has_strncpy()) {
        if (!this->strncpy().IsInitialized()) return false;
      }
      break;
    }
    case kFstat: {
      if (has_fstat()) {
        if (!this->fstat().IsInitialized()) return false;
      }
      break;
    }
    case kRealloc: {
      if (has_realloc()) {
        if (!this->realloc().IsInitialized()) return false;
      }
      break;
    }
    case kMmap: {
      if (has_mmap()) {
        if (!this->mmap().IsInitialized()) return false;
      }
      break;
    }
    case kQsort: {
      if (has_qsort()) {
        if (!this->qsort().IsInitialized()) return false;
      }
      break;
    }
    case kBsearch: {
      if (has_bsearch()) {
        if (!this->bsearch().IsInitialized()) return false;
      }
      break;
    }
    case kOpenStub: {
      if (has_open_stub()) {
        if (!this->open_stub().IsInitialized()) return false;
      }
      break;
    }
    case kLseek: {
      if (has_lseek()) {
        if (!this->lseek().IsInitialized()) return false;
      }
      break;
    }
    case kFread: {
      if (has_fread()) {
        if (!this->fread().IsInitialized()) return false;
      }
      break;
    }
    case kStrncmp: {
      if (has_strncmp()) {
        if (!this->strncmp().IsInitialized()) return false;
      }
      break;
    }
    case kMemcmp: {
      if (has_memcmp()) {
        if (!this->memcmp().IsInitialized()) return false;
      }
      break;
    }
    case kFxstat64: {
      if (has_fxstat64()) {
        if (!this->fxstat64().IsInitialized()) return false;
      }
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void libcall_t::Swap(libcall_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void libcall_t::InternalSwap(libcall_t* other) {
  func_name_.Swap(&other->func_name_);
  std::swap(func_addr_, other->func_addr_);
  std::swap(is_traced_, other->is_traced_);
  std::swap(ident_, other->ident_);
  std::swap(libcall_cnt_, other->libcall_cnt_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata libcall_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// libcall_t

// required uint64 func_addr = 1;
bool libcall_t::has_func_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void libcall_t::set_has_func_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void libcall_t::clear_has_func_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void libcall_t::clear_func_addr() {
  func_addr_ = GOOGLE_ULONGLONG(0);
  clear_has_func_addr();
}
::google::protobuf::uint64 libcall_t::func_addr() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.func_addr)
  return func_addr_;
}
void libcall_t::set_func_addr(::google::protobuf::uint64 value) {
  set_has_func_addr();
  func_addr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.libcall_t.func_addr)
}

// required string func_name = 2;
bool libcall_t::has_func_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void libcall_t::set_has_func_name() {
  _has_bits_[0] |= 0x00000001u;
}
void libcall_t::clear_has_func_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void libcall_t::clear_func_name() {
  func_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_func_name();
}
const ::std::string& libcall_t::func_name() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.func_name)
  return func_name_.GetNoArena();
}
void libcall_t::set_func_name(const ::std::string& value) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libcall_types.libcall_t.func_name)
}
#if LANG_CXX11
void libcall_t::set_func_name(::std::string&& value) {
  set_has_func_name();
  func_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libcall_types.libcall_t.func_name)
}
#endif
void libcall_t::set_func_name(const char* value) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libcall_types.libcall_t.func_name)
}
void libcall_t::set_func_name(const char* value, size_t size) {
  set_has_func_name();
  func_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libcall_types.libcall_t.func_name)
}
::std::string* libcall_t::mutable_func_name() {
  set_has_func_name();
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.func_name)
  return func_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* libcall_t::release_func_name() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.func_name)
  clear_has_func_name();
  return func_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void libcall_t::set_allocated_func_name(::std::string* func_name) {
  if (func_name != NULL) {
    set_has_func_name();
  } else {
    clear_has_func_name();
  }
  func_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), func_name);
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.func_name)
}

// required bool is_traced = 3;
bool libcall_t::has_is_traced() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void libcall_t::set_has_is_traced() {
  _has_bits_[0] |= 0x00000004u;
}
void libcall_t::clear_has_is_traced() {
  _has_bits_[0] &= ~0x00000004u;
}
void libcall_t::clear_is_traced() {
  is_traced_ = false;
  clear_has_is_traced();
}
bool libcall_t::is_traced() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.is_traced)
  return is_traced_;
}
void libcall_t::set_is_traced(bool value) {
  set_has_is_traced();
  is_traced_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.libcall_t.is_traced)
}

// required .libcall_types.lib_ident ident = 4;
bool libcall_t::has_ident() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void libcall_t::set_has_ident() {
  _has_bits_[0] |= 0x00000008u;
}
void libcall_t::clear_has_ident() {
  _has_bits_[0] &= ~0x00000008u;
}
void libcall_t::clear_ident() {
  ident_ = 0;
  clear_has_ident();
}
::libcall_types::lib_ident libcall_t::ident() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.ident)
  return static_cast< ::libcall_types::lib_ident >(ident_);
}
void libcall_t::set_ident(::libcall_types::lib_ident value) {
  assert(::libcall_types::lib_ident_IsValid(value));
  set_has_ident();
  ident_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.libcall_t.ident)
}

// optional .libcall_types.strcpy_t strcpy = 5;
bool libcall_t::has_strcpy() const {
  return libcall_cnt_case() == kStrcpy;
}
void libcall_t::set_has_strcpy() {
  _oneof_case_[0] = kStrcpy;
}
void libcall_t::clear_strcpy() {
  if (has_strcpy()) {
    delete libcall_cnt_.strcpy_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strcpy_t& libcall_t::strcpy() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.strcpy)
  return has_strcpy()
      ? *libcall_cnt_.strcpy_
      : ::libcall_types::strcpy_t::default_instance();
}
::libcall_types::strcpy_t* libcall_t::mutable_strcpy() {
  if (!has_strcpy()) {
    clear_libcall_cnt();
    set_has_strcpy();
    libcall_cnt_.strcpy_ = new ::libcall_types::strcpy_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.strcpy)
  return libcall_cnt_.strcpy_;
}
::libcall_types::strcpy_t* libcall_t::release_strcpy() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.strcpy)
  if (has_strcpy()) {
    clear_has_libcall_cnt();
    ::libcall_types::strcpy_t* temp = libcall_cnt_.strcpy_;
    libcall_cnt_.strcpy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_strcpy(::libcall_types::strcpy_t* strcpy) {
  clear_libcall_cnt();
  if (strcpy) {
    set_has_strcpy();
    libcall_cnt_.strcpy_ = strcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strcpy)
}

// optional .libcall_types.printf_t printf = 6;
bool libcall_t::has_printf() const {
  return libcall_cnt_case() == kPrintf;
}
void libcall_t::set_has_printf() {
  _oneof_case_[0] = kPrintf;
}
void libcall_t::clear_printf() {
  if (has_printf()) {
    delete libcall_cnt_.printf_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::printf_t& libcall_t::printf() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.printf)
  return has_printf()
      ? *libcall_cnt_.printf_
      : ::libcall_types::printf_t::default_instance();
}
::libcall_types::printf_t* libcall_t::mutable_printf() {
  if (!has_printf()) {
    clear_libcall_cnt();
    set_has_printf();
    libcall_cnt_.printf_ = new ::libcall_types::printf_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.printf)
  return libcall_cnt_.printf_;
}
::libcall_types::printf_t* libcall_t::release_printf() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.printf)
  if (has_printf()) {
    clear_has_libcall_cnt();
    ::libcall_types::printf_t* temp = libcall_cnt_.printf_;
    libcall_cnt_.printf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_printf(::libcall_types::printf_t* printf) {
  clear_libcall_cnt();
  if (printf) {
    set_has_printf();
    libcall_cnt_.printf_ = printf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.printf)
}

// optional .libcall_types.atoi_t atoi = 7;
bool libcall_t::has_atoi() const {
  return libcall_cnt_case() == kAtoi;
}
void libcall_t::set_has_atoi() {
  _oneof_case_[0] = kAtoi;
}
void libcall_t::clear_atoi() {
  if (has_atoi()) {
    delete libcall_cnt_.atoi_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::atoi_t& libcall_t::atoi() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.atoi)
  return has_atoi()
      ? *libcall_cnt_.atoi_
      : ::libcall_types::atoi_t::default_instance();
}
::libcall_types::atoi_t* libcall_t::mutable_atoi() {
  if (!has_atoi()) {
    clear_libcall_cnt();
    set_has_atoi();
    libcall_cnt_.atoi_ = new ::libcall_types::atoi_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.atoi)
  return libcall_cnt_.atoi_;
}
::libcall_types::atoi_t* libcall_t::release_atoi() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.atoi)
  if (has_atoi()) {
    clear_has_libcall_cnt();
    ::libcall_types::atoi_t* temp = libcall_cnt_.atoi_;
    libcall_cnt_.atoi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_atoi(::libcall_types::atoi_t* atoi) {
  clear_libcall_cnt();
  if (atoi) {
    set_has_atoi();
    libcall_cnt_.atoi_ = atoi;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.atoi)
}

// optional .libcall_types.malloc_t malloc = 8;
bool libcall_t::has_malloc() const {
  return libcall_cnt_case() == kMalloc;
}
void libcall_t::set_has_malloc() {
  _oneof_case_[0] = kMalloc;
}
void libcall_t::clear_malloc() {
  if (has_malloc()) {
    delete libcall_cnt_.malloc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::malloc_t& libcall_t::malloc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.malloc)
  return has_malloc()
      ? *libcall_cnt_.malloc_
      : ::libcall_types::malloc_t::default_instance();
}
::libcall_types::malloc_t* libcall_t::mutable_malloc() {
  if (!has_malloc()) {
    clear_libcall_cnt();
    set_has_malloc();
    libcall_cnt_.malloc_ = new ::libcall_types::malloc_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.malloc)
  return libcall_cnt_.malloc_;
}
::libcall_types::malloc_t* libcall_t::release_malloc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.malloc)
  if (has_malloc()) {
    clear_has_libcall_cnt();
    ::libcall_types::malloc_t* temp = libcall_cnt_.malloc_;
    libcall_cnt_.malloc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_malloc(::libcall_types::malloc_t* malloc) {
  clear_libcall_cnt();
  if (malloc) {
    set_has_malloc();
    libcall_cnt_.malloc_ = malloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.malloc)
}

// optional .libcall_types.getmodulehandle_t getmodulehandle = 9;
bool libcall_t::has_getmodulehandle() const {
  return libcall_cnt_case() == kGetmodulehandle;
}
void libcall_t::set_has_getmodulehandle() {
  _oneof_case_[0] = kGetmodulehandle;
}
void libcall_t::clear_getmodulehandle() {
  if (has_getmodulehandle()) {
    delete libcall_cnt_.getmodulehandle_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::getmodulehandle_t& libcall_t::getmodulehandle() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.getmodulehandle)
  return has_getmodulehandle()
      ? *libcall_cnt_.getmodulehandle_
      : ::libcall_types::getmodulehandle_t::default_instance();
}
::libcall_types::getmodulehandle_t* libcall_t::mutable_getmodulehandle() {
  if (!has_getmodulehandle()) {
    clear_libcall_cnt();
    set_has_getmodulehandle();
    libcall_cnt_.getmodulehandle_ = new ::libcall_types::getmodulehandle_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.getmodulehandle)
  return libcall_cnt_.getmodulehandle_;
}
::libcall_types::getmodulehandle_t* libcall_t::release_getmodulehandle() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.getmodulehandle)
  if (has_getmodulehandle()) {
    clear_has_libcall_cnt();
    ::libcall_types::getmodulehandle_t* temp = libcall_cnt_.getmodulehandle_;
    libcall_cnt_.getmodulehandle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_getmodulehandle(::libcall_types::getmodulehandle_t* getmodulehandle) {
  clear_libcall_cnt();
  if (getmodulehandle) {
    set_has_getmodulehandle();
    libcall_cnt_.getmodulehandle_ = getmodulehandle;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.getmodulehandle)
}

// optional .libcall_types.getprocaddress_t getprocaddress = 10;
bool libcall_t::has_getprocaddress() const {
  return libcall_cnt_case() == kGetprocaddress;
}
void libcall_t::set_has_getprocaddress() {
  _oneof_case_[0] = kGetprocaddress;
}
void libcall_t::clear_getprocaddress() {
  if (has_getprocaddress()) {
    delete libcall_cnt_.getprocaddress_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::getprocaddress_t& libcall_t::getprocaddress() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.getprocaddress)
  return has_getprocaddress()
      ? *libcall_cnt_.getprocaddress_
      : ::libcall_types::getprocaddress_t::default_instance();
}
::libcall_types::getprocaddress_t* libcall_t::mutable_getprocaddress() {
  if (!has_getprocaddress()) {
    clear_libcall_cnt();
    set_has_getprocaddress();
    libcall_cnt_.getprocaddress_ = new ::libcall_types::getprocaddress_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.getprocaddress)
  return libcall_cnt_.getprocaddress_;
}
::libcall_types::getprocaddress_t* libcall_t::release_getprocaddress() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.getprocaddress)
  if (has_getprocaddress()) {
    clear_has_libcall_cnt();
    ::libcall_types::getprocaddress_t* temp = libcall_cnt_.getprocaddress_;
    libcall_cnt_.getprocaddress_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_getprocaddress(::libcall_types::getprocaddress_t* getprocaddress) {
  clear_libcall_cnt();
  if (getprocaddress) {
    set_has_getprocaddress();
    libcall_cnt_.getprocaddress_ = getprocaddress;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.getprocaddress)
}

// optional .libcall_types.getmainargs_t getmainargs = 11;
bool libcall_t::has_getmainargs() const {
  return libcall_cnt_case() == kGetmainargs;
}
void libcall_t::set_has_getmainargs() {
  _oneof_case_[0] = kGetmainargs;
}
void libcall_t::clear_getmainargs() {
  if (has_getmainargs()) {
    delete libcall_cnt_.getmainargs_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::getmainargs_t& libcall_t::getmainargs() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.getmainargs)
  return has_getmainargs()
      ? *libcall_cnt_.getmainargs_
      : ::libcall_types::getmainargs_t::default_instance();
}
::libcall_types::getmainargs_t* libcall_t::mutable_getmainargs() {
  if (!has_getmainargs()) {
    clear_libcall_cnt();
    set_has_getmainargs();
    libcall_cnt_.getmainargs_ = new ::libcall_types::getmainargs_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.getmainargs)
  return libcall_cnt_.getmainargs_;
}
::libcall_types::getmainargs_t* libcall_t::release_getmainargs() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.getmainargs)
  if (has_getmainargs()) {
    clear_has_libcall_cnt();
    ::libcall_types::getmainargs_t* temp = libcall_cnt_.getmainargs_;
    libcall_cnt_.getmainargs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_getmainargs(::libcall_types::getmainargs_t* getmainargs) {
  clear_libcall_cnt();
  if (getmainargs) {
    set_has_getmainargs();
    libcall_cnt_.getmainargs_ = getmainargs;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.getmainargs)
}

// optional .libcall_types.gethostname_t gethostname = 12;
bool libcall_t::has_gethostname() const {
  return libcall_cnt_case() == kGethostname;
}
void libcall_t::set_has_gethostname() {
  _oneof_case_[0] = kGethostname;
}
void libcall_t::clear_gethostname() {
  if (has_gethostname()) {
    delete libcall_cnt_.gethostname_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::gethostname_t& libcall_t::gethostname() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.gethostname)
  return has_gethostname()
      ? *libcall_cnt_.gethostname_
      : ::libcall_types::gethostname_t::default_instance();
}
::libcall_types::gethostname_t* libcall_t::mutable_gethostname() {
  if (!has_gethostname()) {
    clear_libcall_cnt();
    set_has_gethostname();
    libcall_cnt_.gethostname_ = new ::libcall_types::gethostname_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.gethostname)
  return libcall_cnt_.gethostname_;
}
::libcall_types::gethostname_t* libcall_t::release_gethostname() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.gethostname)
  if (has_gethostname()) {
    clear_has_libcall_cnt();
    ::libcall_types::gethostname_t* temp = libcall_cnt_.gethostname_;
    libcall_cnt_.gethostname_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_gethostname(::libcall_types::gethostname_t* gethostname) {
  clear_libcall_cnt();
  if (gethostname) {
    set_has_gethostname();
    libcall_cnt_.gethostname_ = gethostname;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.gethostname)
}

// optional .libcall_types.free_t free = 13;
bool libcall_t::has_free() const {
  return libcall_cnt_case() == kFree;
}
void libcall_t::set_has_free() {
  _oneof_case_[0] = kFree;
}
void libcall_t::clear_free() {
  if (has_free()) {
    delete libcall_cnt_.free_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::free_t& libcall_t::free() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.free)
  return has_free()
      ? *libcall_cnt_.free_
      : ::libcall_types::free_t::default_instance();
}
::libcall_types::free_t* libcall_t::mutable_free() {
  if (!has_free()) {
    clear_libcall_cnt();
    set_has_free();
    libcall_cnt_.free_ = new ::libcall_types::free_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.free)
  return libcall_cnt_.free_;
}
::libcall_types::free_t* libcall_t::release_free() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.free)
  if (has_free()) {
    clear_has_libcall_cnt();
    ::libcall_types::free_t* temp = libcall_cnt_.free_;
    libcall_cnt_.free_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_free(::libcall_types::free_t* free) {
  clear_libcall_cnt();
  if (free) {
    set_has_free();
    libcall_cnt_.free_ = free;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.free)
}

// optional .libcall_types.memcpy_t memcpy = 14;
bool libcall_t::has_memcpy() const {
  return libcall_cnt_case() == kMemcpy;
}
void libcall_t::set_has_memcpy() {
  _oneof_case_[0] = kMemcpy;
}
void libcall_t::clear_memcpy() {
  if (has_memcpy()) {
    delete libcall_cnt_.memcpy_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::memcpy_t& libcall_t::memcpy() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.memcpy)
  return has_memcpy()
      ? *libcall_cnt_.memcpy_
      : ::libcall_types::memcpy_t::default_instance();
}
::libcall_types::memcpy_t* libcall_t::mutable_memcpy() {
  if (!has_memcpy()) {
    clear_libcall_cnt();
    set_has_memcpy();
    libcall_cnt_.memcpy_ = new ::libcall_types::memcpy_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.memcpy)
  return libcall_cnt_.memcpy_;
}
::libcall_types::memcpy_t* libcall_t::release_memcpy() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.memcpy)
  if (has_memcpy()) {
    clear_has_libcall_cnt();
    ::libcall_types::memcpy_t* temp = libcall_cnt_.memcpy_;
    libcall_cnt_.memcpy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_memcpy(::libcall_types::memcpy_t* memcpy) {
  clear_libcall_cnt();
  if (memcpy) {
    set_has_memcpy();
    libcall_cnt_.memcpy_ = memcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.memcpy)
}

// optional .libcall_types.memset_t memset = 15;
bool libcall_t::has_memset() const {
  return libcall_cnt_case() == kMemset;
}
void libcall_t::set_has_memset() {
  _oneof_case_[0] = kMemset;
}
void libcall_t::clear_memset() {
  if (has_memset()) {
    delete libcall_cnt_.memset_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::memset_t& libcall_t::memset() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.memset)
  return has_memset()
      ? *libcall_cnt_.memset_
      : ::libcall_types::memset_t::default_instance();
}
::libcall_types::memset_t* libcall_t::mutable_memset() {
  if (!has_memset()) {
    clear_libcall_cnt();
    set_has_memset();
    libcall_cnt_.memset_ = new ::libcall_types::memset_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.memset)
  return libcall_cnt_.memset_;
}
::libcall_types::memset_t* libcall_t::release_memset() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.memset)
  if (has_memset()) {
    clear_has_libcall_cnt();
    ::libcall_types::memset_t* temp = libcall_cnt_.memset_;
    libcall_cnt_.memset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_memset(::libcall_types::memset_t* memset) {
  clear_libcall_cnt();
  if (memset) {
    set_has_memset();
    libcall_cnt_.memset_ = memset;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.memset)
}

// optional .libcall_types.fgetc_t fgetc = 16;
bool libcall_t::has_fgetc() const {
  return libcall_cnt_case() == kFgetc;
}
void libcall_t::set_has_fgetc() {
  _oneof_case_[0] = kFgetc;
}
void libcall_t::clear_fgetc() {
  if (has_fgetc()) {
    delete libcall_cnt_.fgetc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fgetc_t& libcall_t::fgetc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.fgetc)
  return has_fgetc()
      ? *libcall_cnt_.fgetc_
      : ::libcall_types::fgetc_t::default_instance();
}
::libcall_types::fgetc_t* libcall_t::mutable_fgetc() {
  if (!has_fgetc()) {
    clear_libcall_cnt();
    set_has_fgetc();
    libcall_cnt_.fgetc_ = new ::libcall_types::fgetc_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.fgetc)
  return libcall_cnt_.fgetc_;
}
::libcall_types::fgetc_t* libcall_t::release_fgetc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.fgetc)
  if (has_fgetc()) {
    clear_has_libcall_cnt();
    ::libcall_types::fgetc_t* temp = libcall_cnt_.fgetc_;
    libcall_cnt_.fgetc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_fgetc(::libcall_types::fgetc_t* fgetc) {
  clear_libcall_cnt();
  if (fgetc) {
    set_has_fgetc();
    libcall_cnt_.fgetc_ = fgetc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fgetc)
}

// optional .libcall_types.generic_t generic = 17;
bool libcall_t::has_generic() const {
  return libcall_cnt_case() == kGeneric;
}
void libcall_t::set_has_generic() {
  _oneof_case_[0] = kGeneric;
}
void libcall_t::clear_generic() {
  if (has_generic()) {
    delete libcall_cnt_.generic_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::generic_t& libcall_t::generic() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.generic)
  return has_generic()
      ? *libcall_cnt_.generic_
      : ::libcall_types::generic_t::default_instance();
}
::libcall_types::generic_t* libcall_t::mutable_generic() {
  if (!has_generic()) {
    clear_libcall_cnt();
    set_has_generic();
    libcall_cnt_.generic_ = new ::libcall_types::generic_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.generic)
  return libcall_cnt_.generic_;
}
::libcall_types::generic_t* libcall_t::release_generic() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.generic)
  if (has_generic()) {
    clear_has_libcall_cnt();
    ::libcall_types::generic_t* temp = libcall_cnt_.generic_;
    libcall_cnt_.generic_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_generic(::libcall_types::generic_t* generic) {
  clear_libcall_cnt();
  if (generic) {
    set_has_generic();
    libcall_cnt_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.generic)
}

// optional .libcall_types.read_t read = 18;
bool libcall_t::has_read() const {
  return libcall_cnt_case() == kRead;
}
void libcall_t::set_has_read() {
  _oneof_case_[0] = kRead;
}
void libcall_t::clear_read() {
  if (has_read()) {
    delete libcall_cnt_.read_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::read_t& libcall_t::read() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.read)
  return has_read()
      ? *libcall_cnt_.read_
      : ::libcall_types::read_t::default_instance();
}
::libcall_types::read_t* libcall_t::mutable_read() {
  if (!has_read()) {
    clear_libcall_cnt();
    set_has_read();
    libcall_cnt_.read_ = new ::libcall_types::read_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.read)
  return libcall_cnt_.read_;
}
::libcall_types::read_t* libcall_t::release_read() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.read)
  if (has_read()) {
    clear_has_libcall_cnt();
    ::libcall_types::read_t* temp = libcall_cnt_.read_;
    libcall_cnt_.read_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_read(::libcall_types::read_t* read) {
  clear_libcall_cnt();
  if (read) {
    set_has_read();
    libcall_cnt_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.read)
}

// optional .libcall_types.strchr_t strchr = 19;
bool libcall_t::has_strchr() const {
  return libcall_cnt_case() == kStrchr;
}
void libcall_t::set_has_strchr() {
  _oneof_case_[0] = kStrchr;
}
void libcall_t::clear_strchr() {
  if (has_strchr()) {
    delete libcall_cnt_.strchr_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strchr_t& libcall_t::strchr() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.strchr)
  return has_strchr()
      ? *libcall_cnt_.strchr_
      : ::libcall_types::strchr_t::default_instance();
}
::libcall_types::strchr_t* libcall_t::mutable_strchr() {
  if (!has_strchr()) {
    clear_libcall_cnt();
    set_has_strchr();
    libcall_cnt_.strchr_ = new ::libcall_types::strchr_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.strchr)
  return libcall_cnt_.strchr_;
}
::libcall_types::strchr_t* libcall_t::release_strchr() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.strchr)
  if (has_strchr()) {
    clear_has_libcall_cnt();
    ::libcall_types::strchr_t* temp = libcall_cnt_.strchr_;
    libcall_cnt_.strchr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_strchr(::libcall_types::strchr_t* strchr) {
  clear_libcall_cnt();
  if (strchr) {
    set_has_strchr();
    libcall_cnt_.strchr_ = strchr;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strchr)
}

// optional .libcall_types.exit_t exit = 20;
bool libcall_t::has_exit() const {
  return libcall_cnt_case() == kExit;
}
void libcall_t::set_has_exit() {
  _oneof_case_[0] = kExit;
}
void libcall_t::clear_exit() {
  if (has_exit()) {
    delete libcall_cnt_.exit_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::exit_t& libcall_t::exit() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.exit)
  return has_exit()
      ? *libcall_cnt_.exit_
      : ::libcall_types::exit_t::default_instance();
}
::libcall_types::exit_t* libcall_t::mutable_exit() {
  if (!has_exit()) {
    clear_libcall_cnt();
    set_has_exit();
    libcall_cnt_.exit_ = new ::libcall_types::exit_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.exit)
  return libcall_cnt_.exit_;
}
::libcall_types::exit_t* libcall_t::release_exit() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.exit)
  if (has_exit()) {
    clear_has_libcall_cnt();
    ::libcall_types::exit_t* temp = libcall_cnt_.exit_;
    libcall_cnt_.exit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_exit(::libcall_types::exit_t* exit) {
  clear_libcall_cnt();
  if (exit) {
    set_has_exit();
    libcall_cnt_.exit_ = exit;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.exit)
}

// optional .libcall_types.strcmp_t strcmp = 21;
bool libcall_t::has_strcmp() const {
  return libcall_cnt_case() == kStrcmp;
}
void libcall_t::set_has_strcmp() {
  _oneof_case_[0] = kStrcmp;
}
void libcall_t::clear_strcmp() {
  if (has_strcmp()) {
    delete libcall_cnt_.strcmp_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strcmp_t& libcall_t::strcmp() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.strcmp)
  return has_strcmp()
      ? *libcall_cnt_.strcmp_
      : ::libcall_types::strcmp_t::default_instance();
}
::libcall_types::strcmp_t* libcall_t::mutable_strcmp() {
  if (!has_strcmp()) {
    clear_libcall_cnt();
    set_has_strcmp();
    libcall_cnt_.strcmp_ = new ::libcall_types::strcmp_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.strcmp)
  return libcall_cnt_.strcmp_;
}
::libcall_types::strcmp_t* libcall_t::release_strcmp() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.strcmp)
  if (has_strcmp()) {
    clear_has_libcall_cnt();
    ::libcall_types::strcmp_t* temp = libcall_cnt_.strcmp_;
    libcall_cnt_.strcmp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_strcmp(::libcall_types::strcmp_t* strcmp) {
  clear_libcall_cnt();
  if (strcmp) {
    set_has_strcmp();
    libcall_cnt_.strcmp_ = strcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strcmp)
}

// optional .libcall_types.ctype_b_loc_t ctype_b_loc = 23;
bool libcall_t::has_ctype_b_loc() const {
  return libcall_cnt_case() == kCtypeBLoc;
}
void libcall_t::set_has_ctype_b_loc() {
  _oneof_case_[0] = kCtypeBLoc;
}
void libcall_t::clear_ctype_b_loc() {
  if (has_ctype_b_loc()) {
    delete libcall_cnt_.ctype_b_loc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::ctype_b_loc_t& libcall_t::ctype_b_loc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.ctype_b_loc)
  return has_ctype_b_loc()
      ? *libcall_cnt_.ctype_b_loc_
      : ::libcall_types::ctype_b_loc_t::default_instance();
}
::libcall_types::ctype_b_loc_t* libcall_t::mutable_ctype_b_loc() {
  if (!has_ctype_b_loc()) {
    clear_libcall_cnt();
    set_has_ctype_b_loc();
    libcall_cnt_.ctype_b_loc_ = new ::libcall_types::ctype_b_loc_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.ctype_b_loc)
  return libcall_cnt_.ctype_b_loc_;
}
::libcall_types::ctype_b_loc_t* libcall_t::release_ctype_b_loc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.ctype_b_loc)
  if (has_ctype_b_loc()) {
    clear_has_libcall_cnt();
    ::libcall_types::ctype_b_loc_t* temp = libcall_cnt_.ctype_b_loc_;
    libcall_cnt_.ctype_b_loc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_ctype_b_loc(::libcall_types::ctype_b_loc_t* ctype_b_loc) {
  clear_libcall_cnt();
  if (ctype_b_loc) {
    set_has_ctype_b_loc();
    libcall_cnt_.ctype_b_loc_ = ctype_b_loc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.ctype_b_loc)
}

// optional .libcall_types.fscanf_t fscanf = 24;
bool libcall_t::has_fscanf() const {
  return libcall_cnt_case() == kFscanf;
}
void libcall_t::set_has_fscanf() {
  _oneof_case_[0] = kFscanf;
}
void libcall_t::clear_fscanf() {
  if (has_fscanf()) {
    delete libcall_cnt_.fscanf_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fscanf_t& libcall_t::fscanf() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.fscanf)
  return has_fscanf()
      ? *libcall_cnt_.fscanf_
      : ::libcall_types::fscanf_t::default_instance();
}
::libcall_types::fscanf_t* libcall_t::mutable_fscanf() {
  if (!has_fscanf()) {
    clear_libcall_cnt();
    set_has_fscanf();
    libcall_cnt_.fscanf_ = new ::libcall_types::fscanf_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.fscanf)
  return libcall_cnt_.fscanf_;
}
::libcall_types::fscanf_t* libcall_t::release_fscanf() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.fscanf)
  if (has_fscanf()) {
    clear_has_libcall_cnt();
    ::libcall_types::fscanf_t* temp = libcall_cnt_.fscanf_;
    libcall_cnt_.fscanf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_fscanf(::libcall_types::fscanf_t* fscanf) {
  clear_libcall_cnt();
  if (fscanf) {
    set_has_fscanf();
    libcall_cnt_.fscanf_ = fscanf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fscanf)
}

// optional .libcall_types.strncpy_t strncpy = 25;
bool libcall_t::has_strncpy() const {
  return libcall_cnt_case() == kStrncpy;
}
void libcall_t::set_has_strncpy() {
  _oneof_case_[0] = kStrncpy;
}
void libcall_t::clear_strncpy() {
  if (has_strncpy()) {
    delete libcall_cnt_.strncpy_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strncpy_t& libcall_t::strncpy() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.strncpy)
  return has_strncpy()
      ? *libcall_cnt_.strncpy_
      : ::libcall_types::strncpy_t::default_instance();
}
::libcall_types::strncpy_t* libcall_t::mutable_strncpy() {
  if (!has_strncpy()) {
    clear_libcall_cnt();
    set_has_strncpy();
    libcall_cnt_.strncpy_ = new ::libcall_types::strncpy_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.strncpy)
  return libcall_cnt_.strncpy_;
}
::libcall_types::strncpy_t* libcall_t::release_strncpy() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.strncpy)
  if (has_strncpy()) {
    clear_has_libcall_cnt();
    ::libcall_types::strncpy_t* temp = libcall_cnt_.strncpy_;
    libcall_cnt_.strncpy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_strncpy(::libcall_types::strncpy_t* strncpy) {
  clear_libcall_cnt();
  if (strncpy) {
    set_has_strncpy();
    libcall_cnt_.strncpy_ = strncpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strncpy)
}

// optional .libcall_types.fstat_t fstat = 26;
bool libcall_t::has_fstat() const {
  return libcall_cnt_case() == kFstat;
}
void libcall_t::set_has_fstat() {
  _oneof_case_[0] = kFstat;
}
void libcall_t::clear_fstat() {
  if (has_fstat()) {
    delete libcall_cnt_.fstat_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fstat_t& libcall_t::fstat() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.fstat)
  return has_fstat()
      ? *libcall_cnt_.fstat_
      : ::libcall_types::fstat_t::default_instance();
}
::libcall_types::fstat_t* libcall_t::mutable_fstat() {
  if (!has_fstat()) {
    clear_libcall_cnt();
    set_has_fstat();
    libcall_cnt_.fstat_ = new ::libcall_types::fstat_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.fstat)
  return libcall_cnt_.fstat_;
}
::libcall_types::fstat_t* libcall_t::release_fstat() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.fstat)
  if (has_fstat()) {
    clear_has_libcall_cnt();
    ::libcall_types::fstat_t* temp = libcall_cnt_.fstat_;
    libcall_cnt_.fstat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_fstat(::libcall_types::fstat_t* fstat) {
  clear_libcall_cnt();
  if (fstat) {
    set_has_fstat();
    libcall_cnt_.fstat_ = fstat;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fstat)
}

// optional .libcall_types.realloc_t realloc = 27;
bool libcall_t::has_realloc() const {
  return libcall_cnt_case() == kRealloc;
}
void libcall_t::set_has_realloc() {
  _oneof_case_[0] = kRealloc;
}
void libcall_t::clear_realloc() {
  if (has_realloc()) {
    delete libcall_cnt_.realloc_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::realloc_t& libcall_t::realloc() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.realloc)
  return has_realloc()
      ? *libcall_cnt_.realloc_
      : ::libcall_types::realloc_t::default_instance();
}
::libcall_types::realloc_t* libcall_t::mutable_realloc() {
  if (!has_realloc()) {
    clear_libcall_cnt();
    set_has_realloc();
    libcall_cnt_.realloc_ = new ::libcall_types::realloc_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.realloc)
  return libcall_cnt_.realloc_;
}
::libcall_types::realloc_t* libcall_t::release_realloc() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.realloc)
  if (has_realloc()) {
    clear_has_libcall_cnt();
    ::libcall_types::realloc_t* temp = libcall_cnt_.realloc_;
    libcall_cnt_.realloc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_realloc(::libcall_types::realloc_t* realloc) {
  clear_libcall_cnt();
  if (realloc) {
    set_has_realloc();
    libcall_cnt_.realloc_ = realloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.realloc)
}

// optional .libcall_types.mmap_t mmap = 28;
bool libcall_t::has_mmap() const {
  return libcall_cnt_case() == kMmap;
}
void libcall_t::set_has_mmap() {
  _oneof_case_[0] = kMmap;
}
void libcall_t::clear_mmap() {
  if (has_mmap()) {
    delete libcall_cnt_.mmap_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::mmap_t& libcall_t::mmap() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.mmap)
  return has_mmap()
      ? *libcall_cnt_.mmap_
      : ::libcall_types::mmap_t::default_instance();
}
::libcall_types::mmap_t* libcall_t::mutable_mmap() {
  if (!has_mmap()) {
    clear_libcall_cnt();
    set_has_mmap();
    libcall_cnt_.mmap_ = new ::libcall_types::mmap_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.mmap)
  return libcall_cnt_.mmap_;
}
::libcall_types::mmap_t* libcall_t::release_mmap() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.mmap)
  if (has_mmap()) {
    clear_has_libcall_cnt();
    ::libcall_types::mmap_t* temp = libcall_cnt_.mmap_;
    libcall_cnt_.mmap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_mmap(::libcall_types::mmap_t* mmap) {
  clear_libcall_cnt();
  if (mmap) {
    set_has_mmap();
    libcall_cnt_.mmap_ = mmap;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.mmap)
}

// optional .libcall_types.qsort_t qsort = 29;
bool libcall_t::has_qsort() const {
  return libcall_cnt_case() == kQsort;
}
void libcall_t::set_has_qsort() {
  _oneof_case_[0] = kQsort;
}
void libcall_t::clear_qsort() {
  if (has_qsort()) {
    delete libcall_cnt_.qsort_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::qsort_t& libcall_t::qsort() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.qsort)
  return has_qsort()
      ? *libcall_cnt_.qsort_
      : ::libcall_types::qsort_t::default_instance();
}
::libcall_types::qsort_t* libcall_t::mutable_qsort() {
  if (!has_qsort()) {
    clear_libcall_cnt();
    set_has_qsort();
    libcall_cnt_.qsort_ = new ::libcall_types::qsort_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.qsort)
  return libcall_cnt_.qsort_;
}
::libcall_types::qsort_t* libcall_t::release_qsort() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.qsort)
  if (has_qsort()) {
    clear_has_libcall_cnt();
    ::libcall_types::qsort_t* temp = libcall_cnt_.qsort_;
    libcall_cnt_.qsort_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_qsort(::libcall_types::qsort_t* qsort) {
  clear_libcall_cnt();
  if (qsort) {
    set_has_qsort();
    libcall_cnt_.qsort_ = qsort;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.qsort)
}

// optional .libcall_types.bsearch_t bsearch = 30;
bool libcall_t::has_bsearch() const {
  return libcall_cnt_case() == kBsearch;
}
void libcall_t::set_has_bsearch() {
  _oneof_case_[0] = kBsearch;
}
void libcall_t::clear_bsearch() {
  if (has_bsearch()) {
    delete libcall_cnt_.bsearch_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::bsearch_t& libcall_t::bsearch() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.bsearch)
  return has_bsearch()
      ? *libcall_cnt_.bsearch_
      : ::libcall_types::bsearch_t::default_instance();
}
::libcall_types::bsearch_t* libcall_t::mutable_bsearch() {
  if (!has_bsearch()) {
    clear_libcall_cnt();
    set_has_bsearch();
    libcall_cnt_.bsearch_ = new ::libcall_types::bsearch_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.bsearch)
  return libcall_cnt_.bsearch_;
}
::libcall_types::bsearch_t* libcall_t::release_bsearch() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.bsearch)
  if (has_bsearch()) {
    clear_has_libcall_cnt();
    ::libcall_types::bsearch_t* temp = libcall_cnt_.bsearch_;
    libcall_cnt_.bsearch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_bsearch(::libcall_types::bsearch_t* bsearch) {
  clear_libcall_cnt();
  if (bsearch) {
    set_has_bsearch();
    libcall_cnt_.bsearch_ = bsearch;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.bsearch)
}

// optional .libcall_types.open_t open_stub = 31;
bool libcall_t::has_open_stub() const {
  return libcall_cnt_case() == kOpenStub;
}
void libcall_t::set_has_open_stub() {
  _oneof_case_[0] = kOpenStub;
}
void libcall_t::clear_open_stub() {
  if (has_open_stub()) {
    delete libcall_cnt_.open_stub_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::open_t& libcall_t::open_stub() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.open_stub)
  return has_open_stub()
      ? *libcall_cnt_.open_stub_
      : ::libcall_types::open_t::default_instance();
}
::libcall_types::open_t* libcall_t::mutable_open_stub() {
  if (!has_open_stub()) {
    clear_libcall_cnt();
    set_has_open_stub();
    libcall_cnt_.open_stub_ = new ::libcall_types::open_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.open_stub)
  return libcall_cnt_.open_stub_;
}
::libcall_types::open_t* libcall_t::release_open_stub() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.open_stub)
  if (has_open_stub()) {
    clear_has_libcall_cnt();
    ::libcall_types::open_t* temp = libcall_cnt_.open_stub_;
    libcall_cnt_.open_stub_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_open_stub(::libcall_types::open_t* open_stub) {
  clear_libcall_cnt();
  if (open_stub) {
    set_has_open_stub();
    libcall_cnt_.open_stub_ = open_stub;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.open_stub)
}

// optional .libcall_types.lseek_t lseek = 32;
bool libcall_t::has_lseek() const {
  return libcall_cnt_case() == kLseek;
}
void libcall_t::set_has_lseek() {
  _oneof_case_[0] = kLseek;
}
void libcall_t::clear_lseek() {
  if (has_lseek()) {
    delete libcall_cnt_.lseek_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::lseek_t& libcall_t::lseek() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.lseek)
  return has_lseek()
      ? *libcall_cnt_.lseek_
      : ::libcall_types::lseek_t::default_instance();
}
::libcall_types::lseek_t* libcall_t::mutable_lseek() {
  if (!has_lseek()) {
    clear_libcall_cnt();
    set_has_lseek();
    libcall_cnt_.lseek_ = new ::libcall_types::lseek_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.lseek)
  return libcall_cnt_.lseek_;
}
::libcall_types::lseek_t* libcall_t::release_lseek() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.lseek)
  if (has_lseek()) {
    clear_has_libcall_cnt();
    ::libcall_types::lseek_t* temp = libcall_cnt_.lseek_;
    libcall_cnt_.lseek_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_lseek(::libcall_types::lseek_t* lseek) {
  clear_libcall_cnt();
  if (lseek) {
    set_has_lseek();
    libcall_cnt_.lseek_ = lseek;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.lseek)
}

// optional .libcall_types.fread_t fread = 33;
bool libcall_t::has_fread() const {
  return libcall_cnt_case() == kFread;
}
void libcall_t::set_has_fread() {
  _oneof_case_[0] = kFread;
}
void libcall_t::clear_fread() {
  if (has_fread()) {
    delete libcall_cnt_.fread_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fread_t& libcall_t::fread() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.fread)
  return has_fread()
      ? *libcall_cnt_.fread_
      : ::libcall_types::fread_t::default_instance();
}
::libcall_types::fread_t* libcall_t::mutable_fread() {
  if (!has_fread()) {
    clear_libcall_cnt();
    set_has_fread();
    libcall_cnt_.fread_ = new ::libcall_types::fread_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.fread)
  return libcall_cnt_.fread_;
}
::libcall_types::fread_t* libcall_t::release_fread() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.fread)
  if (has_fread()) {
    clear_has_libcall_cnt();
    ::libcall_types::fread_t* temp = libcall_cnt_.fread_;
    libcall_cnt_.fread_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_fread(::libcall_types::fread_t* fread) {
  clear_libcall_cnt();
  if (fread) {
    set_has_fread();
    libcall_cnt_.fread_ = fread;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fread)
}

// optional .libcall_types.strncmp_t strncmp = 34;
bool libcall_t::has_strncmp() const {
  return libcall_cnt_case() == kStrncmp;
}
void libcall_t::set_has_strncmp() {
  _oneof_case_[0] = kStrncmp;
}
void libcall_t::clear_strncmp() {
  if (has_strncmp()) {
    delete libcall_cnt_.strncmp_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::strncmp_t& libcall_t::strncmp() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.strncmp)
  return has_strncmp()
      ? *libcall_cnt_.strncmp_
      : ::libcall_types::strncmp_t::default_instance();
}
::libcall_types::strncmp_t* libcall_t::mutable_strncmp() {
  if (!has_strncmp()) {
    clear_libcall_cnt();
    set_has_strncmp();
    libcall_cnt_.strncmp_ = new ::libcall_types::strncmp_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.strncmp)
  return libcall_cnt_.strncmp_;
}
::libcall_types::strncmp_t* libcall_t::release_strncmp() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.strncmp)
  if (has_strncmp()) {
    clear_has_libcall_cnt();
    ::libcall_types::strncmp_t* temp = libcall_cnt_.strncmp_;
    libcall_cnt_.strncmp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_strncmp(::libcall_types::strncmp_t* strncmp) {
  clear_libcall_cnt();
  if (strncmp) {
    set_has_strncmp();
    libcall_cnt_.strncmp_ = strncmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strncmp)
}

// optional .libcall_types.memcmp_t memcmp = 35;
bool libcall_t::has_memcmp() const {
  return libcall_cnt_case() == kMemcmp;
}
void libcall_t::set_has_memcmp() {
  _oneof_case_[0] = kMemcmp;
}
void libcall_t::clear_memcmp() {
  if (has_memcmp()) {
    delete libcall_cnt_.memcmp_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::memcmp_t& libcall_t::memcmp() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.memcmp)
  return has_memcmp()
      ? *libcall_cnt_.memcmp_
      : ::libcall_types::memcmp_t::default_instance();
}
::libcall_types::memcmp_t* libcall_t::mutable_memcmp() {
  if (!has_memcmp()) {
    clear_libcall_cnt();
    set_has_memcmp();
    libcall_cnt_.memcmp_ = new ::libcall_types::memcmp_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.memcmp)
  return libcall_cnt_.memcmp_;
}
::libcall_types::memcmp_t* libcall_t::release_memcmp() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.memcmp)
  if (has_memcmp()) {
    clear_has_libcall_cnt();
    ::libcall_types::memcmp_t* temp = libcall_cnt_.memcmp_;
    libcall_cnt_.memcmp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_memcmp(::libcall_types::memcmp_t* memcmp) {
  clear_libcall_cnt();
  if (memcmp) {
    set_has_memcmp();
    libcall_cnt_.memcmp_ = memcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.memcmp)
}

// optional .libcall_types.fxstat64_t fxstat64 = 36;
bool libcall_t::has_fxstat64() const {
  return libcall_cnt_case() == kFxstat64;
}
void libcall_t::set_has_fxstat64() {
  _oneof_case_[0] = kFxstat64;
}
void libcall_t::clear_fxstat64() {
  if (has_fxstat64()) {
    delete libcall_cnt_.fxstat64_;
    clear_has_libcall_cnt();
  }
}
 const ::libcall_types::fxstat64_t& libcall_t::fxstat64() const {
  // @@protoc_insertion_point(field_get:libcall_types.libcall_t.fxstat64)
  return has_fxstat64()
      ? *libcall_cnt_.fxstat64_
      : ::libcall_types::fxstat64_t::default_instance();
}
::libcall_types::fxstat64_t* libcall_t::mutable_fxstat64() {
  if (!has_fxstat64()) {
    clear_libcall_cnt();
    set_has_fxstat64();
    libcall_cnt_.fxstat64_ = new ::libcall_types::fxstat64_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.libcall_t.fxstat64)
  return libcall_cnt_.fxstat64_;
}
::libcall_types::fxstat64_t* libcall_t::release_fxstat64() {
  // @@protoc_insertion_point(field_release:libcall_types.libcall_t.fxstat64)
  if (has_fxstat64()) {
    clear_has_libcall_cnt();
    ::libcall_types::fxstat64_t* temp = libcall_cnt_.fxstat64_;
    libcall_cnt_.fxstat64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void libcall_t::set_allocated_fxstat64(::libcall_types::fxstat64_t* fxstat64) {
  clear_libcall_cnt();
  if (fxstat64) {
    set_has_fxstat64();
    libcall_cnt_.fxstat64_ = fxstat64;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fxstat64)
}

bool libcall_t::has_libcall_cnt() const {
  return libcall_cnt_case() != LIBCALL_CNT_NOT_SET;
}
void libcall_t::clear_has_libcall_cnt() {
  _oneof_case_[0] = LIBCALL_CNT_NOT_SET;
}
libcall_t::LibcallCntCase libcall_t::libcall_cnt_case() const {
  return libcall_t::LibcallCntCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int generic_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

generic_pol::generic_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.generic_pol)
}
generic_pol::generic_pol(const generic_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.generic_pol)
}

void generic_pol::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
}

generic_pol::~generic_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.generic_pol)
  SharedDtor();
}

void generic_pol::SharedDtor() {
}

void generic_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* generic_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[2].descriptor;
}

const generic_pol& generic_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

generic_pol* generic_pol::New(::google::protobuf::Arena* arena) const {
  generic_pol* n = new generic_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void generic_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.generic_pol)
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool generic_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.generic_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action ret = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.generic_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.generic_pol)
  return false;
#undef DO_
}

void generic_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.generic_pol)
  // required .common.action ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.generic_pol)
}

::google::protobuf::uint8* generic_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.generic_pol)
  // required .common.action ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.generic_pol)
  return target;
}

size_t generic_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.generic_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .common.action ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void generic_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.generic_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const generic_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const generic_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.generic_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.generic_pol)
    MergeFrom(*source);
  }
}

void generic_pol::MergeFrom(const generic_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.generic_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ret()) {
    set_ret(from.ret());
  }
}

void generic_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.generic_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generic_pol::CopyFrom(const generic_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.generic_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generic_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void generic_pol::Swap(generic_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void generic_pol::InternalSwap(generic_pol* other) {
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata generic_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// generic_pol

// required .common.action ret = 1;
bool generic_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void generic_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void generic_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void generic_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action generic_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.generic_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void generic_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.generic_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ctype_b_loc_pol::kTableFieldNumber;
const int ctype_b_loc_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ctype_b_loc_pol::ctype_b_loc_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.ctype_b_loc_pol)
}
ctype_b_loc_pol::ctype_b_loc_pol(const ctype_b_loc_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::common::memory_pol(*from.table_);
  } else {
    table_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.ctype_b_loc_pol)
}

void ctype_b_loc_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&table_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&table_) + sizeof(ret_));
}

ctype_b_loc_pol::~ctype_b_loc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.ctype_b_loc_pol)
  SharedDtor();
}

void ctype_b_loc_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete table_;
  }
}

void ctype_b_loc_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ctype_b_loc_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[3].descriptor;
}

const ctype_b_loc_pol& ctype_b_loc_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

ctype_b_loc_pol* ctype_b_loc_pol::New(::google::protobuf::Arena* arena) const {
  ctype_b_loc_pol* n = new ctype_b_loc_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ctype_b_loc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.ctype_b_loc_pol)
  if (has_table()) {
    GOOGLE_DCHECK(table_ != NULL);
    table_->::common::memory_pol::Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ctype_b_loc_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.ctype_b_loc_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol table = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.ctype_b_loc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.ctype_b_loc_pol)
  return false;
#undef DO_
}

void ctype_b_loc_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.ctype_b_loc_pol)
  // required .common.memory_pol table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_, output);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.ctype_b_loc_pol)
}

::google::protobuf::uint8* ctype_b_loc_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.ctype_b_loc_pol)
  // required .common.memory_pol table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->table_, false, target);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.ctype_b_loc_pol)
  return target;
}

size_t ctype_b_loc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.ctype_b_loc_pol)
  size_t total_size = 0;

  if (has_table()) {
    // required .common.memory_pol table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t ctype_b_loc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.ctype_b_loc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);

    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ctype_b_loc_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.ctype_b_loc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const ctype_b_loc_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ctype_b_loc_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.ctype_b_loc_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.ctype_b_loc_pol)
    MergeFrom(*source);
  }
}

void ctype_b_loc_pol::MergeFrom(const ctype_b_loc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.ctype_b_loc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_table()) {
      mutable_table()->::common::memory_pol::MergeFrom(from.table());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void ctype_b_loc_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.ctype_b_loc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctype_b_loc_pol::CopyFrom(const ctype_b_loc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.ctype_b_loc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctype_b_loc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ctype_b_loc_pol::Swap(ctype_b_loc_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ctype_b_loc_pol::InternalSwap(ctype_b_loc_pol* other) {
  std::swap(table_, other->table_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ctype_b_loc_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ctype_b_loc_pol

// required .common.memory_pol table = 1;
bool ctype_b_loc_pol::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ctype_b_loc_pol::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void ctype_b_loc_pol::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void ctype_b_loc_pol::clear_table() {
  if (table_ != NULL) table_->::common::memory_pol::Clear();
  clear_has_table();
}
const ::common::memory_pol& ctype_b_loc_pol::table() const {
  // @@protoc_insertion_point(field_get:libcall_types.ctype_b_loc_pol.table)
  return table_ != NULL ? *table_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* ctype_b_loc_pol::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    table_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.ctype_b_loc_pol.table)
  return table_;
}
::common::memory_pol* ctype_b_loc_pol::release_table() {
  // @@protoc_insertion_point(field_release:libcall_types.ctype_b_loc_pol.table)
  clear_has_table();
  ::common::memory_pol* temp = table_;
  table_ = NULL;
  return temp;
}
void ctype_b_loc_pol::set_allocated_table(::common::memory_pol* table) {
  delete table_;
  table_ = table;
  if (table) {
    set_has_table();
  } else {
    clear_has_table();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.ctype_b_loc_pol.table)
}

// required .common.action ret = 2;
bool ctype_b_loc_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ctype_b_loc_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void ctype_b_loc_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void ctype_b_loc_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action ctype_b_loc_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.ctype_b_loc_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void ctype_b_loc_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.ctype_b_loc_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

exit_pol::exit_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.exit_pol)
}
exit_pol::exit_pol(const exit_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.exit_pol)
}

void exit_pol::SharedCtor() {
  _cached_size_ = 0;
}

exit_pol::~exit_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.exit_pol)
  SharedDtor();
}

void exit_pol::SharedDtor() {
}

void exit_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[4].descriptor;
}

const exit_pol& exit_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

exit_pol* exit_pol::New(::google::protobuf::Arena* arena) const {
  exit_pol* n = new exit_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void exit_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.exit_pol)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool exit_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.exit_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.exit_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.exit_pol)
  return false;
#undef DO_
}

void exit_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.exit_pol)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.exit_pol)
}

::google::protobuf::uint8* exit_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.exit_pol)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.exit_pol)
  return target;
}

size_t exit_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.exit_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.exit_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const exit_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.exit_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.exit_pol)
    MergeFrom(*source);
  }
}

void exit_pol::MergeFrom(const exit_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.exit_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void exit_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.exit_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_pol::CopyFrom(const exit_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.exit_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_pol::IsInitialized() const {
  return true;
}

void exit_pol::Swap(exit_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void exit_pol::InternalSwap(exit_pol* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata exit_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// exit_pol

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fscanf_pol::kStreamFieldNumber;
const int fscanf_pol::kElemsFieldNumber;
const int fscanf_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fscanf_pol::fscanf_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fscanf_pol)
}
fscanf_pol::fscanf_pol(const fscanf_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fscanf_pol)
}

void fscanf_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
}

fscanf_pol::~fscanf_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fscanf_pol)
  SharedDtor();
}

void fscanf_pol::SharedDtor() {
}

void fscanf_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fscanf_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[5].descriptor;
}

const fscanf_pol& fscanf_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fscanf_pol* fscanf_pol::New(::google::protobuf::Arena* arena) const {
  fscanf_pol* n = new fscanf_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fscanf_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fscanf_pol)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fscanf_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fscanf_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action stream = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_stream(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action elems = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_elems(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fscanf_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fscanf_pol)
  return false;
#undef DO_
}

void fscanf_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fscanf_pol)
  // required .common.action stream = 1;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stream(), output);
  }

  // required .common.action elems = 2;
  if (has_elems()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->elems(), output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fscanf_pol)
}

::google::protobuf::uint8* fscanf_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fscanf_pol)
  // required .common.action stream = 1;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stream(), target);
  }

  // required .common.action elems = 2;
  if (has_elems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->elems(), target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fscanf_pol)
  return target;
}

size_t fscanf_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fscanf_pol)
  size_t total_size = 0;

  if (has_stream()) {
    // required .common.action stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream());
  }

  if (has_elems()) {
    // required .common.action elems = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->elems());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t fscanf_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fscanf_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.action stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream());

    // required .common.action elems = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->elems());

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fscanf_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fscanf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fscanf_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fscanf_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fscanf_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fscanf_pol)
    MergeFrom(*source);
  }
}

void fscanf_pol::MergeFrom(const fscanf_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fscanf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_elems()) {
      set_elems(from.elems());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fscanf_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fscanf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fscanf_pol::CopyFrom(const fscanf_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fscanf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fscanf_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void fscanf_pol::Swap(fscanf_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fscanf_pol::InternalSwap(fscanf_pol* other) {
  std::swap(stream_, other->stream_);
  std::swap(elems_, other->elems_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fscanf_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fscanf_pol

// required .common.action stream = 1;
bool fscanf_pol::has_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fscanf_pol::set_has_stream() {
  _has_bits_[0] |= 0x00000001u;
}
void fscanf_pol::clear_has_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
void fscanf_pol::clear_stream() {
  stream_ = 0;
  clear_has_stream();
}
::common::action fscanf_pol::stream() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_pol.stream)
  return static_cast< ::common::action >(stream_);
}
void fscanf_pol::set_stream(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_stream();
  stream_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_pol.stream)
}

// required .common.action elems = 2;
bool fscanf_pol::has_elems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fscanf_pol::set_has_elems() {
  _has_bits_[0] |= 0x00000002u;
}
void fscanf_pol::clear_has_elems() {
  _has_bits_[0] &= ~0x00000002u;
}
void fscanf_pol::clear_elems() {
  elems_ = 0;
  clear_has_elems();
}
::common::action fscanf_pol::elems() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_pol.elems)
  return static_cast< ::common::action >(elems_);
}
void fscanf_pol::set_elems(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_elems();
  elems_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_pol.elems)
}

// required .common.action ret = 3;
bool fscanf_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fscanf_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void fscanf_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void fscanf_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action fscanf_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void fscanf_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int read_pol::kFdFieldNumber;
const int read_pol::kBufFieldNumber;
const int read_pol::kCountFieldNumber;
const int read_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

read_pol::read_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.read_pol)
}
read_pol::read_pol(const read_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_pol(*from.buf_);
  } else {
    buf_ = NULL;
  }
  ::memcpy(&fd_, &from.fd_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.read_pol)
}

void read_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buf_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&buf_) + sizeof(ret_));
}

read_pol::~read_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.read_pol)
  SharedDtor();
}

void read_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buf_;
  }
}

void read_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* read_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[6].descriptor;
}

const read_pol& read_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

read_pol* read_pol::New(::google::protobuf::Arena* arena) const {
  read_pol* n = new read_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void read_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.read_pol)
  if (has_buf()) {
    GOOGLE_DCHECK(buf_ != NULL);
    buf_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool read_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.read_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action fd = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_fd(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol buf = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action count = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_count(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.read_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.read_pol)
  return false;
#undef DO_
}

void read_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.read_pol)
  // required .common.action fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fd(), output);
  }

  // required .common.memory_pol buf = 2;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->buf_, output);
  }

  // required .common.action count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->count(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.read_pol)
}

::google::protobuf::uint8* read_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.read_pol)
  // required .common.action fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fd(), target);
  }

  // required .common.memory_pol buf = 2;
  if (has_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->buf_, false, target);
  }

  // required .common.action count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->count(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.read_pol)
  return target;
}

size_t read_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.read_pol)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_pol buf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);
  }

  if (has_fd()) {
    // required .common.action fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fd());
  }

  if (has_count()) {
    // required .common.action count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->count());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t read_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.read_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol buf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);

    // required .common.action fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fd());

    // required .common.action count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->count());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void read_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const read_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const read_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.read_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.read_pol)
    MergeFrom(*source);
  }
}

void read_pol::MergeFrom(const read_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_buf()) {
      mutable_buf()->::common::memory_pol::MergeFrom(from.buf());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void read_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_pol::CopyFrom(const read_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void read_pol::Swap(read_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void read_pol::InternalSwap(read_pol* other) {
  std::swap(buf_, other->buf_);
  std::swap(fd_, other->fd_);
  std::swap(count_, other->count_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata read_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// read_pol

// required .common.action fd = 1;
bool read_pol::has_fd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void read_pol::set_has_fd() {
  _has_bits_[0] |= 0x00000002u;
}
void read_pol::clear_has_fd() {
  _has_bits_[0] &= ~0x00000002u;
}
void read_pol::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
::common::action read_pol::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_pol.fd)
  return static_cast< ::common::action >(fd_);
}
void read_pol::set_fd(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.read_pol.fd)
}

// required .common.memory_pol buf = 2;
bool read_pol::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void read_pol::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
void read_pol::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
void read_pol::clear_buf() {
  if (buf_ != NULL) buf_->::common::memory_pol::Clear();
  clear_has_buf();
}
const ::common::memory_pol& read_pol::buf() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_pol.buf)
  return buf_ != NULL ? *buf_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* read_pol::mutable_buf() {
  set_has_buf();
  if (buf_ == NULL) {
    buf_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.read_pol.buf)
  return buf_;
}
::common::memory_pol* read_pol::release_buf() {
  // @@protoc_insertion_point(field_release:libcall_types.read_pol.buf)
  clear_has_buf();
  ::common::memory_pol* temp = buf_;
  buf_ = NULL;
  return temp;
}
void read_pol::set_allocated_buf(::common::memory_pol* buf) {
  delete buf_;
  buf_ = buf;
  if (buf) {
    set_has_buf();
  } else {
    clear_has_buf();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.read_pol.buf)
}

// required .common.action count = 3;
bool read_pol::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void read_pol::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void read_pol::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void read_pol::clear_count() {
  count_ = 0;
  clear_has_count();
}
::common::action read_pol::count() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_pol.count)
  return static_cast< ::common::action >(count_);
}
void read_pol::set_count(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.read_pol.count)
}

// required .common.action ret = 4;
bool read_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void read_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void read_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void read_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action read_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void read_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.read_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fread_pol::kPtrFieldNumber;
const int fread_pol::kSizeFieldNumber;
const int fread_pol::kNmembFieldNumber;
const int fread_pol::kStreamFieldNumber;
const int fread_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fread_pol::fread_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fread_pol)
}
fread_pol::fread_pol(const fread_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptr()) {
    ptr_ = new ::common::memory_pol(*from.ptr_);
  } else {
    ptr_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fread_pol)
}

void fread_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ptr_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
}

fread_pol::~fread_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fread_pol)
  SharedDtor();
}

void fread_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ptr_;
  }
}

void fread_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fread_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[7].descriptor;
}

const fread_pol& fread_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fread_pol* fread_pol::New(::google::protobuf::Arena* arena) const {
  fread_pol* n = new fread_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fread_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fread_pol)
  if (has_ptr()) {
    GOOGLE_DCHECK(ptr_ != NULL);
    ptr_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fread_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fread_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol ptr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ptr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action nmemb = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_nmemb(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action stream = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_stream(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fread_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fread_pol)
  return false;
#undef DO_
}

void fread_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fread_pol)
  // required .common.memory_pol ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ptr_, output);
  }

  // required .common.action size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->size(), output);
  }

  // required .common.action nmemb = 3;
  if (has_nmemb()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nmemb(), output);
  }

  // required .common.action stream = 4;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stream(), output);
  }

  // required .common.action ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fread_pol)
}

::google::protobuf::uint8* fread_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fread_pol)
  // required .common.memory_pol ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ptr_, false, target);
  }

  // required .common.action size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->size(), target);
  }

  // required .common.action nmemb = 3;
  if (has_nmemb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->nmemb(), target);
  }

  // required .common.action stream = 4;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->stream(), target);
  }

  // required .common.action ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fread_pol)
  return target;
}

size_t fread_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fread_pol)
  size_t total_size = 0;

  if (has_ptr()) {
    // required .common.memory_pol ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ptr_);
  }

  if (has_size()) {
    // required .common.action size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_nmemb()) {
    // required .common.action nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmemb());
  }

  if (has_stream()) {
    // required .common.action stream = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream());
  }

  if (has_ret()) {
    // required .common.action ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t fread_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fread_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .common.memory_pol ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ptr_);

    // required .common.action size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmemb());

    // required .common.action stream = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream());

    // required .common.action ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fread_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fread_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fread_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fread_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fread_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fread_pol)
    MergeFrom(*source);
  }
}

void fread_pol::MergeFrom(const fread_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fread_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_ptr()) {
      mutable_ptr()->::common::memory_pol::MergeFrom(from.ptr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_nmemb()) {
      set_nmemb(from.nmemb());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fread_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fread_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fread_pol::CopyFrom(const fread_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fread_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fread_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void fread_pol::Swap(fread_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fread_pol::InternalSwap(fread_pol* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(size_, other->size_);
  std::swap(nmemb_, other->nmemb_);
  std::swap(stream_, other->stream_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fread_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fread_pol

// required .common.memory_pol ptr = 1;
bool fread_pol::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fread_pol::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
void fread_pol::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
void fread_pol::clear_ptr() {
  if (ptr_ != NULL) ptr_->::common::memory_pol::Clear();
  clear_has_ptr();
}
const ::common::memory_pol& fread_pol::ptr() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_pol.ptr)
  return ptr_ != NULL ? *ptr_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* fread_pol::mutable_ptr() {
  set_has_ptr();
  if (ptr_ == NULL) {
    ptr_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.fread_pol.ptr)
  return ptr_;
}
::common::memory_pol* fread_pol::release_ptr() {
  // @@protoc_insertion_point(field_release:libcall_types.fread_pol.ptr)
  clear_has_ptr();
  ::common::memory_pol* temp = ptr_;
  ptr_ = NULL;
  return temp;
}
void fread_pol::set_allocated_ptr(::common::memory_pol* ptr) {
  delete ptr_;
  ptr_ = ptr;
  if (ptr) {
    set_has_ptr();
  } else {
    clear_has_ptr();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.fread_pol.ptr)
}

// required .common.action size = 2;
bool fread_pol::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fread_pol::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void fread_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void fread_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action fread_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_pol.size)
  return static_cast< ::common::action >(size_);
}
void fread_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_pol.size)
}

// required .common.action nmemb = 3;
bool fread_pol::has_nmemb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fread_pol::set_has_nmemb() {
  _has_bits_[0] |= 0x00000004u;
}
void fread_pol::clear_has_nmemb() {
  _has_bits_[0] &= ~0x00000004u;
}
void fread_pol::clear_nmemb() {
  nmemb_ = 0;
  clear_has_nmemb();
}
::common::action fread_pol::nmemb() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_pol.nmemb)
  return static_cast< ::common::action >(nmemb_);
}
void fread_pol::set_nmemb(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_nmemb();
  nmemb_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_pol.nmemb)
}

// required .common.action stream = 4;
bool fread_pol::has_stream() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fread_pol::set_has_stream() {
  _has_bits_[0] |= 0x00000008u;
}
void fread_pol::clear_has_stream() {
  _has_bits_[0] &= ~0x00000008u;
}
void fread_pol::clear_stream() {
  stream_ = 0;
  clear_has_stream();
}
::common::action fread_pol::stream() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_pol.stream)
  return static_cast< ::common::action >(stream_);
}
void fread_pol::set_stream(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_stream();
  stream_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_pol.stream)
}

// required .common.action ret = 5;
bool fread_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void fread_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
void fread_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
void fread_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action fread_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void fread_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strcmp_pol::kSrcFieldNumber;
const int strcmp_pol::kDstFieldNumber;
const int strcmp_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strcmp_pol::strcmp_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcmp_pol)
}
strcmp_pol::strcmp_pol(const strcmp_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = NULL;
  }
  if (from.has_dst()) {
    dst_ = new ::common::memory_pol(*from.dst_);
  } else {
    dst_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcmp_pol)
}

void strcmp_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&src_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&src_) + sizeof(ret_));
}

strcmp_pol::~strcmp_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strcmp_pol)
  SharedDtor();
}

void strcmp_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete src_;
  }
  if (this != internal_default_instance()) {
    delete dst_;
  }
}

void strcmp_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strcmp_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[8].descriptor;
}

const strcmp_pol& strcmp_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strcmp_pol* strcmp_pol::New(::google::protobuf::Arena* arena) const {
  strcmp_pol* n = new strcmp_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strcmp_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcmp_pol)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_src()) {
      GOOGLE_DCHECK(src_ != NULL);
      src_->::common::memory_pol::Clear();
    }
    if (has_dst()) {
      GOOGLE_DCHECK(dst_ != NULL);
      dst_->::common::memory_pol::Clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strcmp_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcmp_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol src = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol dst = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcmp_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcmp_pol)
  return false;
#undef DO_
}

void strcmp_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcmp_pol)
  // required .common.memory_pol src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->src_, output);
  }

  // required .common.memory_pol dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dst_, output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcmp_pol)
}

::google::protobuf::uint8* strcmp_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcmp_pol)
  // required .common.memory_pol src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->src_, false, target);
  }

  // required .common.memory_pol dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dst_, false, target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcmp_pol)
  return target;
}

size_t strcmp_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcmp_pol)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_dst()) {
    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dst_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strcmp_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcmp_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dst_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strcmp_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strcmp_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strcmp_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcmp_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcmp_pol)
    MergeFrom(*source);
  }
}

void strcmp_pol::MergeFrom(const strcmp_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_src()) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (from.has_dst()) {
      mutable_dst()->::common::memory_pol::MergeFrom(from.dst());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strcmp_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcmp_pol::CopyFrom(const strcmp_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcmp_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void strcmp_pol::Swap(strcmp_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strcmp_pol::InternalSwap(strcmp_pol* other) {
  std::swap(src_, other->src_);
  std::swap(dst_, other->dst_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strcmp_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strcmp_pol

// required .common.memory_pol src = 1;
bool strcmp_pol::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strcmp_pol::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void strcmp_pol::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void strcmp_pol::clear_src() {
  if (src_ != NULL) src_->::common::memory_pol::Clear();
  clear_has_src();
}
const ::common::memory_pol& strcmp_pol::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_pol.src)
  return src_ != NULL ? *src_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* strcmp_pol::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strcmp_pol.src)
  return src_;
}
::common::memory_pol* strcmp_pol::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.strcmp_pol.src)
  clear_has_src();
  ::common::memory_pol* temp = src_;
  src_ = NULL;
  return temp;
}
void strcmp_pol::set_allocated_src(::common::memory_pol* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strcmp_pol.src)
}

// required .common.memory_pol dst = 2;
bool strcmp_pol::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strcmp_pol::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
void strcmp_pol::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
void strcmp_pol::clear_dst() {
  if (dst_ != NULL) dst_->::common::memory_pol::Clear();
  clear_has_dst();
}
const ::common::memory_pol& strcmp_pol::dst() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_pol.dst)
  return dst_ != NULL ? *dst_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* strcmp_pol::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    dst_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strcmp_pol.dst)
  return dst_;
}
::common::memory_pol* strcmp_pol::release_dst() {
  // @@protoc_insertion_point(field_release:libcall_types.strcmp_pol.dst)
  clear_has_dst();
  ::common::memory_pol* temp = dst_;
  dst_ = NULL;
  return temp;
}
void strcmp_pol::set_allocated_dst(::common::memory_pol* dst) {
  delete dst_;
  dst_ = dst;
  if (dst) {
    set_has_dst();
  } else {
    clear_has_dst();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strcmp_pol.dst)
}

// required .common.action ret = 3;
bool strcmp_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strcmp_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void strcmp_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void strcmp_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action strcmp_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void strcmp_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcmp_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strncmp_pol::kS1FieldNumber;
const int strncmp_pol::kS2FieldNumber;
const int strncmp_pol::kNFieldNumber;
const int strncmp_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strncmp_pol::strncmp_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncmp_pol)
}
strncmp_pol::strncmp_pol(const strncmp_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncmp_pol)
}

void strncmp_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
}

strncmp_pol::~strncmp_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strncmp_pol)
  SharedDtor();
}

void strncmp_pol::SharedDtor() {
}

void strncmp_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strncmp_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[9].descriptor;
}

const strncmp_pol& strncmp_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strncmp_pol* strncmp_pol::New(::google::protobuf::Arena* arena) const {
  strncmp_pol* n = new strncmp_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strncmp_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncmp_pol)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strncmp_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncmp_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action s1 = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s1(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action s2 = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s2(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action n = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_n(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncmp_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncmp_pol)
  return false;
#undef DO_
}

void strncmp_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncmp_pol)
  // required .common.action s1 = 1;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->s1(), output);
  }

  // required .common.action s2 = 2;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->s2(), output);
  }

  // required .common.action n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->n(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncmp_pol)
}

::google::protobuf::uint8* strncmp_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncmp_pol)
  // required .common.action s1 = 1;
  if (has_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->s1(), target);
  }

  // required .common.action s2 = 2;
  if (has_s2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->s2(), target);
  }

  // required .common.action n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->n(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncmp_pol)
  return target;
}

size_t strncmp_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncmp_pol)
  size_t total_size = 0;

  if (has_s1()) {
    // required .common.action s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s1());
  }

  if (has_s2()) {
    // required .common.action s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s2());
  }

  if (has_n()) {
    // required .common.action n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->n());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strncmp_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncmp_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s1());

    // required .common.action s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s2());

    // required .common.action n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->n());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strncmp_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strncmp_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strncmp_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncmp_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncmp_pol)
    MergeFrom(*source);
  }
}

void strncmp_pol::MergeFrom(const strncmp_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strncmp_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncmp_pol::CopyFrom(const strncmp_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncmp_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncmp_pol::Swap(strncmp_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strncmp_pol::InternalSwap(strncmp_pol* other) {
  std::swap(s1_, other->s1_);
  std::swap(s2_, other->s2_);
  std::swap(n_, other->n_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strncmp_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strncmp_pol

// required .common.action s1 = 1;
bool strncmp_pol::has_s1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strncmp_pol::set_has_s1() {
  _has_bits_[0] |= 0x00000001u;
}
void strncmp_pol::clear_has_s1() {
  _has_bits_[0] &= ~0x00000001u;
}
void strncmp_pol::clear_s1() {
  s1_ = 0;
  clear_has_s1();
}
::common::action strncmp_pol::s1() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_pol.s1)
  return static_cast< ::common::action >(s1_);
}
void strncmp_pol::set_s1(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_s1();
  s1_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_pol.s1)
}

// required .common.action s2 = 2;
bool strncmp_pol::has_s2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strncmp_pol::set_has_s2() {
  _has_bits_[0] |= 0x00000002u;
}
void strncmp_pol::clear_has_s2() {
  _has_bits_[0] &= ~0x00000002u;
}
void strncmp_pol::clear_s2() {
  s2_ = 0;
  clear_has_s2();
}
::common::action strncmp_pol::s2() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_pol.s2)
  return static_cast< ::common::action >(s2_);
}
void strncmp_pol::set_s2(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_s2();
  s2_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_pol.s2)
}

// required .common.action n = 3;
bool strncmp_pol::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strncmp_pol::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void strncmp_pol::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void strncmp_pol::clear_n() {
  n_ = 0;
  clear_has_n();
}
::common::action strncmp_pol::n() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_pol.n)
  return static_cast< ::common::action >(n_);
}
void strncmp_pol::set_n(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_pol.n)
}

// required .common.action ret = 4;
bool strncmp_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void strncmp_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void strncmp_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void strncmp_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action strncmp_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void strncmp_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memcmp_pol::kS1FieldNumber;
const int memcmp_pol::kS2FieldNumber;
const int memcmp_pol::kNFieldNumber;
const int memcmp_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memcmp_pol::memcmp_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcmp_pol)
}
memcmp_pol::memcmp_pol(const memcmp_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcmp_pol)
}

void memcmp_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
}

memcmp_pol::~memcmp_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.memcmp_pol)
  SharedDtor();
}

void memcmp_pol::SharedDtor() {
}

void memcmp_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memcmp_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[10].descriptor;
}

const memcmp_pol& memcmp_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

memcmp_pol* memcmp_pol::New(::google::protobuf::Arena* arena) const {
  memcmp_pol* n = new memcmp_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memcmp_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcmp_pol)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool memcmp_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcmp_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action s1 = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s1(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action s2 = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s2(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action n = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_n(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcmp_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcmp_pol)
  return false;
#undef DO_
}

void memcmp_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcmp_pol)
  // required .common.action s1 = 1;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->s1(), output);
  }

  // required .common.action s2 = 2;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->s2(), output);
  }

  // required .common.action n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->n(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcmp_pol)
}

::google::protobuf::uint8* memcmp_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcmp_pol)
  // required .common.action s1 = 1;
  if (has_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->s1(), target);
  }

  // required .common.action s2 = 2;
  if (has_s2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->s2(), target);
  }

  // required .common.action n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->n(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcmp_pol)
  return target;
}

size_t memcmp_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcmp_pol)
  size_t total_size = 0;

  if (has_s1()) {
    // required .common.action s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s1());
  }

  if (has_s2()) {
    // required .common.action s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s2());
  }

  if (has_n()) {
    // required .common.action n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->n());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t memcmp_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcmp_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s1());

    // required .common.action s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->s2());

    // required .common.action n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->n());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memcmp_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const memcmp_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const memcmp_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcmp_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcmp_pol)
    MergeFrom(*source);
  }
}

void memcmp_pol::MergeFrom(const memcmp_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void memcmp_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcmp_pol::CopyFrom(const memcmp_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcmp_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memcmp_pol::Swap(memcmp_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memcmp_pol::InternalSwap(memcmp_pol* other) {
  std::swap(s1_, other->s1_);
  std::swap(s2_, other->s2_);
  std::swap(n_, other->n_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memcmp_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memcmp_pol

// required .common.action s1 = 1;
bool memcmp_pol::has_s1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void memcmp_pol::set_has_s1() {
  _has_bits_[0] |= 0x00000001u;
}
void memcmp_pol::clear_has_s1() {
  _has_bits_[0] &= ~0x00000001u;
}
void memcmp_pol::clear_s1() {
  s1_ = 0;
  clear_has_s1();
}
::common::action memcmp_pol::s1() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_pol.s1)
  return static_cast< ::common::action >(s1_);
}
void memcmp_pol::set_s1(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_s1();
  s1_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_pol.s1)
}

// required .common.action s2 = 2;
bool memcmp_pol::has_s2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void memcmp_pol::set_has_s2() {
  _has_bits_[0] |= 0x00000002u;
}
void memcmp_pol::clear_has_s2() {
  _has_bits_[0] &= ~0x00000002u;
}
void memcmp_pol::clear_s2() {
  s2_ = 0;
  clear_has_s2();
}
::common::action memcmp_pol::s2() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_pol.s2)
  return static_cast< ::common::action >(s2_);
}
void memcmp_pol::set_s2(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_s2();
  s2_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_pol.s2)
}

// required .common.action n = 3;
bool memcmp_pol::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void memcmp_pol::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void memcmp_pol::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void memcmp_pol::clear_n() {
  n_ = 0;
  clear_has_n();
}
::common::action memcmp_pol::n() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_pol.n)
  return static_cast< ::common::action >(n_);
}
void memcmp_pol::set_n(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_pol.n)
}

// required .common.action ret = 4;
bool memcmp_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void memcmp_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void memcmp_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void memcmp_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action memcmp_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void memcmp_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strchr_pol::kScFieldNumber;
const int strchr_pol::kCFieldNumber;
const int strchr_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strchr_pol::strchr_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strchr_pol)
}
strchr_pol::strchr_pol(const strchr_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sc()) {
    sc_ = new ::common::memory_pol(*from.sc_);
  } else {
    sc_ = NULL;
  }
  if (from.has_c()) {
    c_ = new ::common::memory_pol(*from.c_);
  } else {
    c_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strchr_pol)
}

void strchr_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sc_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&sc_) + sizeof(ret_));
}

strchr_pol::~strchr_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strchr_pol)
  SharedDtor();
}

void strchr_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete sc_;
  }
  if (this != internal_default_instance()) {
    delete c_;
  }
}

void strchr_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strchr_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[11].descriptor;
}

const strchr_pol& strchr_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strchr_pol* strchr_pol::New(::google::protobuf::Arena* arena) const {
  strchr_pol* n = new strchr_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strchr_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strchr_pol)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sc()) {
      GOOGLE_DCHECK(sc_ != NULL);
      sc_->::common::memory_pol::Clear();
    }
    if (has_c()) {
      GOOGLE_DCHECK(c_ != NULL);
      c_->::common::memory_pol::Clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strchr_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strchr_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol sc = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol c = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strchr_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strchr_pol)
  return false;
#undef DO_
}

void strchr_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strchr_pol)
  // required .common.memory_pol sc = 1;
  if (has_sc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sc_, output);
  }

  // required .common.memory_pol c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->c_, output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strchr_pol)
}

::google::protobuf::uint8* strchr_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strchr_pol)
  // required .common.memory_pol sc = 1;
  if (has_sc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sc_, false, target);
  }

  // required .common.memory_pol c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->c_, false, target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strchr_pol)
  return target;
}

size_t strchr_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strchr_pol)
  size_t total_size = 0;

  if (has_sc()) {
    // required .common.memory_pol sc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sc_);
  }

  if (has_c()) {
    // required .common.memory_pol c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->c_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strchr_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strchr_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol sc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sc_);

    // required .common.memory_pol c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->c_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strchr_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strchr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strchr_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strchr_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strchr_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strchr_pol)
    MergeFrom(*source);
  }
}

void strchr_pol::MergeFrom(const strchr_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strchr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_sc()) {
      mutable_sc()->::common::memory_pol::MergeFrom(from.sc());
    }
    if (from.has_c()) {
      mutable_c()->::common::memory_pol::MergeFrom(from.c());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strchr_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strchr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strchr_pol::CopyFrom(const strchr_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strchr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strchr_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void strchr_pol::Swap(strchr_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strchr_pol::InternalSwap(strchr_pol* other) {
  std::swap(sc_, other->sc_);
  std::swap(c_, other->c_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strchr_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strchr_pol

// required .common.memory_pol sc = 1;
bool strchr_pol::has_sc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strchr_pol::set_has_sc() {
  _has_bits_[0] |= 0x00000001u;
}
void strchr_pol::clear_has_sc() {
  _has_bits_[0] &= ~0x00000001u;
}
void strchr_pol::clear_sc() {
  if (sc_ != NULL) sc_->::common::memory_pol::Clear();
  clear_has_sc();
}
const ::common::memory_pol& strchr_pol::sc() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_pol.sc)
  return sc_ != NULL ? *sc_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* strchr_pol::mutable_sc() {
  set_has_sc();
  if (sc_ == NULL) {
    sc_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strchr_pol.sc)
  return sc_;
}
::common::memory_pol* strchr_pol::release_sc() {
  // @@protoc_insertion_point(field_release:libcall_types.strchr_pol.sc)
  clear_has_sc();
  ::common::memory_pol* temp = sc_;
  sc_ = NULL;
  return temp;
}
void strchr_pol::set_allocated_sc(::common::memory_pol* sc) {
  delete sc_;
  sc_ = sc;
  if (sc) {
    set_has_sc();
  } else {
    clear_has_sc();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strchr_pol.sc)
}

// required .common.memory_pol c = 2;
bool strchr_pol::has_c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strchr_pol::set_has_c() {
  _has_bits_[0] |= 0x00000002u;
}
void strchr_pol::clear_has_c() {
  _has_bits_[0] &= ~0x00000002u;
}
void strchr_pol::clear_c() {
  if (c_ != NULL) c_->::common::memory_pol::Clear();
  clear_has_c();
}
const ::common::memory_pol& strchr_pol::c() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_pol.c)
  return c_ != NULL ? *c_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* strchr_pol::mutable_c() {
  set_has_c();
  if (c_ == NULL) {
    c_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strchr_pol.c)
  return c_;
}
::common::memory_pol* strchr_pol::release_c() {
  // @@protoc_insertion_point(field_release:libcall_types.strchr_pol.c)
  clear_has_c();
  ::common::memory_pol* temp = c_;
  c_ = NULL;
  return temp;
}
void strchr_pol::set_allocated_c(::common::memory_pol* c) {
  delete c_;
  c_ = c;
  if (c) {
    set_has_c();
  } else {
    clear_has_c();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strchr_pol.c)
}

// required .common.action ret = 3;
bool strchr_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strchr_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void strchr_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void strchr_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action strchr_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void strchr_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strchr_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strncpy_pol::kDstFieldNumber;
const int strncpy_pol::kSrcFieldNumber;
const int strncpy_pol::kNFieldNumber;
const int strncpy_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strncpy_pol::strncpy_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncpy_pol)
}
strncpy_pol::strncpy_pol(const strncpy_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dst_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncpy_pol)
}

void strncpy_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dst_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dst_) + sizeof(ret_));
}

strncpy_pol::~strncpy_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strncpy_pol)
  SharedDtor();
}

void strncpy_pol::SharedDtor() {
}

void strncpy_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strncpy_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[12].descriptor;
}

const strncpy_pol& strncpy_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strncpy_pol* strncpy_pol::New(::google::protobuf::Arena* arena) const {
  strncpy_pol* n = new strncpy_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strncpy_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncpy_pol)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&dst_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dst_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strncpy_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncpy_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action dst = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_dst(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action src = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_src(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action n = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_n(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncpy_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncpy_pol)
  return false;
#undef DO_
}

void strncpy_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncpy_pol)
  // required .common.action dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dst(), output);
  }

  // required .common.action src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->src(), output);
  }

  // required .common.action n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->n(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncpy_pol)
}

::google::protobuf::uint8* strncpy_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncpy_pol)
  // required .common.action dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dst(), target);
  }

  // required .common.action src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->src(), target);
  }

  // required .common.action n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->n(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncpy_pol)
  return target;
}

size_t strncpy_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncpy_pol)
  size_t total_size = 0;

  if (has_dst()) {
    // required .common.action dst = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst());
  }

  if (has_src()) {
    // required .common.action src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());
  }

  if (has_n()) {
    // required .common.action n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->n());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strncpy_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncpy_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action dst = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst());

    // required .common.action src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->src());

    // required .common.action n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->n());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strncpy_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strncpy_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strncpy_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncpy_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncpy_pol)
    MergeFrom(*source);
  }
}

void strncpy_pol::MergeFrom(const strncpy_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strncpy_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncpy_pol::CopyFrom(const strncpy_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncpy_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncpy_pol::Swap(strncpy_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strncpy_pol::InternalSwap(strncpy_pol* other) {
  std::swap(dst_, other->dst_);
  std::swap(src_, other->src_);
  std::swap(n_, other->n_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strncpy_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strncpy_pol

// required .common.action dst = 1;
bool strncpy_pol::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strncpy_pol::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
void strncpy_pol::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
void strncpy_pol::clear_dst() {
  dst_ = 0;
  clear_has_dst();
}
::common::action strncpy_pol::dst() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_pol.dst)
  return static_cast< ::common::action >(dst_);
}
void strncpy_pol::set_dst(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_dst();
  dst_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_pol.dst)
}

// required .common.action src = 2;
bool strncpy_pol::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strncpy_pol::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
void strncpy_pol::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
void strncpy_pol::clear_src() {
  src_ = 0;
  clear_has_src();
}
::common::action strncpy_pol::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_pol.src)
  return static_cast< ::common::action >(src_);
}
void strncpy_pol::set_src(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_pol.src)
}

// required .common.action n = 3;
bool strncpy_pol::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strncpy_pol::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void strncpy_pol::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void strncpy_pol::clear_n() {
  n_ = 0;
  clear_has_n();
}
::common::action strncpy_pol::n() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_pol.n)
  return static_cast< ::common::action >(n_);
}
void strncpy_pol::set_n(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_pol.n)
}

// required .common.action ret = 4;
bool strncpy_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void strncpy_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void strncpy_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void strncpy_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action strncpy_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void strncpy_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fstat_pol::fstat_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fstat_pol)
}
fstat_pol::fstat_pol(const fstat_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.fstat_pol)
}

void fstat_pol::SharedCtor() {
  _cached_size_ = 0;
}

fstat_pol::~fstat_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fstat_pol)
  SharedDtor();
}

void fstat_pol::SharedDtor() {
}

void fstat_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fstat_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[13].descriptor;
}

const fstat_pol& fstat_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fstat_pol* fstat_pol::New(::google::protobuf::Arena* arena) const {
  fstat_pol* n = new fstat_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fstat_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fstat_pol)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fstat_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fstat_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fstat_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fstat_pol)
  return false;
#undef DO_
}

void fstat_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fstat_pol)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fstat_pol)
}

::google::protobuf::uint8* fstat_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fstat_pol)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fstat_pol)
  return target;
}

size_t fstat_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fstat_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fstat_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fstat_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fstat_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fstat_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fstat_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fstat_pol)
    MergeFrom(*source);
  }
}

void fstat_pol::MergeFrom(const fstat_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fstat_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void fstat_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fstat_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fstat_pol::CopyFrom(const fstat_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fstat_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fstat_pol::IsInitialized() const {
  return true;
}

void fstat_pol::Swap(fstat_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fstat_pol::InternalSwap(fstat_pol* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fstat_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fstat_pol

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fxstat64_pol::fxstat64_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fxstat64_pol)
}
fxstat64_pol::fxstat64_pol(const fxstat64_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.fxstat64_pol)
}

void fxstat64_pol::SharedCtor() {
  _cached_size_ = 0;
}

fxstat64_pol::~fxstat64_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fxstat64_pol)
  SharedDtor();
}

void fxstat64_pol::SharedDtor() {
}

void fxstat64_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fxstat64_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[14].descriptor;
}

const fxstat64_pol& fxstat64_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fxstat64_pol* fxstat64_pol::New(::google::protobuf::Arena* arena) const {
  fxstat64_pol* n = new fxstat64_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fxstat64_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fxstat64_pol)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fxstat64_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fxstat64_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fxstat64_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fxstat64_pol)
  return false;
#undef DO_
}

void fxstat64_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fxstat64_pol)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fxstat64_pol)
}

::google::protobuf::uint8* fxstat64_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fxstat64_pol)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fxstat64_pol)
  return target;
}

size_t fxstat64_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fxstat64_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fxstat64_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fxstat64_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fxstat64_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fxstat64_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fxstat64_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fxstat64_pol)
    MergeFrom(*source);
  }
}

void fxstat64_pol::MergeFrom(const fxstat64_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fxstat64_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void fxstat64_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fxstat64_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fxstat64_pol::CopyFrom(const fxstat64_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fxstat64_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fxstat64_pol::IsInitialized() const {
  return true;
}

void fxstat64_pol::Swap(fxstat64_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fxstat64_pol::InternalSwap(fxstat64_pol* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fxstat64_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fxstat64_pol

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int realloc_pol::kPtrFieldNumber;
const int realloc_pol::kSizeFieldNumber;
const int realloc_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

realloc_pol::realloc_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.realloc_pol)
}
realloc_pol::realloc_pol(const realloc_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ptr_, &from.ptr_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.realloc_pol)
}

void realloc_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ptr_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
}

realloc_pol::~realloc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.realloc_pol)
  SharedDtor();
}

void realloc_pol::SharedDtor() {
}

void realloc_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* realloc_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[15].descriptor;
}

const realloc_pol& realloc_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

realloc_pol* realloc_pol::New(::google::protobuf::Arena* arena) const {
  realloc_pol* n = new realloc_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void realloc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.realloc_pol)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ptr_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool realloc_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.realloc_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action ptr = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ptr(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.realloc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.realloc_pol)
  return false;
#undef DO_
}

void realloc_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.realloc_pol)
  // required .common.action ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ptr(), output);
  }

  // required .common.action size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->size(), output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.realloc_pol)
}

::google::protobuf::uint8* realloc_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.realloc_pol)
  // required .common.action ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptr(), target);
  }

  // required .common.action size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->size(), target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.realloc_pol)
  return target;
}

size_t realloc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.realloc_pol)
  size_t total_size = 0;

  if (has_ptr()) {
    // required .common.action ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptr());
  }

  if (has_size()) {
    // required .common.action size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t realloc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.realloc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.action ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptr());

    // required .common.action size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void realloc_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.realloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const realloc_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const realloc_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.realloc_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.realloc_pol)
    MergeFrom(*source);
  }
}

void realloc_pol::MergeFrom(const realloc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.realloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void realloc_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.realloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void realloc_pol::CopyFrom(const realloc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.realloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool realloc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void realloc_pol::Swap(realloc_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void realloc_pol::InternalSwap(realloc_pol* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata realloc_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// realloc_pol

// required .common.action ptr = 1;
bool realloc_pol::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void realloc_pol::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
void realloc_pol::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
void realloc_pol::clear_ptr() {
  ptr_ = 0;
  clear_has_ptr();
}
::common::action realloc_pol::ptr() const {
  // @@protoc_insertion_point(field_get:libcall_types.realloc_pol.ptr)
  return static_cast< ::common::action >(ptr_);
}
void realloc_pol::set_ptr(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.realloc_pol.ptr)
}

// required .common.action size = 2;
bool realloc_pol::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void realloc_pol::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void realloc_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void realloc_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action realloc_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.realloc_pol.size)
  return static_cast< ::common::action >(size_);
}
void realloc_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.realloc_pol.size)
}

// required .common.action ret = 3;
bool realloc_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void realloc_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void realloc_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void realloc_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action realloc_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.realloc_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void realloc_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.realloc_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mmap_pol::kAddrFieldNumber;
const int mmap_pol::kLengthFieldNumber;
const int mmap_pol::kProtFieldNumber;
const int mmap_pol::kFlagsFieldNumber;
const int mmap_pol::kFdFieldNumber;
const int mmap_pol::kOffsetFieldNumber;
const int mmap_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mmap_pol::mmap_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.mmap_pol)
}
mmap_pol::mmap_pol(const mmap_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ret()) {
    ret_ = new ::common::memory_pol(*from.ret_);
  } else {
    ret_ = NULL;
  }
  ::memcpy(&addr_, &from.addr_,
    reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&addr_) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.mmap_pol)
}

void mmap_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ret_, 0, reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&ret_) + sizeof(offset_));
}

mmap_pol::~mmap_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.mmap_pol)
  SharedDtor();
}

void mmap_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ret_;
  }
}

void mmap_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mmap_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[16].descriptor;
}

const mmap_pol& mmap_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

mmap_pol* mmap_pol::New(::google::protobuf::Arena* arena) const {
  mmap_pol* n = new mmap_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mmap_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.mmap_pol)
  if (has_ret()) {
    GOOGLE_DCHECK(ret_ != NULL);
    ret_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&addr_, 0, reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&addr_) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mmap_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.mmap_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action addr = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_addr(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action length = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_length(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action prot = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_prot(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action flags = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_flags(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action fd = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_fd(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action offset = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_offset(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol ret = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.mmap_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.mmap_pol)
  return false;
#undef DO_
}

void mmap_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.mmap_pol)
  // required .common.action addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->addr(), output);
  }

  // required .common.action length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->length(), output);
  }

  // required .common.action prot = 3;
  if (has_prot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->prot(), output);
  }

  // required .common.action flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->flags(), output);
  }

  // required .common.action fd = 5;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->fd(), output);
  }

  // required .common.action offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->offset(), output);
  }

  // required .common.memory_pol ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ret_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.mmap_pol)
}

::google::protobuf::uint8* mmap_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.mmap_pol)
  // required .common.action addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->addr(), target);
  }

  // required .common.action length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->length(), target);
  }

  // required .common.action prot = 3;
  if (has_prot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->prot(), target);
  }

  // required .common.action flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->flags(), target);
  }

  // required .common.action fd = 5;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->fd(), target);
  }

  // required .common.action offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->offset(), target);
  }

  // required .common.memory_pol ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ret_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.mmap_pol)
  return target;
}

size_t mmap_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.mmap_pol)
  size_t total_size = 0;

  if (has_ret()) {
    // required .common.memory_pol ret = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);
  }

  if (has_addr()) {
    // required .common.action addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->addr());
  }

  if (has_length()) {
    // required .common.action length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->length());
  }

  if (has_prot()) {
    // required .common.action prot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->prot());
  }

  if (has_flags()) {
    // required .common.action flags = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());
  }

  if (has_fd()) {
    // required .common.action fd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fd());
  }

  if (has_offset()) {
    // required .common.action offset = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());
  }

  return total_size;
}
size_t mmap_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.mmap_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .common.memory_pol ret = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);

    // required .common.action addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->addr());

    // required .common.action length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->length());

    // required .common.action prot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->prot());

    // required .common.action flags = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());

    // required .common.action fd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fd());

    // required .common.action offset = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mmap_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.mmap_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const mmap_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mmap_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.mmap_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.mmap_pol)
    MergeFrom(*source);
  }
}

void mmap_pol::MergeFrom(const mmap_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.mmap_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_ret()) {
      mutable_ret()->::common::memory_pol::MergeFrom(from.ret());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_prot()) {
      set_prot(from.prot());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
}

void mmap_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.mmap_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mmap_pol::CopyFrom(const mmap_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.mmap_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mmap_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void mmap_pol::Swap(mmap_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mmap_pol::InternalSwap(mmap_pol* other) {
  std::swap(ret_, other->ret_);
  std::swap(addr_, other->addr_);
  std::swap(length_, other->length_);
  std::swap(prot_, other->prot_);
  std::swap(flags_, other->flags_);
  std::swap(fd_, other->fd_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mmap_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mmap_pol

// required .common.action addr = 1;
bool mmap_pol::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mmap_pol::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void mmap_pol::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void mmap_pol::clear_addr() {
  addr_ = 0;
  clear_has_addr();
}
::common::action mmap_pol::addr() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.addr)
  return static_cast< ::common::action >(addr_);
}
void mmap_pol::set_addr(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_pol.addr)
}

// required .common.action length = 2;
bool mmap_pol::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void mmap_pol::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void mmap_pol::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void mmap_pol::clear_length() {
  length_ = 0;
  clear_has_length();
}
::common::action mmap_pol::length() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.length)
  return static_cast< ::common::action >(length_);
}
void mmap_pol::set_length(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_pol.length)
}

// required .common.action prot = 3;
bool mmap_pol::has_prot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void mmap_pol::set_has_prot() {
  _has_bits_[0] |= 0x00000008u;
}
void mmap_pol::clear_has_prot() {
  _has_bits_[0] &= ~0x00000008u;
}
void mmap_pol::clear_prot() {
  prot_ = 0;
  clear_has_prot();
}
::common::action mmap_pol::prot() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.prot)
  return static_cast< ::common::action >(prot_);
}
void mmap_pol::set_prot(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_prot();
  prot_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_pol.prot)
}

// required .common.action flags = 4;
bool mmap_pol::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void mmap_pol::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void mmap_pol::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void mmap_pol::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::common::action mmap_pol::flags() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.flags)
  return static_cast< ::common::action >(flags_);
}
void mmap_pol::set_flags(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_pol.flags)
}

// required .common.action fd = 5;
bool mmap_pol::has_fd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void mmap_pol::set_has_fd() {
  _has_bits_[0] |= 0x00000020u;
}
void mmap_pol::clear_has_fd() {
  _has_bits_[0] &= ~0x00000020u;
}
void mmap_pol::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
::common::action mmap_pol::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.fd)
  return static_cast< ::common::action >(fd_);
}
void mmap_pol::set_fd(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_pol.fd)
}

// required .common.action offset = 6;
bool mmap_pol::has_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void mmap_pol::set_has_offset() {
  _has_bits_[0] |= 0x00000040u;
}
void mmap_pol::clear_has_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
void mmap_pol::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
::common::action mmap_pol::offset() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.offset)
  return static_cast< ::common::action >(offset_);
}
void mmap_pol::set_offset(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_pol.offset)
}

// required .common.memory_pol ret = 7;
bool mmap_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mmap_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void mmap_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void mmap_pol::clear_ret() {
  if (ret_ != NULL) ret_->::common::memory_pol::Clear();
  clear_has_ret();
}
const ::common::memory_pol& mmap_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_pol.ret)
  return ret_ != NULL ? *ret_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* mmap_pol::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) {
    ret_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.mmap_pol.ret)
  return ret_;
}
::common::memory_pol* mmap_pol::release_ret() {
  // @@protoc_insertion_point(field_release:libcall_types.mmap_pol.ret)
  clear_has_ret();
  ::common::memory_pol* temp = ret_;
  ret_ = NULL;
  return temp;
}
void mmap_pol::set_allocated_ret(::common::memory_pol* ret) {
  delete ret_;
  ret_ = ret;
  if (ret) {
    set_has_ret();
  } else {
    clear_has_ret();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.mmap_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qsort_pol::kBaseFieldNumber;
const int qsort_pol::kNmembFieldNumber;
const int qsort_pol::kSizeFieldNumber;
const int qsort_pol::kCompareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qsort_pol::qsort_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.qsort_pol)
}
qsort_pol::qsort_pol(const qsort_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::common::memory_pol(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.qsort_pol)
}

void qsort_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&base_) + sizeof(compare_));
}

qsort_pol::~qsort_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.qsort_pol)
  SharedDtor();
}

void qsort_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
}

void qsort_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qsort_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[17].descriptor;
}

const qsort_pol& qsort_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

qsort_pol* qsort_pol::New(::google::protobuf::Arena* arena) const {
  qsort_pol* n = new qsort_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qsort_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.qsort_pol)
  if (has_base()) {
    GOOGLE_DCHECK(base_ != NULL);
    base_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&nmemb_, 0, reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qsort_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.qsort_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol base = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action nmemb = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_nmemb(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action compare = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_compare(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.qsort_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.qsort_pol)
  return false;
#undef DO_
}

void qsort_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.qsort_pol)
  // required .common.memory_pol base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // required .common.action nmemb = 2;
  if (has_nmemb()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nmemb(), output);
  }

  // required .common.action size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->size(), output);
  }

  // required .common.action compare = 4;
  if (has_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.qsort_pol)
}

::google::protobuf::uint8* qsort_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.qsort_pol)
  // required .common.memory_pol base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // required .common.action nmemb = 2;
  if (has_nmemb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nmemb(), target);
  }

  // required .common.action size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->size(), target);
  }

  // required .common.action compare = 4;
  if (has_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.qsort_pol)
  return target;
}

size_t qsort_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.qsort_pol)
  size_t total_size = 0;

  if (has_base()) {
    // required .common.memory_pol base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_nmemb()) {
    // required .common.action nmemb = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmemb());
  }

  if (has_size()) {
    // required .common.action size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_compare()) {
    // required .common.action compare = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compare());
  }

  return total_size;
}
size_t qsort_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.qsort_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .common.action nmemb = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmemb());

    // required .common.action size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action compare = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qsort_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.qsort_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const qsort_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qsort_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.qsort_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.qsort_pol)
    MergeFrom(*source);
  }
}

void qsort_pol::MergeFrom(const qsort_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.qsort_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_base()) {
      mutable_base()->::common::memory_pol::MergeFrom(from.base());
    }
    if (from.has_nmemb()) {
      set_nmemb(from.nmemb());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_compare()) {
      set_compare(from.compare());
    }
  }
}

void qsort_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.qsort_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qsort_pol::CopyFrom(const qsort_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.qsort_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qsort_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void qsort_pol::Swap(qsort_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qsort_pol::InternalSwap(qsort_pol* other) {
  std::swap(base_, other->base_);
  std::swap(nmemb_, other->nmemb_);
  std::swap(size_, other->size_);
  std::swap(compare_, other->compare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qsort_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qsort_pol

// required .common.memory_pol base = 1;
bool qsort_pol::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qsort_pol::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void qsort_pol::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void qsort_pol::clear_base() {
  if (base_ != NULL) base_->::common::memory_pol::Clear();
  clear_has_base();
}
const ::common::memory_pol& qsort_pol::base() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_pol.base)
  return base_ != NULL ? *base_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* qsort_pol::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.qsort_pol.base)
  return base_;
}
::common::memory_pol* qsort_pol::release_base() {
  // @@protoc_insertion_point(field_release:libcall_types.qsort_pol.base)
  clear_has_base();
  ::common::memory_pol* temp = base_;
  base_ = NULL;
  return temp;
}
void qsort_pol::set_allocated_base(::common::memory_pol* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.qsort_pol.base)
}

// required .common.action nmemb = 2;
bool qsort_pol::has_nmemb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void qsort_pol::set_has_nmemb() {
  _has_bits_[0] |= 0x00000002u;
}
void qsort_pol::clear_has_nmemb() {
  _has_bits_[0] &= ~0x00000002u;
}
void qsort_pol::clear_nmemb() {
  nmemb_ = 0;
  clear_has_nmemb();
}
::common::action qsort_pol::nmemb() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_pol.nmemb)
  return static_cast< ::common::action >(nmemb_);
}
void qsort_pol::set_nmemb(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_nmemb();
  nmemb_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.qsort_pol.nmemb)
}

// required .common.action size = 3;
bool qsort_pol::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void qsort_pol::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void qsort_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void qsort_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action qsort_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_pol.size)
  return static_cast< ::common::action >(size_);
}
void qsort_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.qsort_pol.size)
}

// required .common.action compare = 4;
bool qsort_pol::has_compare() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void qsort_pol::set_has_compare() {
  _has_bits_[0] |= 0x00000008u;
}
void qsort_pol::clear_has_compare() {
  _has_bits_[0] &= ~0x00000008u;
}
void qsort_pol::clear_compare() {
  compare_ = 0;
  clear_has_compare();
}
::common::action qsort_pol::compare() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_pol.compare)
  return static_cast< ::common::action >(compare_);
}
void qsort_pol::set_compare(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_compare();
  compare_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.qsort_pol.compare)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bsearch_pol::kKeyFieldNumber;
const int bsearch_pol::kBaseFieldNumber;
const int bsearch_pol::kNmembFieldNumber;
const int bsearch_pol::kSizeFieldNumber;
const int bsearch_pol::kCompareFieldNumber;
const int bsearch_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bsearch_pol::bsearch_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.bsearch_pol)
}
bsearch_pol::bsearch_pol(const bsearch_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::memory_pol(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_base()) {
    base_ = new ::common::memory_pol(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_ret()) {
    ret_ = new ::common::memory_pol(*from.ret_);
  } else {
    ret_ = NULL;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.bsearch_pol)
}

void bsearch_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&key_) + sizeof(compare_));
}

bsearch_pol::~bsearch_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.bsearch_pol)
  SharedDtor();
}

void bsearch_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete ret_;
  }
}

void bsearch_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bsearch_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[18].descriptor;
}

const bsearch_pol& bsearch_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

bsearch_pol* bsearch_pol::New(::google::protobuf::Arena* arena) const {
  bsearch_pol* n = new bsearch_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bsearch_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.bsearch_pol)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->::common::memory_pol::Clear();
    }
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::common::memory_pol::Clear();
    }
    if (has_ret()) {
      GOOGLE_DCHECK(ret_ != NULL);
      ret_->::common::memory_pol::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&nmemb_, 0, reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bsearch_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.bsearch_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol base = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action nmemb = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_nmemb(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action compare = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_compare(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol ret = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.bsearch_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.bsearch_pol)
  return false;
#undef DO_
}

void bsearch_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.bsearch_pol)
  // required .common.memory_pol key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // required .common.memory_pol base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // required .common.action nmemb = 3;
  if (has_nmemb()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nmemb(), output);
  }

  // required .common.action size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->size(), output);
  }

  // required .common.action compare = 5;
  if (has_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->compare(), output);
  }

  // required .common.memory_pol ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ret_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.bsearch_pol)
}

::google::protobuf::uint8* bsearch_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.bsearch_pol)
  // required .common.memory_pol key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // required .common.memory_pol base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // required .common.action nmemb = 3;
  if (has_nmemb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->nmemb(), target);
  }

  // required .common.action size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->size(), target);
  }

  // required .common.action compare = 5;
  if (has_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->compare(), target);
  }

  // required .common.memory_pol ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ret_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.bsearch_pol)
  return target;
}

size_t bsearch_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.bsearch_pol)
  size_t total_size = 0;

  if (has_key()) {
    // required .common.memory_pol key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  if (has_base()) {
    // required .common.memory_pol base = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_ret()) {
    // required .common.memory_pol ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);
  }

  if (has_nmemb()) {
    // required .common.action nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmemb());
  }

  if (has_size()) {
    // required .common.action size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_compare()) {
    // required .common.action compare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compare());
  }

  return total_size;
}
size_t bsearch_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.bsearch_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_pol key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

    // required .common.memory_pol base = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .common.memory_pol ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);

    // required .common.action nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmemb());

    // required .common.action size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action compare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bsearch_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.bsearch_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const bsearch_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bsearch_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.bsearch_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.bsearch_pol)
    MergeFrom(*source);
  }
}

void bsearch_pol::MergeFrom(const bsearch_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.bsearch_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_key()) {
      mutable_key()->::common::memory_pol::MergeFrom(from.key());
    }
    if (from.has_base()) {
      mutable_base()->::common::memory_pol::MergeFrom(from.base());
    }
    if (from.has_ret()) {
      mutable_ret()->::common::memory_pol::MergeFrom(from.ret());
    }
    if (from.has_nmemb()) {
      set_nmemb(from.nmemb());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_compare()) {
      set_compare(from.compare());
    }
  }
}

void bsearch_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.bsearch_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bsearch_pol::CopyFrom(const bsearch_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.bsearch_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bsearch_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void bsearch_pol::Swap(bsearch_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bsearch_pol::InternalSwap(bsearch_pol* other) {
  std::swap(key_, other->key_);
  std::swap(base_, other->base_);
  std::swap(ret_, other->ret_);
  std::swap(nmemb_, other->nmemb_);
  std::swap(size_, other->size_);
  std::swap(compare_, other->compare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bsearch_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bsearch_pol

// required .common.memory_pol key = 1;
bool bsearch_pol::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void bsearch_pol::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void bsearch_pol::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void bsearch_pol::clear_key() {
  if (key_ != NULL) key_->::common::memory_pol::Clear();
  clear_has_key();
}
const ::common::memory_pol& bsearch_pol::key() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_pol.key)
  return key_ != NULL ? *key_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* bsearch_pol::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.bsearch_pol.key)
  return key_;
}
::common::memory_pol* bsearch_pol::release_key() {
  // @@protoc_insertion_point(field_release:libcall_types.bsearch_pol.key)
  clear_has_key();
  ::common::memory_pol* temp = key_;
  key_ = NULL;
  return temp;
}
void bsearch_pol::set_allocated_key(::common::memory_pol* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.bsearch_pol.key)
}

// required .common.memory_pol base = 2;
bool bsearch_pol::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void bsearch_pol::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void bsearch_pol::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void bsearch_pol::clear_base() {
  if (base_ != NULL) base_->::common::memory_pol::Clear();
  clear_has_base();
}
const ::common::memory_pol& bsearch_pol::base() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_pol.base)
  return base_ != NULL ? *base_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* bsearch_pol::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.bsearch_pol.base)
  return base_;
}
::common::memory_pol* bsearch_pol::release_base() {
  // @@protoc_insertion_point(field_release:libcall_types.bsearch_pol.base)
  clear_has_base();
  ::common::memory_pol* temp = base_;
  base_ = NULL;
  return temp;
}
void bsearch_pol::set_allocated_base(::common::memory_pol* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.bsearch_pol.base)
}

// required .common.action nmemb = 3;
bool bsearch_pol::has_nmemb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void bsearch_pol::set_has_nmemb() {
  _has_bits_[0] |= 0x00000008u;
}
void bsearch_pol::clear_has_nmemb() {
  _has_bits_[0] &= ~0x00000008u;
}
void bsearch_pol::clear_nmemb() {
  nmemb_ = 0;
  clear_has_nmemb();
}
::common::action bsearch_pol::nmemb() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_pol.nmemb)
  return static_cast< ::common::action >(nmemb_);
}
void bsearch_pol::set_nmemb(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_nmemb();
  nmemb_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.bsearch_pol.nmemb)
}

// required .common.action size = 4;
bool bsearch_pol::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void bsearch_pol::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
void bsearch_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void bsearch_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action bsearch_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_pol.size)
  return static_cast< ::common::action >(size_);
}
void bsearch_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.bsearch_pol.size)
}

// required .common.action compare = 5;
bool bsearch_pol::has_compare() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void bsearch_pol::set_has_compare() {
  _has_bits_[0] |= 0x00000020u;
}
void bsearch_pol::clear_has_compare() {
  _has_bits_[0] &= ~0x00000020u;
}
void bsearch_pol::clear_compare() {
  compare_ = 0;
  clear_has_compare();
}
::common::action bsearch_pol::compare() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_pol.compare)
  return static_cast< ::common::action >(compare_);
}
void bsearch_pol::set_compare(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_compare();
  compare_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.bsearch_pol.compare)
}

// required .common.memory_pol ret = 6;
bool bsearch_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void bsearch_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void bsearch_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void bsearch_pol::clear_ret() {
  if (ret_ != NULL) ret_->::common::memory_pol::Clear();
  clear_has_ret();
}
const ::common::memory_pol& bsearch_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_pol.ret)
  return ret_ != NULL ? *ret_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* bsearch_pol::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) {
    ret_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.bsearch_pol.ret)
  return ret_;
}
::common::memory_pol* bsearch_pol::release_ret() {
  // @@protoc_insertion_point(field_release:libcall_types.bsearch_pol.ret)
  clear_has_ret();
  ::common::memory_pol* temp = ret_;
  ret_ = NULL;
  return temp;
}
void bsearch_pol::set_allocated_ret(::common::memory_pol* ret) {
  delete ret_;
  ret_ = ret;
  if (ret) {
    set_has_ret();
  } else {
    clear_has_ret();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.bsearch_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int open_pol::kPathnameFieldNumber;
const int open_pol::kFlagsFieldNumber;
const int open_pol::kModeFieldNumber;
const int open_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

open_pol::open_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.open_pol)
}
open_pol::open_pol(const open_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pathname()) {
    pathname_ = new ::common::memory_pol(*from.pathname_);
  } else {
    pathname_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&flags_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.open_pol)
}

void open_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pathname_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&pathname_) + sizeof(ret_));
}

open_pol::~open_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.open_pol)
  SharedDtor();
}

void open_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pathname_;
  }
}

void open_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[19].descriptor;
}

const open_pol& open_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

open_pol* open_pol::New(::google::protobuf::Arena* arena) const {
  open_pol* n = new open_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void open_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.open_pol)
  if (has_pathname()) {
    GOOGLE_DCHECK(pathname_ != NULL);
    pathname_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&flags_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&flags_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool open_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.open_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol pathname = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action flags = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_flags(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action mode = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_mode(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.open_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.open_pol)
  return false;
#undef DO_
}

void open_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.open_pol)
  // required .common.memory_pol pathname = 1;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pathname_, output);
  }

  // required .common.action flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->flags(), output);
  }

  // required .common.action mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.open_pol)
}

::google::protobuf::uint8* open_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.open_pol)
  // required .common.memory_pol pathname = 1;
  if (has_pathname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pathname_, false, target);
  }

  // required .common.action flags = 2;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->flags(), target);
  }

  // required .common.action mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.open_pol)
  return target;
}

size_t open_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.open_pol)
  size_t total_size = 0;

  if (has_pathname()) {
    // required .common.memory_pol pathname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pathname_);
  }

  if (has_flags()) {
    // required .common.action flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());
  }

  if (has_mode()) {
    // required .common.action mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t open_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.open_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol pathname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pathname_);

    // required .common.action flags = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flags());

    // required .common.action mode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.open_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const open_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const open_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.open_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.open_pol)
    MergeFrom(*source);
  }
}

void open_pol::MergeFrom(const open_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.open_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_pathname()) {
      mutable_pathname()->::common::memory_pol::MergeFrom(from.pathname());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void open_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.open_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_pol::CopyFrom(const open_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.open_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void open_pol::Swap(open_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void open_pol::InternalSwap(open_pol* other) {
  std::swap(pathname_, other->pathname_);
  std::swap(flags_, other->flags_);
  std::swap(mode_, other->mode_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata open_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// open_pol

// required .common.memory_pol pathname = 1;
bool open_pol::has_pathname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void open_pol::set_has_pathname() {
  _has_bits_[0] |= 0x00000001u;
}
void open_pol::clear_has_pathname() {
  _has_bits_[0] &= ~0x00000001u;
}
void open_pol::clear_pathname() {
  if (pathname_ != NULL) pathname_->::common::memory_pol::Clear();
  clear_has_pathname();
}
const ::common::memory_pol& open_pol::pathname() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_pol.pathname)
  return pathname_ != NULL ? *pathname_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* open_pol::mutable_pathname() {
  set_has_pathname();
  if (pathname_ == NULL) {
    pathname_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.open_pol.pathname)
  return pathname_;
}
::common::memory_pol* open_pol::release_pathname() {
  // @@protoc_insertion_point(field_release:libcall_types.open_pol.pathname)
  clear_has_pathname();
  ::common::memory_pol* temp = pathname_;
  pathname_ = NULL;
  return temp;
}
void open_pol::set_allocated_pathname(::common::memory_pol* pathname) {
  delete pathname_;
  pathname_ = pathname;
  if (pathname) {
    set_has_pathname();
  } else {
    clear_has_pathname();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.open_pol.pathname)
}

// required .common.action flags = 2;
bool open_pol::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void open_pol::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void open_pol::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void open_pol::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::common::action open_pol::flags() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_pol.flags)
  return static_cast< ::common::action >(flags_);
}
void open_pol::set_flags(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.open_pol.flags)
}

// required .common.action mode = 3;
bool open_pol::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void open_pol::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void open_pol::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void open_pol::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::common::action open_pol::mode() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_pol.mode)
  return static_cast< ::common::action >(mode_);
}
void open_pol::set_mode(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.open_pol.mode)
}

// required .common.action ret = 4;
bool open_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void open_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void open_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void open_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action open_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void open_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.open_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strcpy_pol::kSrcFieldNumber;
const int strcpy_pol::kDstFieldNumber;
const int strcpy_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strcpy_pol::strcpy_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcpy_pol)
}
strcpy_pol::strcpy_pol(const strcpy_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = NULL;
  }
  if (from.has_dst()) {
    dst_ = new ::common::memory_pol(*from.dst_);
  } else {
    dst_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcpy_pol)
}

void strcpy_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&src_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&src_) + sizeof(ret_));
}

strcpy_pol::~strcpy_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strcpy_pol)
  SharedDtor();
}

void strcpy_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete src_;
  }
  if (this != internal_default_instance()) {
    delete dst_;
  }
}

void strcpy_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strcpy_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[20].descriptor;
}

const strcpy_pol& strcpy_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strcpy_pol* strcpy_pol::New(::google::protobuf::Arena* arena) const {
  strcpy_pol* n = new strcpy_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strcpy_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcpy_pol)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_src()) {
      GOOGLE_DCHECK(src_ != NULL);
      src_->::common::memory_pol::Clear();
    }
    if (has_dst()) {
      GOOGLE_DCHECK(dst_ != NULL);
      dst_->::common::memory_pol::Clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strcpy_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcpy_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol src = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol dst = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcpy_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcpy_pol)
  return false;
#undef DO_
}

void strcpy_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcpy_pol)
  // required .common.memory_pol src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->src_, output);
  }

  // required .common.memory_pol dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dst_, output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcpy_pol)
}

::google::protobuf::uint8* strcpy_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcpy_pol)
  // required .common.memory_pol src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->src_, false, target);
  }

  // required .common.memory_pol dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dst_, false, target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcpy_pol)
  return target;
}

size_t strcpy_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcpy_pol)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_dst()) {
    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dst_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strcpy_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcpy_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dst_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strcpy_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strcpy_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strcpy_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcpy_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcpy_pol)
    MergeFrom(*source);
  }
}

void strcpy_pol::MergeFrom(const strcpy_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_src()) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (from.has_dst()) {
      mutable_dst()->::common::memory_pol::MergeFrom(from.dst());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strcpy_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcpy_pol::CopyFrom(const strcpy_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcpy_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void strcpy_pol::Swap(strcpy_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strcpy_pol::InternalSwap(strcpy_pol* other) {
  std::swap(src_, other->src_);
  std::swap(dst_, other->dst_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strcpy_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strcpy_pol

// required .common.memory_pol src = 1;
bool strcpy_pol::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strcpy_pol::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void strcpy_pol::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void strcpy_pol::clear_src() {
  if (src_ != NULL) src_->::common::memory_pol::Clear();
  clear_has_src();
}
const ::common::memory_pol& strcpy_pol::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcpy_pol.src)
  return src_ != NULL ? *src_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* strcpy_pol::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strcpy_pol.src)
  return src_;
}
::common::memory_pol* strcpy_pol::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.strcpy_pol.src)
  clear_has_src();
  ::common::memory_pol* temp = src_;
  src_ = NULL;
  return temp;
}
void strcpy_pol::set_allocated_src(::common::memory_pol* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strcpy_pol.src)
}

// required .common.memory_pol dst = 2;
bool strcpy_pol::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strcpy_pol::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
void strcpy_pol::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
void strcpy_pol::clear_dst() {
  if (dst_ != NULL) dst_->::common::memory_pol::Clear();
  clear_has_dst();
}
const ::common::memory_pol& strcpy_pol::dst() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcpy_pol.dst)
  return dst_ != NULL ? *dst_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* strcpy_pol::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    dst_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strcpy_pol.dst)
  return dst_;
}
::common::memory_pol* strcpy_pol::release_dst() {
  // @@protoc_insertion_point(field_release:libcall_types.strcpy_pol.dst)
  clear_has_dst();
  ::common::memory_pol* temp = dst_;
  dst_ = NULL;
  return temp;
}
void strcpy_pol::set_allocated_dst(::common::memory_pol* dst) {
  delete dst_;
  dst_ = dst;
  if (dst) {
    set_has_dst();
  } else {
    clear_has_dst();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strcpy_pol.dst)
}

// required .common.action ret = 3;
bool strcpy_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strcpy_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void strcpy_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void strcpy_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action strcpy_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcpy_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void strcpy_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcpy_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int printf_pol::kFormatFieldNumber;
const int printf_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

printf_pol::printf_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.printf_pol)
}
printf_pol::printf_pol(const printf_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_format()) {
    format_ = new ::common::memory_pol(*from.format_);
  } else {
    format_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.printf_pol)
}

void printf_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&format_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&format_) + sizeof(ret_));
}

printf_pol::~printf_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.printf_pol)
  SharedDtor();
}

void printf_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete format_;
  }
}

void printf_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* printf_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[21].descriptor;
}

const printf_pol& printf_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

printf_pol* printf_pol::New(::google::protobuf::Arena* arena) const {
  printf_pol* n = new printf_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void printf_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.printf_pol)
  if (has_format()) {
    GOOGLE_DCHECK(format_ != NULL);
    format_->::common::memory_pol::Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool printf_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.printf_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol format = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.printf_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.printf_pol)
  return false;
#undef DO_
}

void printf_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.printf_pol)
  // required .common.memory_pol format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->format_, output);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.printf_pol)
}

::google::protobuf::uint8* printf_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.printf_pol)
  // required .common.memory_pol format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->format_, false, target);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.printf_pol)
  return target;
}

size_t printf_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.printf_pol)
  size_t total_size = 0;

  if (has_format()) {
    // required .common.memory_pol format = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->format_);
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t printf_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.printf_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol format = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->format_);

    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void printf_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.printf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const printf_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const printf_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.printf_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.printf_pol)
    MergeFrom(*source);
  }
}

void printf_pol::MergeFrom(const printf_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.printf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_format()) {
      mutable_format()->::common::memory_pol::MergeFrom(from.format());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void printf_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.printf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void printf_pol::CopyFrom(const printf_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.printf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool printf_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void printf_pol::Swap(printf_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void printf_pol::InternalSwap(printf_pol* other) {
  std::swap(format_, other->format_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata printf_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// printf_pol

// required .common.memory_pol format = 1;
bool printf_pol::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void printf_pol::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
void printf_pol::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
void printf_pol::clear_format() {
  if (format_ != NULL) format_->::common::memory_pol::Clear();
  clear_has_format();
}
const ::common::memory_pol& printf_pol::format() const {
  // @@protoc_insertion_point(field_get:libcall_types.printf_pol.format)
  return format_ != NULL ? *format_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* printf_pol::mutable_format() {
  set_has_format();
  if (format_ == NULL) {
    format_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.printf_pol.format)
  return format_;
}
::common::memory_pol* printf_pol::release_format() {
  // @@protoc_insertion_point(field_release:libcall_types.printf_pol.format)
  clear_has_format();
  ::common::memory_pol* temp = format_;
  format_ = NULL;
  return temp;
}
void printf_pol::set_allocated_format(::common::memory_pol* format) {
  delete format_;
  format_ = format;
  if (format) {
    set_has_format();
  } else {
    clear_has_format();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.printf_pol.format)
}

// required .common.action ret = 2;
bool printf_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void printf_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void printf_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void printf_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action printf_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.printf_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void printf_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.printf_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int atoi_pol::kSrcFieldNumber;
const int atoi_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

atoi_pol::atoi_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.atoi_pol)
}
atoi_pol::atoi_pol(const atoi_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.atoi_pol)
}

void atoi_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&src_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&src_) + sizeof(ret_));
}

atoi_pol::~atoi_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.atoi_pol)
  SharedDtor();
}

void atoi_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete src_;
  }
}

void atoi_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* atoi_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[22].descriptor;
}

const atoi_pol& atoi_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

atoi_pol* atoi_pol::New(::google::protobuf::Arena* arena) const {
  atoi_pol* n = new atoi_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void atoi_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.atoi_pol)
  if (has_src()) {
    GOOGLE_DCHECK(src_ != NULL);
    src_->::common::memory_pol::Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool atoi_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.atoi_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol src = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.atoi_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.atoi_pol)
  return false;
#undef DO_
}

void atoi_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.atoi_pol)
  // required .common.memory_pol src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->src_, output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.atoi_pol)
}

::google::protobuf::uint8* atoi_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.atoi_pol)
  // required .common.memory_pol src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->src_, false, target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.atoi_pol)
  return target;
}

size_t atoi_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.atoi_pol)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t atoi_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.atoi_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void atoi_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.atoi_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const atoi_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const atoi_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.atoi_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.atoi_pol)
    MergeFrom(*source);
  }
}

void atoi_pol::MergeFrom(const atoi_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.atoi_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_src()) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void atoi_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.atoi_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atoi_pol::CopyFrom(const atoi_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.atoi_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atoi_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void atoi_pol::Swap(atoi_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void atoi_pol::InternalSwap(atoi_pol* other) {
  std::swap(src_, other->src_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata atoi_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// atoi_pol

// required .common.memory_pol src = 1;
bool atoi_pol::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void atoi_pol::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void atoi_pol::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void atoi_pol::clear_src() {
  if (src_ != NULL) src_->::common::memory_pol::Clear();
  clear_has_src();
}
const ::common::memory_pol& atoi_pol::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.atoi_pol.src)
  return src_ != NULL ? *src_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* atoi_pol::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.atoi_pol.src)
  return src_;
}
::common::memory_pol* atoi_pol::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.atoi_pol.src)
  clear_has_src();
  ::common::memory_pol* temp = src_;
  src_ = NULL;
  return temp;
}
void atoi_pol::set_allocated_src(::common::memory_pol* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.atoi_pol.src)
}

// required .common.action ret = 3;
bool atoi_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void atoi_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void atoi_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void atoi_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action atoi_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.atoi_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void atoi_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.atoi_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int malloc_pol::kSizeFieldNumber;
const int malloc_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

malloc_pol::malloc_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.malloc_pol)
}
malloc_pol::malloc_pol(const malloc_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.malloc_pol)
}

void malloc_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
}

malloc_pol::~malloc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.malloc_pol)
  SharedDtor();
}

void malloc_pol::SharedDtor() {
}

void malloc_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* malloc_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[23].descriptor;
}

const malloc_pol& malloc_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

malloc_pol* malloc_pol::New(::google::protobuf::Arena* arena) const {
  malloc_pol* n = new malloc_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void malloc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.malloc_pol)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool malloc_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.malloc_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action size = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.malloc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.malloc_pol)
  return false;
#undef DO_
}

void malloc_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.malloc_pol)
  // required .common.action size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->size(), output);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.malloc_pol)
}

::google::protobuf::uint8* malloc_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.malloc_pol)
  // required .common.action size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->size(), target);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.malloc_pol)
  return target;
}

size_t malloc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.malloc_pol)
  size_t total_size = 0;

  if (has_size()) {
    // required .common.action size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t malloc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.malloc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.action size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void malloc_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.malloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const malloc_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const malloc_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.malloc_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.malloc_pol)
    MergeFrom(*source);
  }
}

void malloc_pol::MergeFrom(const malloc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.malloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void malloc_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.malloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void malloc_pol::CopyFrom(const malloc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.malloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool malloc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void malloc_pol::Swap(malloc_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void malloc_pol::InternalSwap(malloc_pol* other) {
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata malloc_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// malloc_pol

// required .common.action size = 1;
bool malloc_pol::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void malloc_pol::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void malloc_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void malloc_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action malloc_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.malloc_pol.size)
  return static_cast< ::common::action >(size_);
}
void malloc_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.malloc_pol.size)
}

// required .common.action ret = 2;
bool malloc_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void malloc_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void malloc_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void malloc_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action malloc_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.malloc_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void malloc_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.malloc_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getmodulehandle_pol::kModuleNameFieldNumber;
const int getmodulehandle_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getmodulehandle_pol::getmodulehandle_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmodulehandle_pol)
}
getmodulehandle_pol::getmodulehandle_pol(const getmodulehandle_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module_name()) {
    module_name_ = new ::common::memory_pol(*from.module_name_);
  } else {
    module_name_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmodulehandle_pol)
}

void getmodulehandle_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&module_name_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&module_name_) + sizeof(ret_));
}

getmodulehandle_pol::~getmodulehandle_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.getmodulehandle_pol)
  SharedDtor();
}

void getmodulehandle_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete module_name_;
  }
}

void getmodulehandle_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getmodulehandle_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[24].descriptor;
}

const getmodulehandle_pol& getmodulehandle_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

getmodulehandle_pol* getmodulehandle_pol::New(::google::protobuf::Arena* arena) const {
  getmodulehandle_pol* n = new getmodulehandle_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getmodulehandle_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmodulehandle_pol)
  if (has_module_name()) {
    GOOGLE_DCHECK(module_name_ != NULL);
    module_name_->::common::memory_pol::Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool getmodulehandle_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmodulehandle_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol module_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmodulehandle_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmodulehandle_pol)
  return false;
#undef DO_
}

void getmodulehandle_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmodulehandle_pol)
  // required .common.memory_pol module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->module_name_, output);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmodulehandle_pol)
}

::google::protobuf::uint8* getmodulehandle_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmodulehandle_pol)
  // required .common.memory_pol module_name = 1;
  if (has_module_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->module_name_, false, target);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmodulehandle_pol)
  return target;
}

size_t getmodulehandle_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmodulehandle_pol)
  size_t total_size = 0;

  if (has_module_name()) {
    // required .common.memory_pol module_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_name_);
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t getmodulehandle_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmodulehandle_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol module_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_name_);

    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getmodulehandle_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmodulehandle_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const getmodulehandle_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getmodulehandle_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmodulehandle_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmodulehandle_pol)
    MergeFrom(*source);
  }
}

void getmodulehandle_pol::MergeFrom(const getmodulehandle_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmodulehandle_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_module_name()) {
      mutable_module_name()->::common::memory_pol::MergeFrom(from.module_name());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void getmodulehandle_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmodulehandle_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmodulehandle_pol::CopyFrom(const getmodulehandle_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmodulehandle_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmodulehandle_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void getmodulehandle_pol::Swap(getmodulehandle_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getmodulehandle_pol::InternalSwap(getmodulehandle_pol* other) {
  std::swap(module_name_, other->module_name_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getmodulehandle_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getmodulehandle_pol

// required .common.memory_pol module_name = 1;
bool getmodulehandle_pol::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void getmodulehandle_pol::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
void getmodulehandle_pol::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void getmodulehandle_pol::clear_module_name() {
  if (module_name_ != NULL) module_name_->::common::memory_pol::Clear();
  clear_has_module_name();
}
const ::common::memory_pol& getmodulehandle_pol::module_name() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmodulehandle_pol.module_name)
  return module_name_ != NULL ? *module_name_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* getmodulehandle_pol::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == NULL) {
    module_name_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmodulehandle_pol.module_name)
  return module_name_;
}
::common::memory_pol* getmodulehandle_pol::release_module_name() {
  // @@protoc_insertion_point(field_release:libcall_types.getmodulehandle_pol.module_name)
  clear_has_module_name();
  ::common::memory_pol* temp = module_name_;
  module_name_ = NULL;
  return temp;
}
void getmodulehandle_pol::set_allocated_module_name(::common::memory_pol* module_name) {
  delete module_name_;
  module_name_ = module_name;
  if (module_name) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmodulehandle_pol.module_name)
}

// required .common.action ret = 2;
bool getmodulehandle_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void getmodulehandle_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void getmodulehandle_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void getmodulehandle_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action getmodulehandle_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmodulehandle_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void getmodulehandle_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getmodulehandle_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getprocaddress_pol::kHmoduleFieldNumber;
const int getprocaddress_pol::kProcNameFieldNumber;
const int getprocaddress_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getprocaddress_pol::getprocaddress_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getprocaddress_pol)
}
getprocaddress_pol::getprocaddress_pol(const getprocaddress_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proc_name()) {
    proc_name_ = new ::common::memory_pol(*from.proc_name_);
  } else {
    proc_name_ = NULL;
  }
  ::memcpy(&hmodule_, &from.hmodule_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&hmodule_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getprocaddress_pol)
}

void getprocaddress_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&proc_name_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&proc_name_) + sizeof(ret_));
}

getprocaddress_pol::~getprocaddress_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.getprocaddress_pol)
  SharedDtor();
}

void getprocaddress_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete proc_name_;
  }
}

void getprocaddress_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getprocaddress_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[25].descriptor;
}

const getprocaddress_pol& getprocaddress_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

getprocaddress_pol* getprocaddress_pol::New(::google::protobuf::Arena* arena) const {
  getprocaddress_pol* n = new getprocaddress_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getprocaddress_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getprocaddress_pol)
  if (has_proc_name()) {
    GOOGLE_DCHECK(proc_name_ != NULL);
    proc_name_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&hmodule_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&hmodule_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool getprocaddress_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getprocaddress_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action hmodule = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_hmodule(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol proc_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getprocaddress_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getprocaddress_pol)
  return false;
#undef DO_
}

void getprocaddress_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getprocaddress_pol)
  // required .common.action hmodule = 1;
  if (has_hmodule()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->hmodule(), output);
  }

  // required .common.memory_pol proc_name = 2;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->proc_name_, output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getprocaddress_pol)
}

::google::protobuf::uint8* getprocaddress_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getprocaddress_pol)
  // required .common.action hmodule = 1;
  if (has_hmodule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->hmodule(), target);
  }

  // required .common.memory_pol proc_name = 2;
  if (has_proc_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->proc_name_, false, target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getprocaddress_pol)
  return target;
}

size_t getprocaddress_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getprocaddress_pol)
  size_t total_size = 0;

  if (has_proc_name()) {
    // required .common.memory_pol proc_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proc_name_);
  }

  if (has_hmodule()) {
    // required .common.action hmodule = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hmodule());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t getprocaddress_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getprocaddress_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol proc_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proc_name_);

    // required .common.action hmodule = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hmodule());

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getprocaddress_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getprocaddress_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const getprocaddress_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getprocaddress_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getprocaddress_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getprocaddress_pol)
    MergeFrom(*source);
  }
}

void getprocaddress_pol::MergeFrom(const getprocaddress_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getprocaddress_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_proc_name()) {
      mutable_proc_name()->::common::memory_pol::MergeFrom(from.proc_name());
    }
    if (from.has_hmodule()) {
      set_hmodule(from.hmodule());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void getprocaddress_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getprocaddress_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getprocaddress_pol::CopyFrom(const getprocaddress_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getprocaddress_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getprocaddress_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void getprocaddress_pol::Swap(getprocaddress_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getprocaddress_pol::InternalSwap(getprocaddress_pol* other) {
  std::swap(proc_name_, other->proc_name_);
  std::swap(hmodule_, other->hmodule_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getprocaddress_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getprocaddress_pol

// required .common.action hmodule = 1;
bool getprocaddress_pol::has_hmodule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void getprocaddress_pol::set_has_hmodule() {
  _has_bits_[0] |= 0x00000002u;
}
void getprocaddress_pol::clear_has_hmodule() {
  _has_bits_[0] &= ~0x00000002u;
}
void getprocaddress_pol::clear_hmodule() {
  hmodule_ = 0;
  clear_has_hmodule();
}
::common::action getprocaddress_pol::hmodule() const {
  // @@protoc_insertion_point(field_get:libcall_types.getprocaddress_pol.hmodule)
  return static_cast< ::common::action >(hmodule_);
}
void getprocaddress_pol::set_hmodule(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_hmodule();
  hmodule_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getprocaddress_pol.hmodule)
}

// required .common.memory_pol proc_name = 2;
bool getprocaddress_pol::has_proc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void getprocaddress_pol::set_has_proc_name() {
  _has_bits_[0] |= 0x00000001u;
}
void getprocaddress_pol::clear_has_proc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void getprocaddress_pol::clear_proc_name() {
  if (proc_name_ != NULL) proc_name_->::common::memory_pol::Clear();
  clear_has_proc_name();
}
const ::common::memory_pol& getprocaddress_pol::proc_name() const {
  // @@protoc_insertion_point(field_get:libcall_types.getprocaddress_pol.proc_name)
  return proc_name_ != NULL ? *proc_name_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* getprocaddress_pol::mutable_proc_name() {
  set_has_proc_name();
  if (proc_name_ == NULL) {
    proc_name_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getprocaddress_pol.proc_name)
  return proc_name_;
}
::common::memory_pol* getprocaddress_pol::release_proc_name() {
  // @@protoc_insertion_point(field_release:libcall_types.getprocaddress_pol.proc_name)
  clear_has_proc_name();
  ::common::memory_pol* temp = proc_name_;
  proc_name_ = NULL;
  return temp;
}
void getprocaddress_pol::set_allocated_proc_name(::common::memory_pol* proc_name) {
  delete proc_name_;
  proc_name_ = proc_name;
  if (proc_name) {
    set_has_proc_name();
  } else {
    clear_has_proc_name();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getprocaddress_pol.proc_name)
}

// required .common.action ret = 3;
bool getprocaddress_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void getprocaddress_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void getprocaddress_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void getprocaddress_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action getprocaddress_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.getprocaddress_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void getprocaddress_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getprocaddress_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getmainargs_pol::kArgcFieldNumber;
const int getmainargs_pol::kArgvFieldNumber;
const int getmainargs_pol::kEnvFieldNumber;
const int getmainargs_pol::kDowildcardFieldNumber;
const int getmainargs_pol::kStartinfoFieldNumber;
const int getmainargs_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getmainargs_pol::getmainargs_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmainargs_pol)
}
getmainargs_pol::getmainargs_pol(const getmainargs_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_argc()) {
    argc_ = new ::common::memory_pol(*from.argc_);
  } else {
    argc_ = NULL;
  }
  if (from.has_argv()) {
    argv_ = new ::common::memory_pol(*from.argv_);
  } else {
    argv_ = NULL;
  }
  if (from.has_env()) {
    env_ = new ::common::memory_pol(*from.env_);
  } else {
    env_ = NULL;
  }
  if (from.has_startinfo()) {
    startinfo_ = new ::common::memory_pol(*from.startinfo_);
  } else {
    startinfo_ = NULL;
  }
  ::memcpy(&dowildcard_, &from.dowildcard_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dowildcard_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmainargs_pol)
}

void getmainargs_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&argc_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&argc_) + sizeof(ret_));
}

getmainargs_pol::~getmainargs_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.getmainargs_pol)
  SharedDtor();
}

void getmainargs_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete argc_;
  }
  if (this != internal_default_instance()) {
    delete argv_;
  }
  if (this != internal_default_instance()) {
    delete env_;
  }
  if (this != internal_default_instance()) {
    delete startinfo_;
  }
}

void getmainargs_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getmainargs_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[26].descriptor;
}

const getmainargs_pol& getmainargs_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

getmainargs_pol* getmainargs_pol::New(::google::protobuf::Arena* arena) const {
  getmainargs_pol* n = new getmainargs_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getmainargs_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmainargs_pol)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_argc()) {
      GOOGLE_DCHECK(argc_ != NULL);
      argc_->::common::memory_pol::Clear();
    }
    if (has_argv()) {
      GOOGLE_DCHECK(argv_ != NULL);
      argv_->::common::memory_pol::Clear();
    }
    if (has_env()) {
      GOOGLE_DCHECK(env_ != NULL);
      env_->::common::memory_pol::Clear();
    }
    if (has_startinfo()) {
      GOOGLE_DCHECK(startinfo_ != NULL);
      startinfo_->::common::memory_pol::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&dowildcard_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dowildcard_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool getmainargs_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmainargs_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol argc = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol argv = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol env = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action dowildcard = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_dowildcard(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol startinfo = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmainargs_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmainargs_pol)
  return false;
#undef DO_
}

void getmainargs_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmainargs_pol)
  // required .common.memory_pol argc = 1;
  if (has_argc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->argc_, output);
  }

  // required .common.memory_pol argv = 2;
  if (has_argv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->argv_, output);
  }

  // required .common.memory_pol env = 3;
  if (has_env()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->env_, output);
  }

  // required .common.action dowildcard = 4;
  if (has_dowildcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dowildcard(), output);
  }

  // required .common.memory_pol startinfo = 5;
  if (has_startinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->startinfo_, output);
  }

  // required .common.action ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmainargs_pol)
}

::google::protobuf::uint8* getmainargs_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmainargs_pol)
  // required .common.memory_pol argc = 1;
  if (has_argc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->argc_, false, target);
  }

  // required .common.memory_pol argv = 2;
  if (has_argv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->argv_, false, target);
  }

  // required .common.memory_pol env = 3;
  if (has_env()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->env_, false, target);
  }

  // required .common.action dowildcard = 4;
  if (has_dowildcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dowildcard(), target);
  }

  // required .common.memory_pol startinfo = 5;
  if (has_startinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->startinfo_, false, target);
  }

  // required .common.action ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmainargs_pol)
  return target;
}

size_t getmainargs_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmainargs_pol)
  size_t total_size = 0;

  if (has_argc()) {
    // required .common.memory_pol argc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argc_);
  }

  if (has_argv()) {
    // required .common.memory_pol argv = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argv_);
  }

  if (has_env()) {
    // required .common.memory_pol env = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->env_);
  }

  if (has_startinfo()) {
    // required .common.memory_pol startinfo = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startinfo_);
  }

  if (has_dowildcard()) {
    // required .common.action dowildcard = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dowildcard());
  }

  if (has_ret()) {
    // required .common.action ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t getmainargs_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmainargs_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_pol argc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argc_);

    // required .common.memory_pol argv = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argv_);

    // required .common.memory_pol env = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->env_);

    // required .common.memory_pol startinfo = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startinfo_);

    // required .common.action dowildcard = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dowildcard());

    // required .common.action ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getmainargs_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmainargs_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const getmainargs_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getmainargs_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmainargs_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmainargs_pol)
    MergeFrom(*source);
  }
}

void getmainargs_pol::MergeFrom(const getmainargs_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmainargs_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_argc()) {
      mutable_argc()->::common::memory_pol::MergeFrom(from.argc());
    }
    if (from.has_argv()) {
      mutable_argv()->::common::memory_pol::MergeFrom(from.argv());
    }
    if (from.has_env()) {
      mutable_env()->::common::memory_pol::MergeFrom(from.env());
    }
    if (from.has_startinfo()) {
      mutable_startinfo()->::common::memory_pol::MergeFrom(from.startinfo());
    }
    if (from.has_dowildcard()) {
      set_dowildcard(from.dowildcard());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void getmainargs_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmainargs_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmainargs_pol::CopyFrom(const getmainargs_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmainargs_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmainargs_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void getmainargs_pol::Swap(getmainargs_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getmainargs_pol::InternalSwap(getmainargs_pol* other) {
  std::swap(argc_, other->argc_);
  std::swap(argv_, other->argv_);
  std::swap(env_, other->env_);
  std::swap(startinfo_, other->startinfo_);
  std::swap(dowildcard_, other->dowildcard_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getmainargs_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getmainargs_pol

// required .common.memory_pol argc = 1;
bool getmainargs_pol::has_argc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void getmainargs_pol::set_has_argc() {
  _has_bits_[0] |= 0x00000001u;
}
void getmainargs_pol::clear_has_argc() {
  _has_bits_[0] &= ~0x00000001u;
}
void getmainargs_pol::clear_argc() {
  if (argc_ != NULL) argc_->::common::memory_pol::Clear();
  clear_has_argc();
}
const ::common::memory_pol& getmainargs_pol::argc() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_pol.argc)
  return argc_ != NULL ? *argc_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* getmainargs_pol::mutable_argc() {
  set_has_argc();
  if (argc_ == NULL) {
    argc_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_pol.argc)
  return argc_;
}
::common::memory_pol* getmainargs_pol::release_argc() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_pol.argc)
  clear_has_argc();
  ::common::memory_pol* temp = argc_;
  argc_ = NULL;
  return temp;
}
void getmainargs_pol::set_allocated_argc(::common::memory_pol* argc) {
  delete argc_;
  argc_ = argc;
  if (argc) {
    set_has_argc();
  } else {
    clear_has_argc();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_pol.argc)
}

// required .common.memory_pol argv = 2;
bool getmainargs_pol::has_argv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void getmainargs_pol::set_has_argv() {
  _has_bits_[0] |= 0x00000002u;
}
void getmainargs_pol::clear_has_argv() {
  _has_bits_[0] &= ~0x00000002u;
}
void getmainargs_pol::clear_argv() {
  if (argv_ != NULL) argv_->::common::memory_pol::Clear();
  clear_has_argv();
}
const ::common::memory_pol& getmainargs_pol::argv() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_pol.argv)
  return argv_ != NULL ? *argv_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* getmainargs_pol::mutable_argv() {
  set_has_argv();
  if (argv_ == NULL) {
    argv_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_pol.argv)
  return argv_;
}
::common::memory_pol* getmainargs_pol::release_argv() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_pol.argv)
  clear_has_argv();
  ::common::memory_pol* temp = argv_;
  argv_ = NULL;
  return temp;
}
void getmainargs_pol::set_allocated_argv(::common::memory_pol* argv) {
  delete argv_;
  argv_ = argv;
  if (argv) {
    set_has_argv();
  } else {
    clear_has_argv();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_pol.argv)
}

// required .common.memory_pol env = 3;
bool getmainargs_pol::has_env() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void getmainargs_pol::set_has_env() {
  _has_bits_[0] |= 0x00000004u;
}
void getmainargs_pol::clear_has_env() {
  _has_bits_[0] &= ~0x00000004u;
}
void getmainargs_pol::clear_env() {
  if (env_ != NULL) env_->::common::memory_pol::Clear();
  clear_has_env();
}
const ::common::memory_pol& getmainargs_pol::env() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_pol.env)
  return env_ != NULL ? *env_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* getmainargs_pol::mutable_env() {
  set_has_env();
  if (env_ == NULL) {
    env_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_pol.env)
  return env_;
}
::common::memory_pol* getmainargs_pol::release_env() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_pol.env)
  clear_has_env();
  ::common::memory_pol* temp = env_;
  env_ = NULL;
  return temp;
}
void getmainargs_pol::set_allocated_env(::common::memory_pol* env) {
  delete env_;
  env_ = env;
  if (env) {
    set_has_env();
  } else {
    clear_has_env();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_pol.env)
}

// required .common.action dowildcard = 4;
bool getmainargs_pol::has_dowildcard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void getmainargs_pol::set_has_dowildcard() {
  _has_bits_[0] |= 0x00000010u;
}
void getmainargs_pol::clear_has_dowildcard() {
  _has_bits_[0] &= ~0x00000010u;
}
void getmainargs_pol::clear_dowildcard() {
  dowildcard_ = 0;
  clear_has_dowildcard();
}
::common::action getmainargs_pol::dowildcard() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_pol.dowildcard)
  return static_cast< ::common::action >(dowildcard_);
}
void getmainargs_pol::set_dowildcard(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_dowildcard();
  dowildcard_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getmainargs_pol.dowildcard)
}

// required .common.memory_pol startinfo = 5;
bool getmainargs_pol::has_startinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void getmainargs_pol::set_has_startinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void getmainargs_pol::clear_has_startinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void getmainargs_pol::clear_startinfo() {
  if (startinfo_ != NULL) startinfo_->::common::memory_pol::Clear();
  clear_has_startinfo();
}
const ::common::memory_pol& getmainargs_pol::startinfo() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_pol.startinfo)
  return startinfo_ != NULL ? *startinfo_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* getmainargs_pol::mutable_startinfo() {
  set_has_startinfo();
  if (startinfo_ == NULL) {
    startinfo_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_pol.startinfo)
  return startinfo_;
}
::common::memory_pol* getmainargs_pol::release_startinfo() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_pol.startinfo)
  clear_has_startinfo();
  ::common::memory_pol* temp = startinfo_;
  startinfo_ = NULL;
  return temp;
}
void getmainargs_pol::set_allocated_startinfo(::common::memory_pol* startinfo) {
  delete startinfo_;
  startinfo_ = startinfo;
  if (startinfo) {
    set_has_startinfo();
  } else {
    clear_has_startinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_pol.startinfo)
}

// required .common.action ret = 6;
bool getmainargs_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void getmainargs_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
void getmainargs_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
void getmainargs_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action getmainargs_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void getmainargs_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getmainargs_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gethostname_pol::kNameFieldNumber;
const int gethostname_pol::kNamelenFieldNumber;
const int gethostname_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gethostname_pol::gethostname_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.gethostname_pol)
}
gethostname_pol::gethostname_pol(const gethostname_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::common::memory_pol(*from.name_);
  } else {
    name_ = NULL;
  }
  ::memcpy(&namelen_, &from.namelen_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&namelen_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.gethostname_pol)
}

void gethostname_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&name_) + sizeof(ret_));
}

gethostname_pol::~gethostname_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.gethostname_pol)
  SharedDtor();
}

void gethostname_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete name_;
  }
}

void gethostname_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gethostname_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[27].descriptor;
}

const gethostname_pol& gethostname_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

gethostname_pol* gethostname_pol::New(::google::protobuf::Arena* arena) const {
  gethostname_pol* n = new gethostname_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void gethostname_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.gethostname_pol)
  if (has_name()) {
    GOOGLE_DCHECK(name_ != NULL);
    name_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&namelen_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&namelen_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gethostname_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.gethostname_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action namelen = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_namelen(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.gethostname_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.gethostname_pol)
  return false;
#undef DO_
}

void gethostname_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.gethostname_pol)
  // required .common.memory_pol name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->name_, output);
  }

  // required .common.action namelen = 2;
  if (has_namelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->namelen(), output);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.gethostname_pol)
}

::google::protobuf::uint8* gethostname_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.gethostname_pol)
  // required .common.memory_pol name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->name_, false, target);
  }

  // required .common.action namelen = 2;
  if (has_namelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->namelen(), target);
  }

  // required .common.action ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.gethostname_pol)
  return target;
}

size_t gethostname_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.gethostname_pol)
  size_t total_size = 0;

  if (has_name()) {
    // required .common.memory_pol name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }

  if (has_namelen()) {
    // required .common.action namelen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->namelen());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t gethostname_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.gethostname_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);

    // required .common.action namelen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->namelen());

    // required .common.action ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gethostname_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.gethostname_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const gethostname_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gethostname_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.gethostname_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.gethostname_pol)
    MergeFrom(*source);
  }
}

void gethostname_pol::MergeFrom(const gethostname_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.gethostname_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      mutable_name()->::common::memory_pol::MergeFrom(from.name());
    }
    if (from.has_namelen()) {
      set_namelen(from.namelen());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void gethostname_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.gethostname_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gethostname_pol::CopyFrom(const gethostname_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.gethostname_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gethostname_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void gethostname_pol::Swap(gethostname_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gethostname_pol::InternalSwap(gethostname_pol* other) {
  std::swap(name_, other->name_);
  std::swap(namelen_, other->namelen_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata gethostname_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// gethostname_pol

// required .common.memory_pol name = 1;
bool gethostname_pol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void gethostname_pol::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void gethostname_pol::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void gethostname_pol::clear_name() {
  if (name_ != NULL) name_->::common::memory_pol::Clear();
  clear_has_name();
}
const ::common::memory_pol& gethostname_pol::name() const {
  // @@protoc_insertion_point(field_get:libcall_types.gethostname_pol.name)
  return name_ != NULL ? *name_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* gethostname_pol::mutable_name() {
  set_has_name();
  if (name_ == NULL) {
    name_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.gethostname_pol.name)
  return name_;
}
::common::memory_pol* gethostname_pol::release_name() {
  // @@protoc_insertion_point(field_release:libcall_types.gethostname_pol.name)
  clear_has_name();
  ::common::memory_pol* temp = name_;
  name_ = NULL;
  return temp;
}
void gethostname_pol::set_allocated_name(::common::memory_pol* name) {
  delete name_;
  name_ = name;
  if (name) {
    set_has_name();
  } else {
    clear_has_name();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.gethostname_pol.name)
}

// required .common.action namelen = 2;
bool gethostname_pol::has_namelen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void gethostname_pol::set_has_namelen() {
  _has_bits_[0] |= 0x00000002u;
}
void gethostname_pol::clear_has_namelen() {
  _has_bits_[0] &= ~0x00000002u;
}
void gethostname_pol::clear_namelen() {
  namelen_ = 0;
  clear_has_namelen();
}
::common::action gethostname_pol::namelen() const {
  // @@protoc_insertion_point(field_get:libcall_types.gethostname_pol.namelen)
  return static_cast< ::common::action >(namelen_);
}
void gethostname_pol::set_namelen(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_namelen();
  namelen_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.gethostname_pol.namelen)
}

// required .common.action ret = 3;
bool gethostname_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void gethostname_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void gethostname_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void gethostname_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action gethostname_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.gethostname_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void gethostname_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.gethostname_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int free_pol::kPtrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

free_pol::free_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.free_pol)
}
free_pol::free_pol(const free_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ptr_ = from.ptr_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.free_pol)
}

void free_pol::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = 0;
}

free_pol::~free_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.free_pol)
  SharedDtor();
}

void free_pol::SharedDtor() {
}

void free_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* free_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[28].descriptor;
}

const free_pol& free_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

free_pol* free_pol::New(::google::protobuf::Arena* arena) const {
  free_pol* n = new free_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void free_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.free_pol)
  ptr_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool free_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.free_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action ptr = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ptr(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.free_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.free_pol)
  return false;
#undef DO_
}

void free_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.free_pol)
  // required .common.action ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.free_pol)
}

::google::protobuf::uint8* free_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.free_pol)
  // required .common.action ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.free_pol)
  return target;
}

size_t free_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.free_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .common.action ptr = 1;
  if (has_ptr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptr());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void free_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.free_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const free_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const free_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.free_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.free_pol)
    MergeFrom(*source);
  }
}

void free_pol::MergeFrom(const free_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.free_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptr()) {
    set_ptr(from.ptr());
  }
}

void free_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.free_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void free_pol::CopyFrom(const free_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.free_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool free_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void free_pol::Swap(free_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void free_pol::InternalSwap(free_pol* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata free_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// free_pol

// required .common.action ptr = 1;
bool free_pol::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void free_pol::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
void free_pol::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
void free_pol::clear_ptr() {
  ptr_ = 0;
  clear_has_ptr();
}
::common::action free_pol::ptr() const {
  // @@protoc_insertion_point(field_get:libcall_types.free_pol.ptr)
  return static_cast< ::common::action >(ptr_);
}
void free_pol::set_ptr(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.free_pol.ptr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memcpy_pol::kDestFieldNumber;
const int memcpy_pol::kSrcFieldNumber;
const int memcpy_pol::kSizeFieldNumber;
const int memcpy_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memcpy_pol::memcpy_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcpy_pol)
}
memcpy_pol::memcpy_pol(const memcpy_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dest()) {
    dest_ = new ::common::memory_pol(*from.dest_);
  } else {
    dest_ = NULL;
  }
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcpy_pol)
}

void memcpy_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dest_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dest_) + sizeof(ret_));
}

memcpy_pol::~memcpy_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.memcpy_pol)
  SharedDtor();
}

void memcpy_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dest_;
  }
  if (this != internal_default_instance()) {
    delete src_;
  }
}

void memcpy_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memcpy_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[29].descriptor;
}

const memcpy_pol& memcpy_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

memcpy_pol* memcpy_pol::New(::google::protobuf::Arena* arena) const {
  memcpy_pol* n = new memcpy_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memcpy_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcpy_pol)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dest()) {
      GOOGLE_DCHECK(dest_ != NULL);
      dest_->::common::memory_pol::Clear();
    }
    if (has_src()) {
      GOOGLE_DCHECK(src_ != NULL);
      src_->::common::memory_pol::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool memcpy_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcpy_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol dest = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol src = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcpy_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcpy_pol)
  return false;
#undef DO_
}

void memcpy_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcpy_pol)
  // required .common.memory_pol dest = 1;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dest_, output);
  }

  // required .common.memory_pol src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->src_, output);
  }

  // required .common.action size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->size(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcpy_pol)
}

::google::protobuf::uint8* memcpy_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcpy_pol)
  // required .common.memory_pol dest = 1;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dest_, false, target);
  }

  // required .common.memory_pol src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->src_, false, target);
  }

  // required .common.action size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->size(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcpy_pol)
  return target;
}

size_t memcpy_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcpy_pol)
  size_t total_size = 0;

  if (has_dest()) {
    // required .common.memory_pol dest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dest_);
  }

  if (has_src()) {
    // required .common.memory_pol src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_size()) {
    // required .common.action size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t memcpy_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcpy_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol dest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dest_);

    // required .common.memory_pol src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required .common.action size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memcpy_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const memcpy_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const memcpy_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcpy_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcpy_pol)
    MergeFrom(*source);
  }
}

void memcpy_pol::MergeFrom(const memcpy_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_dest()) {
      mutable_dest()->::common::memory_pol::MergeFrom(from.dest());
    }
    if (from.has_src()) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void memcpy_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcpy_pol::CopyFrom(const memcpy_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcpy_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memcpy_pol::Swap(memcpy_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memcpy_pol::InternalSwap(memcpy_pol* other) {
  std::swap(dest_, other->dest_);
  std::swap(src_, other->src_);
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memcpy_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memcpy_pol

// required .common.memory_pol dest = 1;
bool memcpy_pol::has_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void memcpy_pol::set_has_dest() {
  _has_bits_[0] |= 0x00000001u;
}
void memcpy_pol::clear_has_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
void memcpy_pol::clear_dest() {
  if (dest_ != NULL) dest_->::common::memory_pol::Clear();
  clear_has_dest();
}
const ::common::memory_pol& memcpy_pol::dest() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_pol.dest)
  return dest_ != NULL ? *dest_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* memcpy_pol::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) {
    dest_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.memcpy_pol.dest)
  return dest_;
}
::common::memory_pol* memcpy_pol::release_dest() {
  // @@protoc_insertion_point(field_release:libcall_types.memcpy_pol.dest)
  clear_has_dest();
  ::common::memory_pol* temp = dest_;
  dest_ = NULL;
  return temp;
}
void memcpy_pol::set_allocated_dest(::common::memory_pol* dest) {
  delete dest_;
  dest_ = dest;
  if (dest) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.memcpy_pol.dest)
}

// required .common.memory_pol src = 2;
bool memcpy_pol::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void memcpy_pol::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
void memcpy_pol::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
void memcpy_pol::clear_src() {
  if (src_ != NULL) src_->::common::memory_pol::Clear();
  clear_has_src();
}
const ::common::memory_pol& memcpy_pol::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_pol.src)
  return src_ != NULL ? *src_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* memcpy_pol::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.memcpy_pol.src)
  return src_;
}
::common::memory_pol* memcpy_pol::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.memcpy_pol.src)
  clear_has_src();
  ::common::memory_pol* temp = src_;
  src_ = NULL;
  return temp;
}
void memcpy_pol::set_allocated_src(::common::memory_pol* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.memcpy_pol.src)
}

// required .common.action size = 3;
bool memcpy_pol::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void memcpy_pol::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void memcpy_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void memcpy_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action memcpy_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_pol.size)
  return static_cast< ::common::action >(size_);
}
void memcpy_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcpy_pol.size)
}

// required .common.action ret = 4;
bool memcpy_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void memcpy_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void memcpy_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void memcpy_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action memcpy_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void memcpy_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcpy_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memset_pol::kSFieldNumber;
const int memset_pol::kCFieldNumber;
const int memset_pol::kSizeFieldNumber;
const int memset_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memset_pol::memset_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memset_pol)
}
memset_pol::memset_pol(const memset_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s()) {
    s_ = new ::common::memory_pol(*from.s_);
  } else {
    s_ = NULL;
  }
  ::memcpy(&c_, &from.c_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&c_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memset_pol)
}

void memset_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s_) + sizeof(ret_));
}

memset_pol::~memset_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.memset_pol)
  SharedDtor();
}

void memset_pol::SharedDtor() {
  if (this != internal_default_instance()) {
    delete s_;
  }
}

void memset_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memset_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[30].descriptor;
}

const memset_pol& memset_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

memset_pol* memset_pol::New(::google::protobuf::Arena* arena) const {
  memset_pol* n = new memset_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memset_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memset_pol)
  if (has_s()) {
    GOOGLE_DCHECK(s_ != NULL);
    s_->::common::memory_pol::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&c_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&c_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool memset_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memset_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol s = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action c = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_c(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memset_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memset_pol)
  return false;
#undef DO_
}

void memset_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memset_pol)
  // required .common.memory_pol s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->s_, output);
  }

  // required .common.action c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->c(), output);
  }

  // required .common.action size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->size(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memset_pol)
}

::google::protobuf::uint8* memset_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memset_pol)
  // required .common.memory_pol s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->s_, false, target);
  }

  // required .common.action c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->c(), target);
  }

  // required .common.action size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->size(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memset_pol)
  return target;
}

size_t memset_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memset_pol)
  size_t total_size = 0;

  if (has_s()) {
    // required .common.memory_pol s = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_);
  }

  if (has_c()) {
    // required .common.action c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->c());
  }

  if (has_size()) {
    // required .common.action size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t memset_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memset_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol s = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_);

    // required .common.action c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->c());

    // required .common.action size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memset_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memset_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const memset_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const memset_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memset_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memset_pol)
    MergeFrom(*source);
  }
}

void memset_pol::MergeFrom(const memset_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memset_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s()) {
      mutable_s()->::common::memory_pol::MergeFrom(from.s());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void memset_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memset_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memset_pol::CopyFrom(const memset_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memset_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memset_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memset_pol::Swap(memset_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memset_pol::InternalSwap(memset_pol* other) {
  std::swap(s_, other->s_);
  std::swap(c_, other->c_);
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memset_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memset_pol

// required .common.memory_pol s = 1;
bool memset_pol::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void memset_pol::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void memset_pol::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void memset_pol::clear_s() {
  if (s_ != NULL) s_->::common::memory_pol::Clear();
  clear_has_s();
}
const ::common::memory_pol& memset_pol::s() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_pol.s)
  return s_ != NULL ? *s_
                         : *::common::memory_pol::internal_default_instance();
}
::common::memory_pol* memset_pol::mutable_s() {
  set_has_s();
  if (s_ == NULL) {
    s_ = new ::common::memory_pol;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.memset_pol.s)
  return s_;
}
::common::memory_pol* memset_pol::release_s() {
  // @@protoc_insertion_point(field_release:libcall_types.memset_pol.s)
  clear_has_s();
  ::common::memory_pol* temp = s_;
  s_ = NULL;
  return temp;
}
void memset_pol::set_allocated_s(::common::memory_pol* s) {
  delete s_;
  s_ = s;
  if (s) {
    set_has_s();
  } else {
    clear_has_s();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.memset_pol.s)
}

// required .common.action c = 2;
bool memset_pol::has_c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void memset_pol::set_has_c() {
  _has_bits_[0] |= 0x00000002u;
}
void memset_pol::clear_has_c() {
  _has_bits_[0] &= ~0x00000002u;
}
void memset_pol::clear_c() {
  c_ = 0;
  clear_has_c();
}
::common::action memset_pol::c() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_pol.c)
  return static_cast< ::common::action >(c_);
}
void memset_pol::set_c(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memset_pol.c)
}

// required .common.action size = 3;
bool memset_pol::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void memset_pol::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void memset_pol::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void memset_pol::clear_size() {
  size_ = 0;
  clear_has_size();
}
::common::action memset_pol::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_pol.size)
  return static_cast< ::common::action >(size_);
}
void memset_pol::set_size(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memset_pol.size)
}

// required .common.action ret = 4;
bool memset_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void memset_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void memset_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void memset_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action memset_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void memset_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memset_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fgetc_pol::kStreamFieldNumber;
const int fgetc_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fgetc_pol::fgetc_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fgetc_pol)
}
fgetc_pol::fgetc_pol(const fgetc_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fgetc_pol)
}

void fgetc_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
}

fgetc_pol::~fgetc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fgetc_pol)
  SharedDtor();
}

void fgetc_pol::SharedDtor() {
}

void fgetc_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fgetc_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[31].descriptor;
}

const fgetc_pol& fgetc_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fgetc_pol* fgetc_pol::New(::google::protobuf::Arena* arena) const {
  fgetc_pol* n = new fgetc_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fgetc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fgetc_pol)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fgetc_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fgetc_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action stream = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_stream(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fgetc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fgetc_pol)
  return false;
#undef DO_
}

void fgetc_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fgetc_pol)
  // required .common.action stream = 1;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stream(), output);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fgetc_pol)
}

::google::protobuf::uint8* fgetc_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fgetc_pol)
  // required .common.action stream = 1;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stream(), target);
  }

  // required .common.action ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fgetc_pol)
  return target;
}

size_t fgetc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fgetc_pol)
  size_t total_size = 0;

  if (has_stream()) {
    // required .common.action stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream());
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t fgetc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fgetc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.action stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream());

    // required .common.action ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fgetc_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fgetc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fgetc_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fgetc_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fgetc_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fgetc_pol)
    MergeFrom(*source);
  }
}

void fgetc_pol::MergeFrom(const fgetc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fgetc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fgetc_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fgetc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fgetc_pol::CopyFrom(const fgetc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fgetc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fgetc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fgetc_pol::Swap(fgetc_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fgetc_pol::InternalSwap(fgetc_pol* other) {
  std::swap(stream_, other->stream_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fgetc_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fgetc_pol

// required .common.action stream = 1;
bool fgetc_pol::has_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fgetc_pol::set_has_stream() {
  _has_bits_[0] |= 0x00000001u;
}
void fgetc_pol::clear_has_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
void fgetc_pol::clear_stream() {
  stream_ = 0;
  clear_has_stream();
}
::common::action fgetc_pol::stream() const {
  // @@protoc_insertion_point(field_get:libcall_types.fgetc_pol.stream)
  return static_cast< ::common::action >(stream_);
}
void fgetc_pol::set_stream(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_stream();
  stream_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fgetc_pol.stream)
}

// required .common.action ret = 2;
bool fgetc_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fgetc_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void fgetc_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void fgetc_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action fgetc_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fgetc_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void fgetc_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fgetc_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lseek_pol::kFdFieldNumber;
const int lseek_pol::kOffsetFieldNumber;
const int lseek_pol::kWhenceFieldNumber;
const int lseek_pol::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lseek_pol::lseek_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.lseek_pol)
}
lseek_pol::lseek_pol(const lseek_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fd_, &from.fd_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.lseek_pol)
}

void lseek_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
}

lseek_pol::~lseek_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.lseek_pol)
  SharedDtor();
}

void lseek_pol::SharedDtor() {
}

void lseek_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lseek_pol::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[32].descriptor;
}

const lseek_pol& lseek_pol::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

lseek_pol* lseek_pol::New(::google::protobuf::Arena* arena) const {
  lseek_pol* n = new lseek_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lseek_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.lseek_pol)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lseek_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.lseek_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action fd = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_fd(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action offset = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_offset(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action whence = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_whence(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.lseek_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.lseek_pol)
  return false;
#undef DO_
}

void lseek_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.lseek_pol)
  // required .common.action fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fd(), output);
  }

  // required .common.action offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->offset(), output);
  }

  // required .common.action whence = 3;
  if (has_whence()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->whence(), output);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.lseek_pol)
}

::google::protobuf::uint8* lseek_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.lseek_pol)
  // required .common.action fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fd(), target);
  }

  // required .common.action offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->offset(), target);
  }

  // required .common.action whence = 3;
  if (has_whence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->whence(), target);
  }

  // required .common.action ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.lseek_pol)
  return target;
}

size_t lseek_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.lseek_pol)
  size_t total_size = 0;

  if (has_fd()) {
    // required .common.action fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fd());
  }

  if (has_offset()) {
    // required .common.action offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());
  }

  if (has_whence()) {
    // required .common.action whence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->whence());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t lseek_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.lseek_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fd());

    // required .common.action offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());

    // required .common.action whence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->whence());

    // required .common.action ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lseek_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.lseek_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const lseek_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lseek_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.lseek_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.lseek_pol)
    MergeFrom(*source);
  }
}

void lseek_pol::MergeFrom(const lseek_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.lseek_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_whence()) {
      set_whence(from.whence());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void lseek_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.lseek_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lseek_pol::CopyFrom(const lseek_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.lseek_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lseek_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void lseek_pol::Swap(lseek_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lseek_pol::InternalSwap(lseek_pol* other) {
  std::swap(fd_, other->fd_);
  std::swap(offset_, other->offset_);
  std::swap(whence_, other->whence_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lseek_pol::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lseek_pol

// required .common.action fd = 1;
bool lseek_pol::has_fd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void lseek_pol::set_has_fd() {
  _has_bits_[0] |= 0x00000001u;
}
void lseek_pol::clear_has_fd() {
  _has_bits_[0] &= ~0x00000001u;
}
void lseek_pol::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
::common::action lseek_pol::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_pol.fd)
  return static_cast< ::common::action >(fd_);
}
void lseek_pol::set_fd(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_pol.fd)
}

// required .common.action offset = 2;
bool lseek_pol::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void lseek_pol::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void lseek_pol::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void lseek_pol::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
::common::action lseek_pol::offset() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_pol.offset)
  return static_cast< ::common::action >(offset_);
}
void lseek_pol::set_offset(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_pol.offset)
}

// required .common.action whence = 3;
bool lseek_pol::has_whence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void lseek_pol::set_has_whence() {
  _has_bits_[0] |= 0x00000004u;
}
void lseek_pol::clear_has_whence() {
  _has_bits_[0] &= ~0x00000004u;
}
void lseek_pol::clear_whence() {
  whence_ = 0;
  clear_has_whence();
}
::common::action lseek_pol::whence() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_pol.whence)
  return static_cast< ::common::action >(whence_);
}
void lseek_pol::set_whence(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_whence();
  whence_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_pol.whence)
}

// required .common.action ret = 4;
bool lseek_pol::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void lseek_pol::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void lseek_pol::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void lseek_pol::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
::common::action lseek_pol::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_pol.ret)
  return static_cast< ::common::action >(ret_);
}
void lseek_pol::set_ret(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_pol.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

exit_t::exit_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.exit_t)
}
exit_t::exit_t(const exit_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.exit_t)
}

void exit_t::SharedCtor() {
  _cached_size_ = 0;
}

exit_t::~exit_t() {
  // @@protoc_insertion_point(destructor:libcall_types.exit_t)
  SharedDtor();
}

void exit_t::SharedDtor() {
}

void exit_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[33].descriptor;
}

const exit_t& exit_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

exit_t* exit_t::New(::google::protobuf::Arena* arena) const {
  exit_t* n = new exit_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void exit_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.exit_t)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool exit_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.exit_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.exit_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.exit_t)
  return false;
#undef DO_
}

void exit_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.exit_t)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.exit_t)
}

::google::protobuf::uint8* exit_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.exit_t)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.exit_t)
  return target;
}

size_t exit_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.exit_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.exit_t)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const exit_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.exit_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.exit_t)
    MergeFrom(*source);
  }
}

void exit_t::MergeFrom(const exit_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.exit_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void exit_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.exit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_t::CopyFrom(const exit_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.exit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_t::IsInitialized() const {
  return true;
}

void exit_t::Swap(exit_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void exit_t::InternalSwap(exit_t* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata exit_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// exit_t

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int generic_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

generic_t::generic_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.generic_t)
}
generic_t::generic_t(const generic_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.generic_t)
}

void generic_t::SharedCtor() {
  _cached_size_ = 0;
  ret_ = GOOGLE_ULONGLONG(0);
}

generic_t::~generic_t() {
  // @@protoc_insertion_point(destructor:libcall_types.generic_t)
  SharedDtor();
}

void generic_t::SharedDtor() {
}

void generic_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* generic_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[34].descriptor;
}

const generic_t& generic_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

generic_t* generic_t::New(::google::protobuf::Arena* arena) const {
  generic_t* n = new generic_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void generic_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.generic_t)
  ret_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool generic_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.generic_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ret = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.generic_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.generic_t)
  return false;
#undef DO_
}

void generic_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.generic_t)
  // required uint64 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.generic_t)
}

::google::protobuf::uint8* generic_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.generic_t)
  // required uint64 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.generic_t)
  return target;
}

size_t generic_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.generic_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void generic_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  const generic_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const generic_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.generic_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.generic_t)
    MergeFrom(*source);
  }
}

void generic_t::MergeFrom(const generic_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ret()) {
    set_ret(from.ret());
  }
}

void generic_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generic_t::CopyFrom(const generic_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generic_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void generic_t::Swap(generic_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void generic_t::InternalSwap(generic_t* other) {
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata generic_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// generic_t

// required uint64 ret = 1;
bool generic_t::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void generic_t::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void generic_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void generic_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 generic_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.generic_t.ret)
  return ret_;
}
void generic_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.generic_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fscanf_elem_t::kTypeFieldNumber;
const int fscanf_elem_t::kAddrFieldNumber;
const int fscanf_elem_t::kValueDecFieldNumber;
const int fscanf_elem_t::kValueStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fscanf_elem_t::fscanf_elem_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fscanf_elem_t)
}
fscanf_elem_t::fscanf_elem_t(const fscanf_elem_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&addr_) + sizeof(type_));
  clear_has_fscanf_cnt();
  switch (from.fscanf_cnt_case()) {
    case kValueDec: {
      set_value_dec(from.value_dec());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:libcall_types.fscanf_elem_t)
}

void fscanf_elem_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&addr_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&addr_) + sizeof(type_));
  clear_has_fscanf_cnt();
}

fscanf_elem_t::~fscanf_elem_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fscanf_elem_t)
  SharedDtor();
}

void fscanf_elem_t::SharedDtor() {
  if (has_fscanf_cnt()) {
    clear_fscanf_cnt();
  }
}

void fscanf_elem_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fscanf_elem_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[35].descriptor;
}

const fscanf_elem_t& fscanf_elem_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fscanf_elem_t* fscanf_elem_t::New(::google::protobuf::Arena* arena) const {
  fscanf_elem_t* n = new fscanf_elem_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fscanf_elem_t::clear_fscanf_cnt() {
// @@protoc_insertion_point(one_of_clear_start:libcall_types.fscanf_elem_t)
  switch (fscanf_cnt_case()) {
    case kValueDec: {
      // No need to clear
      break;
    }
    case kValueString: {
      fscanf_cnt_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FSCANF_CNT_NOT_SET;
}


void fscanf_elem_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fscanf_elem_t)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&addr_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&addr_) + sizeof(type_));
  }
  clear_fscanf_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fscanf_elem_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fscanf_elem_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .libcall_types.fscanf_enum type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::libcall_types::fscanf_enum_IsValid(value)) {
            set_type(static_cast< ::libcall_types::fscanf_enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 addr = 2;
      case 2: {
        if (tag == 16u) {
          set_has_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value_dec = 3;
      case 3: {
        if (tag == 24u) {
          clear_fscanf_cnt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fscanf_cnt_.value_dec_)));
          set_has_value_dec();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value_string = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_string().data(), this->value_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "libcall_types.fscanf_elem_t.value_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fscanf_elem_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fscanf_elem_t)
  return false;
#undef DO_
}

void fscanf_elem_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fscanf_elem_t)
  // required .libcall_types.fscanf_enum type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->addr(), output);
  }

  switch (fscanf_cnt_case()) {
    case kValueDec:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value_dec(), output);
      break;
    case kValueString:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->value_string().data(), this->value_string().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "libcall_types.fscanf_elem_t.value_string");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->value_string(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fscanf_elem_t)
}

::google::protobuf::uint8* fscanf_elem_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fscanf_elem_t)
  // required .libcall_types.fscanf_enum type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 addr = 2;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->addr(), target);
  }

  switch (fscanf_cnt_case()) {
    case kValueDec:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->value_dec(), target);
      break;
    case kValueString:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->value_string().data(), this->value_string().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "libcall_types.fscanf_elem_t.value_string");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          4, this->value_string(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fscanf_elem_t)
  return target;
}

size_t fscanf_elem_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fscanf_elem_t)
  size_t total_size = 0;

  if (has_addr()) {
    // required uint64 addr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_type()) {
    // required .libcall_types.fscanf_enum type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t fscanf_elem_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fscanf_elem_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 addr = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required .libcall_types.fscanf_enum type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  switch (fscanf_cnt_case()) {
    // optional uint64 value_dec = 3;
    case kValueDec: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value_dec());
      break;
    }
    // optional string value_string = 4;
    case kValueString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_string());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fscanf_elem_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fscanf_elem_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fscanf_elem_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fscanf_elem_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fscanf_elem_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fscanf_elem_t)
    MergeFrom(*source);
  }
}

void fscanf_elem_t::MergeFrom(const fscanf_elem_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fscanf_elem_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  switch (from.fscanf_cnt_case()) {
    case kValueDec: {
      set_value_dec(from.value_dec());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
}

void fscanf_elem_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fscanf_elem_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fscanf_elem_t::CopyFrom(const fscanf_elem_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fscanf_elem_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fscanf_elem_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fscanf_elem_t::Swap(fscanf_elem_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fscanf_elem_t::InternalSwap(fscanf_elem_t* other) {
  std::swap(addr_, other->addr_);
  std::swap(type_, other->type_);
  std::swap(fscanf_cnt_, other->fscanf_cnt_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fscanf_elem_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fscanf_elem_t

// required .libcall_types.fscanf_enum type = 1;
bool fscanf_elem_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fscanf_elem_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void fscanf_elem_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void fscanf_elem_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
::libcall_types::fscanf_enum fscanf_elem_t::type() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_elem_t.type)
  return static_cast< ::libcall_types::fscanf_enum >(type_);
}
void fscanf_elem_t::set_type(::libcall_types::fscanf_enum value) {
  assert(::libcall_types::fscanf_enum_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_elem_t.type)
}

// required uint64 addr = 2;
bool fscanf_elem_t::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fscanf_elem_t::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void fscanf_elem_t::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void fscanf_elem_t::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
  clear_has_addr();
}
::google::protobuf::uint64 fscanf_elem_t::addr() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_elem_t.addr)
  return addr_;
}
void fscanf_elem_t::set_addr(::google::protobuf::uint64 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_elem_t.addr)
}

// optional uint64 value_dec = 3;
bool fscanf_elem_t::has_value_dec() const {
  return fscanf_cnt_case() == kValueDec;
}
void fscanf_elem_t::set_has_value_dec() {
  _oneof_case_[0] = kValueDec;
}
void fscanf_elem_t::clear_value_dec() {
  if (has_value_dec()) {
    fscanf_cnt_.value_dec_ = GOOGLE_ULONGLONG(0);
    clear_has_fscanf_cnt();
  }
}
::google::protobuf::uint64 fscanf_elem_t::value_dec() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_elem_t.value_dec)
  if (has_value_dec()) {
    return fscanf_cnt_.value_dec_;
  }
  return GOOGLE_ULONGLONG(0);
}
void fscanf_elem_t::set_value_dec(::google::protobuf::uint64 value) {
  if (!has_value_dec()) {
    clear_fscanf_cnt();
    set_has_value_dec();
  }
  fscanf_cnt_.value_dec_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_elem_t.value_dec)
}

// optional string value_string = 4;
bool fscanf_elem_t::has_value_string() const {
  return fscanf_cnt_case() == kValueString;
}
void fscanf_elem_t::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
void fscanf_elem_t::clear_value_string() {
  if (has_value_string()) {
    fscanf_cnt_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_fscanf_cnt();
  }
}
const ::std::string& fscanf_elem_t::value_string() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_elem_t.value_string)
  if (has_value_string()) {
    return fscanf_cnt_.value_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void fscanf_elem_t::set_value_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_elem_t.value_string)
  if (!has_value_string()) {
    clear_fscanf_cnt();
    set_has_value_string();
    fscanf_cnt_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  fscanf_cnt_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_elem_t.value_string)
}
#if LANG_CXX11
void fscanf_elem_t::set_value_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_elem_t.value_string)
  if (!has_value_string()) {
    clear_fscanf_cnt();
    set_has_value_string();
    fscanf_cnt_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  fscanf_cnt_.value_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:libcall_types.fscanf_elem_t.value_string)
}
#endif
void fscanf_elem_t::set_value_string(const char* value) {
  if (!has_value_string()) {
    clear_fscanf_cnt();
    set_has_value_string();
    fscanf_cnt_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  fscanf_cnt_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:libcall_types.fscanf_elem_t.value_string)
}
void fscanf_elem_t::set_value_string(const char* value, size_t size) {
  if (!has_value_string()) {
    clear_fscanf_cnt();
    set_has_value_string();
    fscanf_cnt_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  fscanf_cnt_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:libcall_types.fscanf_elem_t.value_string)
}
::std::string* fscanf_elem_t::mutable_value_string() {
  if (!has_value_string()) {
    clear_fscanf_cnt();
    set_has_value_string();
    fscanf_cnt_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.fscanf_elem_t.value_string)
  return fscanf_cnt_.value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* fscanf_elem_t::release_value_string() {
  // @@protoc_insertion_point(field_release:libcall_types.fscanf_elem_t.value_string)
  if (has_value_string()) {
    clear_has_fscanf_cnt();
    return fscanf_cnt_.value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void fscanf_elem_t::set_allocated_value_string(::std::string* value_string) {
  if (!has_value_string()) {
    fscanf_cnt_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_fscanf_cnt();
  if (value_string != NULL) {
    set_has_value_string();
    fscanf_cnt_.value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value_string);
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.fscanf_elem_t.value_string)
}

bool fscanf_elem_t::has_fscanf_cnt() const {
  return fscanf_cnt_case() != FSCANF_CNT_NOT_SET;
}
void fscanf_elem_t::clear_has_fscanf_cnt() {
  _oneof_case_[0] = FSCANF_CNT_NOT_SET;
}
fscanf_elem_t::FscanfCntCase fscanf_elem_t::fscanf_cnt_case() const {
  return fscanf_elem_t::FscanfCntCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fscanf_t::kStreamFieldNumber;
const int fscanf_t::kElemsFieldNumber;
const int fscanf_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fscanf_t::fscanf_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fscanf_t)
}
fscanf_t::fscanf_t(const fscanf_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fscanf_t)
}

void fscanf_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
}

fscanf_t::~fscanf_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fscanf_t)
  SharedDtor();
}

void fscanf_t::SharedDtor() {
}

void fscanf_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fscanf_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[36].descriptor;
}

const fscanf_t& fscanf_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fscanf_t* fscanf_t::New(::google::protobuf::Arena* arena) const {
  fscanf_t* n = new fscanf_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fscanf_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fscanf_t)
  elems_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fscanf_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fscanf_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stream = 1;
      case 1: {
        if (tag == 8u) {
          set_has_stream();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .libcall_types.fscanf_elem_t elems = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_elems()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fscanf_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fscanf_t)
  return false;
#undef DO_
}

void fscanf_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fscanf_t)
  // required uint64 stream = 1;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream(), output);
  }

  // repeated .libcall_types.fscanf_elem_t elems = 2;
  for (unsigned int i = 0, n = this->elems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->elems(i), output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fscanf_t)
}

::google::protobuf::uint8* fscanf_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fscanf_t)
  // required uint64 stream = 1;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream(), target);
  }

  // repeated .libcall_types.fscanf_elem_t elems = 2;
  for (unsigned int i = 0, n = this->elems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->elems(i), false, target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fscanf_t)
  return target;
}

size_t fscanf_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fscanf_t)
  size_t total_size = 0;

  if (has_stream()) {
    // required uint64 stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fscanf_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fscanf_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream());

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .libcall_types.fscanf_elem_t elems = 2;
  {
    unsigned int count = this->elems_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elems(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fscanf_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fscanf_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fscanf_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fscanf_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fscanf_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fscanf_t)
    MergeFrom(*source);
  }
}

void fscanf_t::MergeFrom(const fscanf_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fscanf_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  elems_.MergeFrom(from.elems_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fscanf_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fscanf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fscanf_t::CopyFrom(const fscanf_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fscanf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fscanf_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->elems())) return false;
  return true;
}

void fscanf_t::Swap(fscanf_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fscanf_t::InternalSwap(fscanf_t* other) {
  elems_.UnsafeArenaSwap(&other->elems_);
  std::swap(stream_, other->stream_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fscanf_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fscanf_t

// required uint64 stream = 1;
bool fscanf_t::has_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fscanf_t::set_has_stream() {
  _has_bits_[0] |= 0x00000001u;
}
void fscanf_t::clear_has_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
void fscanf_t::clear_stream() {
  stream_ = GOOGLE_ULONGLONG(0);
  clear_has_stream();
}
::google::protobuf::uint64 fscanf_t::stream() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_t.stream)
  return stream_;
}
void fscanf_t::set_stream(::google::protobuf::uint64 value) {
  set_has_stream();
  stream_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_t.stream)
}

// repeated .libcall_types.fscanf_elem_t elems = 2;
int fscanf_t::elems_size() const {
  return elems_.size();
}
void fscanf_t::clear_elems() {
  elems_.Clear();
}
const ::libcall_types::fscanf_elem_t& fscanf_t::elems(int index) const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_t.elems)
  return elems_.Get(index);
}
::libcall_types::fscanf_elem_t* fscanf_t::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:libcall_types.fscanf_t.elems)
  return elems_.Mutable(index);
}
::libcall_types::fscanf_elem_t* fscanf_t::add_elems() {
  // @@protoc_insertion_point(field_add:libcall_types.fscanf_t.elems)
  return elems_.Add();
}
::google::protobuf::RepeatedPtrField< ::libcall_types::fscanf_elem_t >*
fscanf_t::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:libcall_types.fscanf_t.elems)
  return &elems_;
}
const ::google::protobuf::RepeatedPtrField< ::libcall_types::fscanf_elem_t >&
fscanf_t::elems() const {
  // @@protoc_insertion_point(field_list:libcall_types.fscanf_t.elems)
  return elems_;
}

// required uint64 ret = 3;
bool fscanf_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fscanf_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void fscanf_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void fscanf_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 fscanf_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fscanf_t.ret)
  return ret_;
}
void fscanf_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fscanf_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ctype_b_loc_t::kTableFieldNumber;
const int ctype_b_loc_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ctype_b_loc_t::ctype_b_loc_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.ctype_b_loc_t)
}
ctype_b_loc_t::ctype_b_loc_t(const ctype_b_loc_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::common::memory_t(*from.table_);
  } else {
    table_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.ctype_b_loc_t)
}

void ctype_b_loc_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&table_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&table_) + sizeof(ret_));
}

ctype_b_loc_t::~ctype_b_loc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.ctype_b_loc_t)
  SharedDtor();
}

void ctype_b_loc_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete table_;
  }
}

void ctype_b_loc_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ctype_b_loc_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[37].descriptor;
}

const ctype_b_loc_t& ctype_b_loc_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

ctype_b_loc_t* ctype_b_loc_t::New(::google::protobuf::Arena* arena) const {
  ctype_b_loc_t* n = new ctype_b_loc_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ctype_b_loc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.ctype_b_loc_t)
  if (has_table()) {
    GOOGLE_DCHECK(table_ != NULL);
    table_->::common::memory_t::Clear();
  }
  ret_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ctype_b_loc_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.ctype_b_loc_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t table = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.ctype_b_loc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.ctype_b_loc_t)
  return false;
#undef DO_
}

void ctype_b_loc_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.ctype_b_loc_t)
  // required .common.memory_t table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->table_, output);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.ctype_b_loc_t)
}

::google::protobuf::uint8* ctype_b_loc_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.ctype_b_loc_t)
  // required .common.memory_t table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->table_, false, target);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.ctype_b_loc_t)
  return target;
}

size_t ctype_b_loc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.ctype_b_loc_t)
  size_t total_size = 0;

  if (has_table()) {
    // required .common.memory_t table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t ctype_b_loc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.ctype_b_loc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->table_);

    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ctype_b_loc_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.ctype_b_loc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ctype_b_loc_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ctype_b_loc_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.ctype_b_loc_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.ctype_b_loc_t)
    MergeFrom(*source);
  }
}

void ctype_b_loc_t::MergeFrom(const ctype_b_loc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.ctype_b_loc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_table()) {
      mutable_table()->::common::memory_t::MergeFrom(from.table());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void ctype_b_loc_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.ctype_b_loc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctype_b_loc_t::CopyFrom(const ctype_b_loc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.ctype_b_loc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctype_b_loc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_table()) {
    if (!this->table_->IsInitialized()) return false;
  }
  return true;
}

void ctype_b_loc_t::Swap(ctype_b_loc_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ctype_b_loc_t::InternalSwap(ctype_b_loc_t* other) {
  std::swap(table_, other->table_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ctype_b_loc_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ctype_b_loc_t

// required .common.memory_t table = 1;
bool ctype_b_loc_t::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ctype_b_loc_t::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void ctype_b_loc_t::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void ctype_b_loc_t::clear_table() {
  if (table_ != NULL) table_->::common::memory_t::Clear();
  clear_has_table();
}
const ::common::memory_t& ctype_b_loc_t::table() const {
  // @@protoc_insertion_point(field_get:libcall_types.ctype_b_loc_t.table)
  return table_ != NULL ? *table_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* ctype_b_loc_t::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    table_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.ctype_b_loc_t.table)
  return table_;
}
::common::memory_t* ctype_b_loc_t::release_table() {
  // @@protoc_insertion_point(field_release:libcall_types.ctype_b_loc_t.table)
  clear_has_table();
  ::common::memory_t* temp = table_;
  table_ = NULL;
  return temp;
}
void ctype_b_loc_t::set_allocated_table(::common::memory_t* table) {
  delete table_;
  table_ = table;
  if (table) {
    set_has_table();
  } else {
    clear_has_table();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.ctype_b_loc_t.table)
}

// required uint64 ret = 2;
bool ctype_b_loc_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ctype_b_loc_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void ctype_b_loc_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void ctype_b_loc_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 ctype_b_loc_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.ctype_b_loc_t.ret)
  return ret_;
}
void ctype_b_loc_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.ctype_b_loc_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int read_t::kFdFieldNumber;
const int read_t::kBufFieldNumber;
const int read_t::kCountFieldNumber;
const int read_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

read_t::read_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.read_t)
}
read_t::read_t(const read_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_t(*from.buf_);
  } else {
    buf_ = NULL;
  }
  ::memcpy(&fd_, &from.fd_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.read_t)
}

void read_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buf_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&buf_) + sizeof(ret_));
}

read_t::~read_t() {
  // @@protoc_insertion_point(destructor:libcall_types.read_t)
  SharedDtor();
}

void read_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buf_;
  }
}

void read_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* read_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[38].descriptor;
}

const read_t& read_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

read_t* read_t::New(::google::protobuf::Arena* arena) const {
  read_t* n = new read_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void read_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.read_t)
  if (has_buf()) {
    GOOGLE_DCHECK(buf_ != NULL);
    buf_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool read_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.read_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fd = 1;
      case 1: {
        if (tag == 8u) {
          set_has_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t buf = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 count = 3;
      case 3: {
        if (tag == 24u) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.read_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.read_t)
  return false;
#undef DO_
}

void read_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.read_t)
  // required uint64 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fd(), output);
  }

  // required .common.memory_t buf = 2;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->buf_, output);
  }

  // required uint64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.read_t)
}

::google::protobuf::uint8* read_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.read_t)
  // required uint64 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fd(), target);
  }

  // required .common.memory_t buf = 2;
  if (has_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->buf_, false, target);
  }

  // required uint64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.read_t)
  return target;
}

size_t read_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.read_t)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);
  }

  if (has_fd()) {
    // required uint64 fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_count()) {
    // required uint64 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t read_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.read_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);

    // required uint64 fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void read_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.read_t)
  GOOGLE_DCHECK_NE(&from, this);
  const read_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const read_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.read_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.read_t)
    MergeFrom(*source);
  }
}

void read_t::MergeFrom(const read_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.read_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_buf()) {
      mutable_buf()->::common::memory_t::MergeFrom(from.buf());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void read_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_t::CopyFrom(const read_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_buf()) {
    if (!this->buf_->IsInitialized()) return false;
  }
  return true;
}

void read_t::Swap(read_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void read_t::InternalSwap(read_t* other) {
  std::swap(buf_, other->buf_);
  std::swap(fd_, other->fd_);
  std::swap(count_, other->count_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata read_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// read_t

// required uint64 fd = 1;
bool read_t::has_fd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void read_t::set_has_fd() {
  _has_bits_[0] |= 0x00000002u;
}
void read_t::clear_has_fd() {
  _has_bits_[0] &= ~0x00000002u;
}
void read_t::clear_fd() {
  fd_ = GOOGLE_ULONGLONG(0);
  clear_has_fd();
}
::google::protobuf::uint64 read_t::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_t.fd)
  return fd_;
}
void read_t::set_fd(::google::protobuf::uint64 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.read_t.fd)
}

// required .common.memory_t buf = 2;
bool read_t::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void read_t::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
void read_t::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
void read_t::clear_buf() {
  if (buf_ != NULL) buf_->::common::memory_t::Clear();
  clear_has_buf();
}
const ::common::memory_t& read_t::buf() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_t.buf)
  return buf_ != NULL ? *buf_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* read_t::mutable_buf() {
  set_has_buf();
  if (buf_ == NULL) {
    buf_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.read_t.buf)
  return buf_;
}
::common::memory_t* read_t::release_buf() {
  // @@protoc_insertion_point(field_release:libcall_types.read_t.buf)
  clear_has_buf();
  ::common::memory_t* temp = buf_;
  buf_ = NULL;
  return temp;
}
void read_t::set_allocated_buf(::common::memory_t* buf) {
  delete buf_;
  buf_ = buf;
  if (buf) {
    set_has_buf();
  } else {
    clear_has_buf();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.read_t.buf)
}

// required uint64 count = 3;
bool read_t::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void read_t::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void read_t::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void read_t::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
::google::protobuf::uint64 read_t::count() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_t.count)
  return count_;
}
void read_t::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.read_t.count)
}

// required uint64 ret = 4;
bool read_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void read_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void read_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void read_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 read_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.read_t.ret)
  return ret_;
}
void read_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.read_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fread_t::kPtrFieldNumber;
const int fread_t::kSizeFieldNumber;
const int fread_t::kNmembFieldNumber;
const int fread_t::kStreamFieldNumber;
const int fread_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fread_t::fread_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fread_t)
}
fread_t::fread_t(const fread_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptr()) {
    ptr_ = new ::common::memory_t(*from.ptr_);
  } else {
    ptr_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fread_t)
}

void fread_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ptr_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
}

fread_t::~fread_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fread_t)
  SharedDtor();
}

void fread_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ptr_;
  }
}

void fread_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fread_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[39].descriptor;
}

const fread_t& fread_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fread_t* fread_t::New(::google::protobuf::Arena* arena) const {
  fread_t* n = new fread_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fread_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fread_t)
  if (has_ptr()) {
    GOOGLE_DCHECK(ptr_ != NULL);
    ptr_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fread_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fread_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t ptr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ptr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nmemb = 3;
      case 3: {
        if (tag == 24u) {
          set_has_nmemb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nmemb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stream = 4;
      case 4: {
        if (tag == 32u) {
          set_has_stream();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 5;
      case 5: {
        if (tag == 40u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fread_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fread_t)
  return false;
#undef DO_
}

void fread_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fread_t)
  // required .common.memory_t ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ptr_, output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // required uint64 nmemb = 3;
  if (has_nmemb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nmemb(), output);
  }

  // required uint64 stream = 4;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->stream(), output);
  }

  // required uint64 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fread_t)
}

::google::protobuf::uint8* fread_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fread_t)
  // required .common.memory_t ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ptr_, false, target);
  }

  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // required uint64 nmemb = 3;
  if (has_nmemb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nmemb(), target);
  }

  // required uint64 stream = 4;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->stream(), target);
  }

  // required uint64 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fread_t)
  return target;
}

size_t fread_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fread_t)
  size_t total_size = 0;

  if (has_ptr()) {
    // required .common.memory_t ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ptr_);
  }

  if (has_size()) {
    // required uint64 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_nmemb()) {
    // required uint64 nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nmemb());
  }

  if (has_stream()) {
    // required uint64 stream = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream());
  }

  if (has_ret()) {
    // required uint64 ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fread_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fread_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .common.memory_t ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ptr_);

    // required uint64 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nmemb());

    // required uint64 stream = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream());

    // required uint64 ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fread_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fread_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fread_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fread_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fread_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fread_t)
    MergeFrom(*source);
  }
}

void fread_t::MergeFrom(const fread_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fread_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_ptr()) {
      mutable_ptr()->::common::memory_t::MergeFrom(from.ptr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_nmemb()) {
      set_nmemb(from.nmemb());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fread_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fread_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fread_t::CopyFrom(const fread_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fread_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fread_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_ptr()) {
    if (!this->ptr_->IsInitialized()) return false;
  }
  return true;
}

void fread_t::Swap(fread_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fread_t::InternalSwap(fread_t* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(size_, other->size_);
  std::swap(nmemb_, other->nmemb_);
  std::swap(stream_, other->stream_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fread_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fread_t

// required .common.memory_t ptr = 1;
bool fread_t::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fread_t::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
void fread_t::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
void fread_t::clear_ptr() {
  if (ptr_ != NULL) ptr_->::common::memory_t::Clear();
  clear_has_ptr();
}
const ::common::memory_t& fread_t::ptr() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_t.ptr)
  return ptr_ != NULL ? *ptr_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* fread_t::mutable_ptr() {
  set_has_ptr();
  if (ptr_ == NULL) {
    ptr_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.fread_t.ptr)
  return ptr_;
}
::common::memory_t* fread_t::release_ptr() {
  // @@protoc_insertion_point(field_release:libcall_types.fread_t.ptr)
  clear_has_ptr();
  ::common::memory_t* temp = ptr_;
  ptr_ = NULL;
  return temp;
}
void fread_t::set_allocated_ptr(::common::memory_t* ptr) {
  delete ptr_;
  ptr_ = ptr;
  if (ptr) {
    set_has_ptr();
  } else {
    clear_has_ptr();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.fread_t.ptr)
}

// required uint64 size = 2;
bool fread_t::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fread_t::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void fread_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void fread_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 fread_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_t.size)
  return size_;
}
void fread_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_t.size)
}

// required uint64 nmemb = 3;
bool fread_t::has_nmemb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fread_t::set_has_nmemb() {
  _has_bits_[0] |= 0x00000004u;
}
void fread_t::clear_has_nmemb() {
  _has_bits_[0] &= ~0x00000004u;
}
void fread_t::clear_nmemb() {
  nmemb_ = GOOGLE_ULONGLONG(0);
  clear_has_nmemb();
}
::google::protobuf::uint64 fread_t::nmemb() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_t.nmemb)
  return nmemb_;
}
void fread_t::set_nmemb(::google::protobuf::uint64 value) {
  set_has_nmemb();
  nmemb_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_t.nmemb)
}

// required uint64 stream = 4;
bool fread_t::has_stream() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fread_t::set_has_stream() {
  _has_bits_[0] |= 0x00000008u;
}
void fread_t::clear_has_stream() {
  _has_bits_[0] &= ~0x00000008u;
}
void fread_t::clear_stream() {
  stream_ = GOOGLE_ULONGLONG(0);
  clear_has_stream();
}
::google::protobuf::uint64 fread_t::stream() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_t.stream)
  return stream_;
}
void fread_t::set_stream(::google::protobuf::uint64 value) {
  set_has_stream();
  stream_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_t.stream)
}

// required uint64 ret = 5;
bool fread_t::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void fread_t::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
void fread_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
void fread_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 fread_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fread_t.ret)
  return ret_;
}
void fread_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fread_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strchr_t::kSFieldNumber;
const int strchr_t::kCFieldNumber;
const int strchr_t::kSizeMaxFieldNumber;
const int strchr_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strchr_t::strchr_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strchr_t)
}
strchr_t::strchr_t(const strchr_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strchr_t)
}

void strchr_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s_) + sizeof(ret_));
}

strchr_t::~strchr_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strchr_t)
  SharedDtor();
}

void strchr_t::SharedDtor() {
}

void strchr_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strchr_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[40].descriptor;
}

const strchr_t& strchr_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strchr_t* strchr_t::New(::google::protobuf::Arena* arena) const {
  strchr_t* n = new strchr_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strchr_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strchr_t)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strchr_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strchr_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s = 1;
      case 1: {
        if (tag == 8u) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 c = 2;
      case 2: {
        if (tag == 16u) {
          set_has_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size_max = 3;
      case 3: {
        if (tag == 24u) {
          set_has_size_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strchr_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strchr_t)
  return false;
#undef DO_
}

void strchr_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strchr_t)
  // required uint64 s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->s(), output);
  }

  // required uint64 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->c(), output);
  }

  // required uint64 size_max = 3;
  if (has_size_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size_max(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strchr_t)
}

::google::protobuf::uint8* strchr_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strchr_t)
  // required uint64 s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->s(), target);
  }

  // required uint64 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->c(), target);
  }

  // required uint64 size_max = 3;
  if (has_size_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size_max(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strchr_t)
  return target;
}

size_t strchr_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strchr_t)
  size_t total_size = 0;

  if (has_s()) {
    // required uint64 s = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s());
  }

  if (has_c()) {
    // required uint64 c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->c());
  }

  if (has_size_max()) {
    // required uint64 size_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_max());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strchr_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strchr_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 s = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s());

    // required uint64 c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->c());

    // required uint64 size_max = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_max());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strchr_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strchr_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strchr_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strchr_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strchr_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strchr_t)
    MergeFrom(*source);
  }
}

void strchr_t::MergeFrom(const strchr_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strchr_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_size_max()) {
      set_size_max(from.size_max());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strchr_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strchr_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strchr_t::CopyFrom(const strchr_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strchr_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strchr_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strchr_t::Swap(strchr_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strchr_t::InternalSwap(strchr_t* other) {
  std::swap(s_, other->s_);
  std::swap(c_, other->c_);
  std::swap(size_max_, other->size_max_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strchr_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strchr_t

// required uint64 s = 1;
bool strchr_t::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strchr_t::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void strchr_t::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void strchr_t::clear_s() {
  s_ = GOOGLE_ULONGLONG(0);
  clear_has_s();
}
::google::protobuf::uint64 strchr_t::s() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_t.s)
  return s_;
}
void strchr_t::set_s(::google::protobuf::uint64 value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strchr_t.s)
}

// required uint64 c = 2;
bool strchr_t::has_c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strchr_t::set_has_c() {
  _has_bits_[0] |= 0x00000002u;
}
void strchr_t::clear_has_c() {
  _has_bits_[0] &= ~0x00000002u;
}
void strchr_t::clear_c() {
  c_ = GOOGLE_ULONGLONG(0);
  clear_has_c();
}
::google::protobuf::uint64 strchr_t::c() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_t.c)
  return c_;
}
void strchr_t::set_c(::google::protobuf::uint64 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strchr_t.c)
}

// required uint64 size_max = 3;
bool strchr_t::has_size_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strchr_t::set_has_size_max() {
  _has_bits_[0] |= 0x00000004u;
}
void strchr_t::clear_has_size_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void strchr_t::clear_size_max() {
  size_max_ = GOOGLE_ULONGLONG(0);
  clear_has_size_max();
}
::google::protobuf::uint64 strchr_t::size_max() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_t.size_max)
  return size_max_;
}
void strchr_t::set_size_max(::google::protobuf::uint64 value) {
  set_has_size_max();
  size_max_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strchr_t.size_max)
}

// required uint64 ret = 4;
bool strchr_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void strchr_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void strchr_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void strchr_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 strchr_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strchr_t.ret)
  return ret_;
}
void strchr_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strchr_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strncpy_t::kDstFieldNumber;
const int strncpy_t::kSrcFieldNumber;
const int strncpy_t::kNFieldNumber;
const int strncpy_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strncpy_t::strncpy_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncpy_t)
}
strncpy_t::strncpy_t(const strncpy_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dst_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncpy_t)
}

void strncpy_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dst_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dst_) + sizeof(ret_));
}

strncpy_t::~strncpy_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strncpy_t)
  SharedDtor();
}

void strncpy_t::SharedDtor() {
}

void strncpy_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strncpy_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[41].descriptor;
}

const strncpy_t& strncpy_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strncpy_t* strncpy_t::New(::google::protobuf::Arena* arena) const {
  strncpy_t* n = new strncpy_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strncpy_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncpy_t)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&dst_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dst_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strncpy_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncpy_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dst = 1;
      case 1: {
        if (tag == 8u) {
          set_has_dst();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 src = 2;
      case 2: {
        if (tag == 16u) {
          set_has_src();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 n = 3;
      case 3: {
        if (tag == 24u) {
          set_has_n();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncpy_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncpy_t)
  return false;
#undef DO_
}

void strncpy_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncpy_t)
  // required uint64 dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst(), output);
  }

  // required uint64 src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->src(), output);
  }

  // required uint64 n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->n(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncpy_t)
}

::google::protobuf::uint8* strncpy_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncpy_t)
  // required uint64 dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst(), target);
  }

  // required uint64 src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->src(), target);
  }

  // required uint64 n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->n(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncpy_t)
  return target;
}

size_t strncpy_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncpy_t)
  size_t total_size = 0;

  if (has_dst()) {
    // required uint64 dst = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst());
  }

  if (has_src()) {
    // required uint64 src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->src());
  }

  if (has_n()) {
    // required uint64 n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strncpy_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncpy_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 dst = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst());

    // required uint64 src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->src());

    // required uint64 n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strncpy_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strncpy_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strncpy_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncpy_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncpy_t)
    MergeFrom(*source);
  }
}

void strncpy_t::MergeFrom(const strncpy_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strncpy_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncpy_t::CopyFrom(const strncpy_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncpy_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncpy_t::Swap(strncpy_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strncpy_t::InternalSwap(strncpy_t* other) {
  std::swap(dst_, other->dst_);
  std::swap(src_, other->src_);
  std::swap(n_, other->n_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strncpy_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strncpy_t

// required uint64 dst = 1;
bool strncpy_t::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strncpy_t::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
void strncpy_t::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
void strncpy_t::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
  clear_has_dst();
}
::google::protobuf::uint64 strncpy_t::dst() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_t.dst)
  return dst_;
}
void strncpy_t::set_dst(::google::protobuf::uint64 value) {
  set_has_dst();
  dst_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_t.dst)
}

// required uint64 src = 2;
bool strncpy_t::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strncpy_t::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
void strncpy_t::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
void strncpy_t::clear_src() {
  src_ = GOOGLE_ULONGLONG(0);
  clear_has_src();
}
::google::protobuf::uint64 strncpy_t::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_t.src)
  return src_;
}
void strncpy_t::set_src(::google::protobuf::uint64 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_t.src)
}

// required uint64 n = 3;
bool strncpy_t::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strncpy_t::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void strncpy_t::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void strncpy_t::clear_n() {
  n_ = GOOGLE_ULONGLONG(0);
  clear_has_n();
}
::google::protobuf::uint64 strncpy_t::n() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_t.n)
  return n_;
}
void strncpy_t::set_n(::google::protobuf::uint64 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_t.n)
}

// required uint64 ret = 4;
bool strncpy_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void strncpy_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void strncpy_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void strncpy_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 strncpy_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncpy_t.ret)
  return ret_;
}
void strncpy_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncpy_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fstat_t::kFdFieldNumber;
const int fstat_t::kBufFieldNumber;
const int fstat_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fstat_t::fstat_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fstat_t)
}
fstat_t::fstat_t(const fstat_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_t(*from.buf_);
  } else {
    buf_ = NULL;
  }
  ::memcpy(&fd_, &from.fd_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fstat_t)
}

void fstat_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buf_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&buf_) + sizeof(ret_));
}

fstat_t::~fstat_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fstat_t)
  SharedDtor();
}

void fstat_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buf_;
  }
}

void fstat_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fstat_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[42].descriptor;
}

const fstat_t& fstat_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fstat_t* fstat_t::New(::google::protobuf::Arena* arena) const {
  fstat_t* n = new fstat_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fstat_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fstat_t)
  if (has_buf()) {
    GOOGLE_DCHECK(buf_ != NULL);
    buf_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fstat_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fstat_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fd = 1;
      case 1: {
        if (tag == 8u) {
          set_has_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t buf = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fstat_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fstat_t)
  return false;
#undef DO_
}

void fstat_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fstat_t)
  // required uint64 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fd(), output);
  }

  // required .common.memory_t buf = 2;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->buf_, output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fstat_t)
}

::google::protobuf::uint8* fstat_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fstat_t)
  // required uint64 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fd(), target);
  }

  // required .common.memory_t buf = 2;
  if (has_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->buf_, false, target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fstat_t)
  return target;
}

size_t fstat_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fstat_t)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);
  }

  if (has_fd()) {
    // required uint64 fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fstat_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fstat_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);

    // required uint64 fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fstat_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fstat_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fstat_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fstat_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fstat_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fstat_t)
    MergeFrom(*source);
  }
}

void fstat_t::MergeFrom(const fstat_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fstat_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_buf()) {
      mutable_buf()->::common::memory_t::MergeFrom(from.buf());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fstat_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fstat_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fstat_t::CopyFrom(const fstat_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fstat_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fstat_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_buf()) {
    if (!this->buf_->IsInitialized()) return false;
  }
  return true;
}

void fstat_t::Swap(fstat_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fstat_t::InternalSwap(fstat_t* other) {
  std::swap(buf_, other->buf_);
  std::swap(fd_, other->fd_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fstat_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fstat_t

// required uint64 fd = 1;
bool fstat_t::has_fd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fstat_t::set_has_fd() {
  _has_bits_[0] |= 0x00000002u;
}
void fstat_t::clear_has_fd() {
  _has_bits_[0] &= ~0x00000002u;
}
void fstat_t::clear_fd() {
  fd_ = GOOGLE_ULONGLONG(0);
  clear_has_fd();
}
::google::protobuf::uint64 fstat_t::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.fstat_t.fd)
  return fd_;
}
void fstat_t::set_fd(::google::protobuf::uint64 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fstat_t.fd)
}

// required .common.memory_t buf = 2;
bool fstat_t::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fstat_t::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
void fstat_t::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
void fstat_t::clear_buf() {
  if (buf_ != NULL) buf_->::common::memory_t::Clear();
  clear_has_buf();
}
const ::common::memory_t& fstat_t::buf() const {
  // @@protoc_insertion_point(field_get:libcall_types.fstat_t.buf)
  return buf_ != NULL ? *buf_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* fstat_t::mutable_buf() {
  set_has_buf();
  if (buf_ == NULL) {
    buf_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.fstat_t.buf)
  return buf_;
}
::common::memory_t* fstat_t::release_buf() {
  // @@protoc_insertion_point(field_release:libcall_types.fstat_t.buf)
  clear_has_buf();
  ::common::memory_t* temp = buf_;
  buf_ = NULL;
  return temp;
}
void fstat_t::set_allocated_buf(::common::memory_t* buf) {
  delete buf_;
  buf_ = buf;
  if (buf) {
    set_has_buf();
  } else {
    clear_has_buf();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.fstat_t.buf)
}

// required uint64 ret = 3;
bool fstat_t::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fstat_t::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void fstat_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void fstat_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 fstat_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fstat_t.ret)
  return ret_;
}
void fstat_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fstat_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fxstat64_t::kVersFieldNumber;
const int fxstat64_t::kFdFieldNumber;
const int fxstat64_t::kBufFieldNumber;
const int fxstat64_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fxstat64_t::fxstat64_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fxstat64_t)
}
fxstat64_t::fxstat64_t(const fxstat64_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_t(*from.buf_);
  } else {
    buf_ = NULL;
  }
  ::memcpy(&vers_, &from.vers_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&vers_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fxstat64_t)
}

void fxstat64_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&buf_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&buf_) + sizeof(ret_));
}

fxstat64_t::~fxstat64_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fxstat64_t)
  SharedDtor();
}

void fxstat64_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete buf_;
  }
}

void fxstat64_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fxstat64_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[43].descriptor;
}

const fxstat64_t& fxstat64_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fxstat64_t* fxstat64_t::New(::google::protobuf::Arena* arena) const {
  fxstat64_t* n = new fxstat64_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fxstat64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fxstat64_t)
  if (has_buf()) {
    GOOGLE_DCHECK(buf_ != NULL);
    buf_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&vers_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&vers_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fxstat64_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fxstat64_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 vers = 1;
      case 1: {
        if (tag == 8u) {
          set_has_vers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 fd = 2;
      case 2: {
        if (tag == 16u) {
          set_has_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t buf = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fxstat64_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fxstat64_t)
  return false;
#undef DO_
}

void fxstat64_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fxstat64_t)
  // required uint64 vers = 1;
  if (has_vers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->vers(), output);
  }

  // required uint64 fd = 2;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fd(), output);
  }

  // required .common.memory_t buf = 3;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->buf_, output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fxstat64_t)
}

::google::protobuf::uint8* fxstat64_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fxstat64_t)
  // required uint64 vers = 1;
  if (has_vers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->vers(), target);
  }

  // required uint64 fd = 2;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fd(), target);
  }

  // required .common.memory_t buf = 3;
  if (has_buf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->buf_, false, target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fxstat64_t)
  return target;
}

size_t fxstat64_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fxstat64_t)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_t buf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);
  }

  if (has_vers()) {
    // required uint64 vers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vers());
  }

  if (has_fd()) {
    // required uint64 fd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fxstat64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fxstat64_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t buf = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buf_);

    // required uint64 vers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vers());

    // required uint64 fd = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fxstat64_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fxstat64_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fxstat64_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fxstat64_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fxstat64_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fxstat64_t)
    MergeFrom(*source);
  }
}

void fxstat64_t::MergeFrom(const fxstat64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fxstat64_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_buf()) {
      mutable_buf()->::common::memory_t::MergeFrom(from.buf());
    }
    if (from.has_vers()) {
      set_vers(from.vers());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fxstat64_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fxstat64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fxstat64_t::CopyFrom(const fxstat64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fxstat64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fxstat64_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_buf()) {
    if (!this->buf_->IsInitialized()) return false;
  }
  return true;
}

void fxstat64_t::Swap(fxstat64_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fxstat64_t::InternalSwap(fxstat64_t* other) {
  std::swap(buf_, other->buf_);
  std::swap(vers_, other->vers_);
  std::swap(fd_, other->fd_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fxstat64_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fxstat64_t

// required uint64 vers = 1;
bool fxstat64_t::has_vers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fxstat64_t::set_has_vers() {
  _has_bits_[0] |= 0x00000002u;
}
void fxstat64_t::clear_has_vers() {
  _has_bits_[0] &= ~0x00000002u;
}
void fxstat64_t::clear_vers() {
  vers_ = GOOGLE_ULONGLONG(0);
  clear_has_vers();
}
::google::protobuf::uint64 fxstat64_t::vers() const {
  // @@protoc_insertion_point(field_get:libcall_types.fxstat64_t.vers)
  return vers_;
}
void fxstat64_t::set_vers(::google::protobuf::uint64 value) {
  set_has_vers();
  vers_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fxstat64_t.vers)
}

// required uint64 fd = 2;
bool fxstat64_t::has_fd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void fxstat64_t::set_has_fd() {
  _has_bits_[0] |= 0x00000004u;
}
void fxstat64_t::clear_has_fd() {
  _has_bits_[0] &= ~0x00000004u;
}
void fxstat64_t::clear_fd() {
  fd_ = GOOGLE_ULONGLONG(0);
  clear_has_fd();
}
::google::protobuf::uint64 fxstat64_t::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.fxstat64_t.fd)
  return fd_;
}
void fxstat64_t::set_fd(::google::protobuf::uint64 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fxstat64_t.fd)
}

// required .common.memory_t buf = 3;
bool fxstat64_t::has_buf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fxstat64_t::set_has_buf() {
  _has_bits_[0] |= 0x00000001u;
}
void fxstat64_t::clear_has_buf() {
  _has_bits_[0] &= ~0x00000001u;
}
void fxstat64_t::clear_buf() {
  if (buf_ != NULL) buf_->::common::memory_t::Clear();
  clear_has_buf();
}
const ::common::memory_t& fxstat64_t::buf() const {
  // @@protoc_insertion_point(field_get:libcall_types.fxstat64_t.buf)
  return buf_ != NULL ? *buf_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* fxstat64_t::mutable_buf() {
  set_has_buf();
  if (buf_ == NULL) {
    buf_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.fxstat64_t.buf)
  return buf_;
}
::common::memory_t* fxstat64_t::release_buf() {
  // @@protoc_insertion_point(field_release:libcall_types.fxstat64_t.buf)
  clear_has_buf();
  ::common::memory_t* temp = buf_;
  buf_ = NULL;
  return temp;
}
void fxstat64_t::set_allocated_buf(::common::memory_t* buf) {
  delete buf_;
  buf_ = buf;
  if (buf) {
    set_has_buf();
  } else {
    clear_has_buf();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.fxstat64_t.buf)
}

// required uint64 ret = 4;
bool fxstat64_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void fxstat64_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void fxstat64_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void fxstat64_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 fxstat64_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fxstat64_t.ret)
  return ret_;
}
void fxstat64_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fxstat64_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int realloc_t::kPtrFieldNumber;
const int realloc_t::kSizeFieldNumber;
const int realloc_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

realloc_t::realloc_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.realloc_t)
}
realloc_t::realloc_t(const realloc_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ptr_, &from.ptr_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.realloc_t)
}

void realloc_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ptr_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
}

realloc_t::~realloc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.realloc_t)
  SharedDtor();
}

void realloc_t::SharedDtor() {
}

void realloc_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* realloc_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[44].descriptor;
}

const realloc_t& realloc_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

realloc_t* realloc_t::New(::google::protobuf::Arena* arena) const {
  realloc_t* n = new realloc_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void realloc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.realloc_t)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ptr_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ptr_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool realloc_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.realloc_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ptr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (tag == 16u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.realloc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.realloc_t)
  return false;
#undef DO_
}

void realloc_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.realloc_t)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // required uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.realloc_t)
}

::google::protobuf::uint8* realloc_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.realloc_t)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // required uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.realloc_t)
  return target;
}

size_t realloc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.realloc_t)
  size_t total_size = 0;

  if (has_ptr()) {
    // required uint64 ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }

  if (has_size()) {
    // required uint64 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t realloc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.realloc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 ptr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ptr());

    // required uint64 size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void realloc_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.realloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const realloc_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const realloc_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.realloc_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.realloc_t)
    MergeFrom(*source);
  }
}

void realloc_t::MergeFrom(const realloc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.realloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void realloc_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.realloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void realloc_t::CopyFrom(const realloc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.realloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool realloc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void realloc_t::Swap(realloc_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void realloc_t::InternalSwap(realloc_t* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata realloc_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// realloc_t

// required uint64 ptr = 1;
bool realloc_t::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void realloc_t::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
void realloc_t::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
void realloc_t::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
::google::protobuf::uint64 realloc_t::ptr() const {
  // @@protoc_insertion_point(field_get:libcall_types.realloc_t.ptr)
  return ptr_;
}
void realloc_t::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.realloc_t.ptr)
}

// required uint64 size = 2;
bool realloc_t::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void realloc_t::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void realloc_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void realloc_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 realloc_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.realloc_t.size)
  return size_;
}
void realloc_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.realloc_t.size)
}

// required uint64 ret = 3;
bool realloc_t::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void realloc_t::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void realloc_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void realloc_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 realloc_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.realloc_t.ret)
  return ret_;
}
void realloc_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.realloc_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int mmap_t::kAddrFieldNumber;
const int mmap_t::kLengthFieldNumber;
const int mmap_t::kProtFieldNumber;
const int mmap_t::kFlagsFieldNumber;
const int mmap_t::kFdFieldNumber;
const int mmap_t::kOffsetFieldNumber;
const int mmap_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

mmap_t::mmap_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.mmap_t)
}
mmap_t::mmap_t(const mmap_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ret()) {
    ret_ = new ::common::memory_t(*from.ret_);
  } else {
    ret_ = NULL;
  }
  ::memcpy(&addr_, &from.addr_,
    reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&addr_) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.mmap_t)
}

void mmap_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ret_, 0, reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&ret_) + sizeof(offset_));
}

mmap_t::~mmap_t() {
  // @@protoc_insertion_point(destructor:libcall_types.mmap_t)
  SharedDtor();
}

void mmap_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ret_;
  }
}

void mmap_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mmap_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[45].descriptor;
}

const mmap_t& mmap_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

mmap_t* mmap_t::New(::google::protobuf::Arena* arena) const {
  mmap_t* n = new mmap_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void mmap_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.mmap_t)
  if (has_ret()) {
    GOOGLE_DCHECK(ret_ != NULL);
    ret_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&addr_, 0, reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&addr_) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool mmap_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.mmap_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (tag == 8u) {
          set_has_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 length = 2;
      case 2: {
        if (tag == 16u) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prot = 3;
      case 3: {
        if (tag == 24u) {
          set_has_prot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 flags = 4;
      case 4: {
        if (tag == 32u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 fd = 5;
      case 5: {
        if (tag == 40u) {
          set_has_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 offset = 6;
      case 6: {
        if (tag == 48u) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t ret = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.mmap_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.mmap_t)
  return false;
#undef DO_
}

void mmap_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.mmap_t)
  // required uint64 addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required uint64 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->length(), output);
  }

  // required uint64 prot = 3;
  if (has_prot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prot(), output);
  }

  // required uint64 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->flags(), output);
  }

  // required uint64 fd = 5;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fd(), output);
  }

  // required uint64 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->offset(), output);
  }

  // required .common.memory_t ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ret_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.mmap_t)
}

::google::protobuf::uint8* mmap_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.mmap_t)
  // required uint64 addr = 1;
  if (has_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required uint64 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->length(), target);
  }

  // required uint64 prot = 3;
  if (has_prot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prot(), target);
  }

  // required uint64 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->flags(), target);
  }

  // required uint64 fd = 5;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fd(), target);
  }

  // required uint64 offset = 6;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->offset(), target);
  }

  // required .common.memory_t ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ret_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.mmap_t)
  return target;
}

size_t mmap_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.mmap_t)
  size_t total_size = 0;

  if (has_ret()) {
    // required .common.memory_t ret = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);
  }

  if (has_addr()) {
    // required uint64 addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_length()) {
    // required uint64 length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->length());
  }

  if (has_prot()) {
    // required uint64 prot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prot());
  }

  if (has_flags()) {
    // required uint64 flags = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flags());
  }

  if (has_fd()) {
    // required uint64 fd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_offset()) {
    // required uint64 offset = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  return total_size;
}
size_t mmap_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.mmap_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .common.memory_t ret = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);

    // required uint64 addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required uint64 length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->length());

    // required uint64 prot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prot());

    // required uint64 flags = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flags());

    // required uint64 fd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 offset = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mmap_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.mmap_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mmap_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const mmap_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.mmap_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.mmap_t)
    MergeFrom(*source);
  }
}

void mmap_t::MergeFrom(const mmap_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.mmap_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_ret()) {
      mutable_ret()->::common::memory_t::MergeFrom(from.ret());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_prot()) {
      set_prot(from.prot());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
}

void mmap_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.mmap_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mmap_t::CopyFrom(const mmap_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.mmap_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mmap_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_ret()) {
    if (!this->ret_->IsInitialized()) return false;
  }
  return true;
}

void mmap_t::Swap(mmap_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void mmap_t::InternalSwap(mmap_t* other) {
  std::swap(ret_, other->ret_);
  std::swap(addr_, other->addr_);
  std::swap(length_, other->length_);
  std::swap(prot_, other->prot_);
  std::swap(flags_, other->flags_);
  std::swap(fd_, other->fd_);
  std::swap(offset_, other->offset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata mmap_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// mmap_t

// required uint64 addr = 1;
bool mmap_t::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void mmap_t::set_has_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void mmap_t::clear_has_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void mmap_t::clear_addr() {
  addr_ = GOOGLE_ULONGLONG(0);
  clear_has_addr();
}
::google::protobuf::uint64 mmap_t::addr() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.addr)
  return addr_;
}
void mmap_t::set_addr(::google::protobuf::uint64 value) {
  set_has_addr();
  addr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_t.addr)
}

// required uint64 length = 2;
bool mmap_t::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void mmap_t::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void mmap_t::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void mmap_t::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
::google::protobuf::uint64 mmap_t::length() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.length)
  return length_;
}
void mmap_t::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_t.length)
}

// required uint64 prot = 3;
bool mmap_t::has_prot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void mmap_t::set_has_prot() {
  _has_bits_[0] |= 0x00000008u;
}
void mmap_t::clear_has_prot() {
  _has_bits_[0] &= ~0x00000008u;
}
void mmap_t::clear_prot() {
  prot_ = GOOGLE_ULONGLONG(0);
  clear_has_prot();
}
::google::protobuf::uint64 mmap_t::prot() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.prot)
  return prot_;
}
void mmap_t::set_prot(::google::protobuf::uint64 value) {
  set_has_prot();
  prot_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_t.prot)
}

// required uint64 flags = 4;
bool mmap_t::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void mmap_t::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void mmap_t::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void mmap_t::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
  clear_has_flags();
}
::google::protobuf::uint64 mmap_t::flags() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.flags)
  return flags_;
}
void mmap_t::set_flags(::google::protobuf::uint64 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_t.flags)
}

// required uint64 fd = 5;
bool mmap_t::has_fd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void mmap_t::set_has_fd() {
  _has_bits_[0] |= 0x00000020u;
}
void mmap_t::clear_has_fd() {
  _has_bits_[0] &= ~0x00000020u;
}
void mmap_t::clear_fd() {
  fd_ = GOOGLE_ULONGLONG(0);
  clear_has_fd();
}
::google::protobuf::uint64 mmap_t::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.fd)
  return fd_;
}
void mmap_t::set_fd(::google::protobuf::uint64 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_t.fd)
}

// required uint64 offset = 6;
bool mmap_t::has_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void mmap_t::set_has_offset() {
  _has_bits_[0] |= 0x00000040u;
}
void mmap_t::clear_has_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
void mmap_t::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
::google::protobuf::uint64 mmap_t::offset() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.offset)
  return offset_;
}
void mmap_t::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.mmap_t.offset)
}

// required .common.memory_t ret = 7;
bool mmap_t::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void mmap_t::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void mmap_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void mmap_t::clear_ret() {
  if (ret_ != NULL) ret_->::common::memory_t::Clear();
  clear_has_ret();
}
const ::common::memory_t& mmap_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.mmap_t.ret)
  return ret_ != NULL ? *ret_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* mmap_t::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) {
    ret_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.mmap_t.ret)
  return ret_;
}
::common::memory_t* mmap_t::release_ret() {
  // @@protoc_insertion_point(field_release:libcall_types.mmap_t.ret)
  clear_has_ret();
  ::common::memory_t* temp = ret_;
  ret_ = NULL;
  return temp;
}
void mmap_t::set_allocated_ret(::common::memory_t* ret) {
  delete ret_;
  ret_ = ret;
  if (ret) {
    set_has_ret();
  } else {
    clear_has_ret();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.mmap_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int qsort_t::kBaseFieldNumber;
const int qsort_t::kNmembFieldNumber;
const int qsort_t::kSizeFieldNumber;
const int qsort_t::kCompareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

qsort_t::qsort_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.qsort_t)
}
qsort_t::qsort_t(const qsort_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::common::memory_t(*from.base_);
  } else {
    base_ = NULL;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.qsort_t)
}

void qsort_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&base_, 0, reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&base_) + sizeof(compare_));
}

qsort_t::~qsort_t() {
  // @@protoc_insertion_point(destructor:libcall_types.qsort_t)
  SharedDtor();
}

void qsort_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete base_;
  }
}

void qsort_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qsort_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[46].descriptor;
}

const qsort_t& qsort_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

qsort_t* qsort_t::New(::google::protobuf::Arena* arena) const {
  qsort_t* n = new qsort_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void qsort_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.qsort_t)
  if (has_base()) {
    GOOGLE_DCHECK(base_ != NULL);
    base_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&nmemb_, 0, reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool qsort_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.qsort_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t base = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nmemb = 2;
      case 2: {
        if (tag == 16u) {
          set_has_nmemb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nmemb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (tag == 24u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 compare = 4;
      case 4: {
        if (tag == 32u) {
          set_has_compare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.qsort_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.qsort_t)
  return false;
#undef DO_
}

void qsort_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.qsort_t)
  // required .common.memory_t base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // required uint64 nmemb = 2;
  if (has_nmemb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nmemb(), output);
  }

  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 compare = 4;
  if (has_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->compare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.qsort_t)
}

::google::protobuf::uint8* qsort_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.qsort_t)
  // required .common.memory_t base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // required uint64 nmemb = 2;
  if (has_nmemb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nmemb(), target);
  }

  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 compare = 4;
  if (has_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->compare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.qsort_t)
  return target;
}

size_t qsort_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.qsort_t)
  size_t total_size = 0;

  if (has_base()) {
    // required .common.memory_t base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_nmemb()) {
    // required uint64 nmemb = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nmemb());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_compare()) {
    // required uint64 compare = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compare());
  }

  return total_size;
}
size_t qsort_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.qsort_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t base = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required uint64 nmemb = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nmemb());

    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 compare = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qsort_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.qsort_t)
  GOOGLE_DCHECK_NE(&from, this);
  const qsort_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const qsort_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.qsort_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.qsort_t)
    MergeFrom(*source);
  }
}

void qsort_t::MergeFrom(const qsort_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.qsort_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_base()) {
      mutable_base()->::common::memory_t::MergeFrom(from.base());
    }
    if (from.has_nmemb()) {
      set_nmemb(from.nmemb());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_compare()) {
      set_compare(from.compare());
    }
  }
}

void qsort_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.qsort_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qsort_t::CopyFrom(const qsort_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.qsort_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qsort_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_base()) {
    if (!this->base_->IsInitialized()) return false;
  }
  return true;
}

void qsort_t::Swap(qsort_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void qsort_t::InternalSwap(qsort_t* other) {
  std::swap(base_, other->base_);
  std::swap(nmemb_, other->nmemb_);
  std::swap(size_, other->size_);
  std::swap(compare_, other->compare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata qsort_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// qsort_t

// required .common.memory_t base = 1;
bool qsort_t::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void qsort_t::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
void qsort_t::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
void qsort_t::clear_base() {
  if (base_ != NULL) base_->::common::memory_t::Clear();
  clear_has_base();
}
const ::common::memory_t& qsort_t::base() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_t.base)
  return base_ != NULL ? *base_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* qsort_t::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.qsort_t.base)
  return base_;
}
::common::memory_t* qsort_t::release_base() {
  // @@protoc_insertion_point(field_release:libcall_types.qsort_t.base)
  clear_has_base();
  ::common::memory_t* temp = base_;
  base_ = NULL;
  return temp;
}
void qsort_t::set_allocated_base(::common::memory_t* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.qsort_t.base)
}

// required uint64 nmemb = 2;
bool qsort_t::has_nmemb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void qsort_t::set_has_nmemb() {
  _has_bits_[0] |= 0x00000002u;
}
void qsort_t::clear_has_nmemb() {
  _has_bits_[0] &= ~0x00000002u;
}
void qsort_t::clear_nmemb() {
  nmemb_ = GOOGLE_ULONGLONG(0);
  clear_has_nmemb();
}
::google::protobuf::uint64 qsort_t::nmemb() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_t.nmemb)
  return nmemb_;
}
void qsort_t::set_nmemb(::google::protobuf::uint64 value) {
  set_has_nmemb();
  nmemb_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.qsort_t.nmemb)
}

// required uint64 size = 3;
bool qsort_t::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void qsort_t::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void qsort_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void qsort_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 qsort_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_t.size)
  return size_;
}
void qsort_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.qsort_t.size)
}

// required uint64 compare = 4;
bool qsort_t::has_compare() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void qsort_t::set_has_compare() {
  _has_bits_[0] |= 0x00000008u;
}
void qsort_t::clear_has_compare() {
  _has_bits_[0] &= ~0x00000008u;
}
void qsort_t::clear_compare() {
  compare_ = GOOGLE_ULONGLONG(0);
  clear_has_compare();
}
::google::protobuf::uint64 qsort_t::compare() const {
  // @@protoc_insertion_point(field_get:libcall_types.qsort_t.compare)
  return compare_;
}
void qsort_t::set_compare(::google::protobuf::uint64 value) {
  set_has_compare();
  compare_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.qsort_t.compare)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bsearch_t::kKeyFieldNumber;
const int bsearch_t::kBaseFieldNumber;
const int bsearch_t::kNmembFieldNumber;
const int bsearch_t::kSizeFieldNumber;
const int bsearch_t::kCompareFieldNumber;
const int bsearch_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bsearch_t::bsearch_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.bsearch_t)
}
bsearch_t::bsearch_t(const bsearch_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::memory_t(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_base()) {
    base_ = new ::common::memory_t(*from.base_);
  } else {
    base_ = NULL;
  }
  if (from.has_ret()) {
    ret_ = new ::common::memory_t(*from.ret_);
  } else {
    ret_ = NULL;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.bsearch_t)
}

void bsearch_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&key_) + sizeof(compare_));
}

bsearch_t::~bsearch_t() {
  // @@protoc_insertion_point(destructor:libcall_types.bsearch_t)
  SharedDtor();
}

void bsearch_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete base_;
  }
  if (this != internal_default_instance()) {
    delete ret_;
  }
}

void bsearch_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bsearch_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[47].descriptor;
}

const bsearch_t& bsearch_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

bsearch_t* bsearch_t::New(::google::protobuf::Arena* arena) const {
  bsearch_t* n = new bsearch_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void bsearch_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.bsearch_t)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      GOOGLE_DCHECK(key_ != NULL);
      key_->::common::memory_t::Clear();
    }
    if (has_base()) {
      GOOGLE_DCHECK(base_ != NULL);
      base_->::common::memory_t::Clear();
    }
    if (has_ret()) {
      GOOGLE_DCHECK(ret_ != NULL);
      ret_->::common::memory_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&nmemb_, 0, reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&nmemb_) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool bsearch_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.bsearch_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t base = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nmemb = 3;
      case 3: {
        if (tag == 24u) {
          set_has_nmemb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nmemb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 4;
      case 4: {
        if (tag == 32u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 compare = 5;
      case 5: {
        if (tag == 40u) {
          set_has_compare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t ret = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.bsearch_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.bsearch_t)
  return false;
#undef DO_
}

void bsearch_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.bsearch_t)
  // required .common.memory_t key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // required .common.memory_t base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->base_, output);
  }

  // required uint64 nmemb = 3;
  if (has_nmemb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nmemb(), output);
  }

  // required uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // required uint64 compare = 5;
  if (has_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->compare(), output);
  }

  // required .common.memory_t ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ret_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.bsearch_t)
}

::google::protobuf::uint8* bsearch_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.bsearch_t)
  // required .common.memory_t key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, false, target);
  }

  // required .common.memory_t base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->base_, false, target);
  }

  // required uint64 nmemb = 3;
  if (has_nmemb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nmemb(), target);
  }

  // required uint64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // required uint64 compare = 5;
  if (has_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->compare(), target);
  }

  // required .common.memory_t ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ret_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.bsearch_t)
  return target;
}

size_t bsearch_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.bsearch_t)
  size_t total_size = 0;

  if (has_key()) {
    // required .common.memory_t key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  if (has_base()) {
    // required .common.memory_t base = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  if (has_ret()) {
    // required .common.memory_t ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);
  }

  if (has_nmemb()) {
    // required uint64 nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nmemb());
  }

  if (has_size()) {
    // required uint64 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_compare()) {
    // required uint64 compare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compare());
  }

  return total_size;
}
size_t bsearch_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.bsearch_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_t key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

    // required .common.memory_t base = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);

    // required .common.memory_t ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ret_);

    // required uint64 nmemb = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nmemb());

    // required uint64 size = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 compare = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bsearch_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.bsearch_t)
  GOOGLE_DCHECK_NE(&from, this);
  const bsearch_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bsearch_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.bsearch_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.bsearch_t)
    MergeFrom(*source);
  }
}

void bsearch_t::MergeFrom(const bsearch_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.bsearch_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_key()) {
      mutable_key()->::common::memory_t::MergeFrom(from.key());
    }
    if (from.has_base()) {
      mutable_base()->::common::memory_t::MergeFrom(from.base());
    }
    if (from.has_ret()) {
      mutable_ret()->::common::memory_t::MergeFrom(from.ret());
    }
    if (from.has_nmemb()) {
      set_nmemb(from.nmemb());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_compare()) {
      set_compare(from.compare());
    }
  }
}

void bsearch_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.bsearch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bsearch_t::CopyFrom(const bsearch_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.bsearch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bsearch_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base_->IsInitialized()) return false;
  }
  if (has_ret()) {
    if (!this->ret_->IsInitialized()) return false;
  }
  return true;
}

void bsearch_t::Swap(bsearch_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bsearch_t::InternalSwap(bsearch_t* other) {
  std::swap(key_, other->key_);
  std::swap(base_, other->base_);
  std::swap(ret_, other->ret_);
  std::swap(nmemb_, other->nmemb_);
  std::swap(size_, other->size_);
  std::swap(compare_, other->compare_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata bsearch_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// bsearch_t

// required .common.memory_t key = 1;
bool bsearch_t::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void bsearch_t::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void bsearch_t::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void bsearch_t::clear_key() {
  if (key_ != NULL) key_->::common::memory_t::Clear();
  clear_has_key();
}
const ::common::memory_t& bsearch_t::key() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_t.key)
  return key_ != NULL ? *key_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* bsearch_t::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.bsearch_t.key)
  return key_;
}
::common::memory_t* bsearch_t::release_key() {
  // @@protoc_insertion_point(field_release:libcall_types.bsearch_t.key)
  clear_has_key();
  ::common::memory_t* temp = key_;
  key_ = NULL;
  return temp;
}
void bsearch_t::set_allocated_key(::common::memory_t* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.bsearch_t.key)
}

// required .common.memory_t base = 2;
bool bsearch_t::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void bsearch_t::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
void bsearch_t::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
void bsearch_t::clear_base() {
  if (base_ != NULL) base_->::common::memory_t::Clear();
  clear_has_base();
}
const ::common::memory_t& bsearch_t::base() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_t.base)
  return base_ != NULL ? *base_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* bsearch_t::mutable_base() {
  set_has_base();
  if (base_ == NULL) {
    base_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.bsearch_t.base)
  return base_;
}
::common::memory_t* bsearch_t::release_base() {
  // @@protoc_insertion_point(field_release:libcall_types.bsearch_t.base)
  clear_has_base();
  ::common::memory_t* temp = base_;
  base_ = NULL;
  return temp;
}
void bsearch_t::set_allocated_base(::common::memory_t* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.bsearch_t.base)
}

// required uint64 nmemb = 3;
bool bsearch_t::has_nmemb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void bsearch_t::set_has_nmemb() {
  _has_bits_[0] |= 0x00000008u;
}
void bsearch_t::clear_has_nmemb() {
  _has_bits_[0] &= ~0x00000008u;
}
void bsearch_t::clear_nmemb() {
  nmemb_ = GOOGLE_ULONGLONG(0);
  clear_has_nmemb();
}
::google::protobuf::uint64 bsearch_t::nmemb() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_t.nmemb)
  return nmemb_;
}
void bsearch_t::set_nmemb(::google::protobuf::uint64 value) {
  set_has_nmemb();
  nmemb_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.bsearch_t.nmemb)
}

// required uint64 size = 4;
bool bsearch_t::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void bsearch_t::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
void bsearch_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void bsearch_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 bsearch_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_t.size)
  return size_;
}
void bsearch_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.bsearch_t.size)
}

// required uint64 compare = 5;
bool bsearch_t::has_compare() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void bsearch_t::set_has_compare() {
  _has_bits_[0] |= 0x00000020u;
}
void bsearch_t::clear_has_compare() {
  _has_bits_[0] &= ~0x00000020u;
}
void bsearch_t::clear_compare() {
  compare_ = GOOGLE_ULONGLONG(0);
  clear_has_compare();
}
::google::protobuf::uint64 bsearch_t::compare() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_t.compare)
  return compare_;
}
void bsearch_t::set_compare(::google::protobuf::uint64 value) {
  set_has_compare();
  compare_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.bsearch_t.compare)
}

// required .common.memory_t ret = 6;
bool bsearch_t::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void bsearch_t::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void bsearch_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void bsearch_t::clear_ret() {
  if (ret_ != NULL) ret_->::common::memory_t::Clear();
  clear_has_ret();
}
const ::common::memory_t& bsearch_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.bsearch_t.ret)
  return ret_ != NULL ? *ret_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* bsearch_t::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) {
    ret_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.bsearch_t.ret)
  return ret_;
}
::common::memory_t* bsearch_t::release_ret() {
  // @@protoc_insertion_point(field_release:libcall_types.bsearch_t.ret)
  clear_has_ret();
  ::common::memory_t* temp = ret_;
  ret_ = NULL;
  return temp;
}
void bsearch_t::set_allocated_ret(::common::memory_t* ret) {
  delete ret_;
  ret_ = ret;
  if (ret) {
    set_has_ret();
  } else {
    clear_has_ret();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.bsearch_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int open_t::kPathnameFieldNumber;
const int open_t::kFlagsFieldNumber;
const int open_t::kModeFieldNumber;
const int open_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

open_t::open_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.open_t)
}
open_t::open_t(const open_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pathname()) {
    pathname_ = new ::common::memory_t(*from.pathname_);
  } else {
    pathname_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&flags_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.open_t)
}

void open_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pathname_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&pathname_) + sizeof(ret_));
}

open_t::~open_t() {
  // @@protoc_insertion_point(destructor:libcall_types.open_t)
  SharedDtor();
}

void open_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pathname_;
  }
}

void open_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* open_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[48].descriptor;
}

const open_t& open_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

open_t* open_t::New(::google::protobuf::Arena* arena) const {
  open_t* n = new open_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void open_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.open_t)
  if (has_pathname()) {
    GOOGLE_DCHECK(pathname_ != NULL);
    pathname_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&flags_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&flags_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool open_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.open_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t pathname = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 flags = 3;
      case 3: {
        if (tag == 24u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 mode = 4;
      case 4: {
        if (tag == 32u) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 5;
      case 5: {
        if (tag == 40u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.open_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.open_t)
  return false;
#undef DO_
}

void open_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.open_t)
  // required .common.memory_t pathname = 1;
  if (has_pathname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pathname_, output);
  }

  // required uint64 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flags(), output);
  }

  // required uint64 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mode(), output);
  }

  // required uint64 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.open_t)
}

::google::protobuf::uint8* open_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.open_t)
  // required .common.memory_t pathname = 1;
  if (has_pathname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pathname_, false, target);
  }

  // required uint64 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flags(), target);
  }

  // required uint64 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mode(), target);
  }

  // required uint64 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.open_t)
  return target;
}

size_t open_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.open_t)
  size_t total_size = 0;

  if (has_pathname()) {
    // required .common.memory_t pathname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pathname_);
  }

  if (has_flags()) {
    // required uint64 flags = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flags());
  }

  if (has_mode()) {
    // required uint64 mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mode());
  }

  if (has_ret()) {
    // required uint64 ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t open_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.open_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t pathname = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pathname_);

    // required uint64 flags = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flags());

    // required uint64 mode = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mode());

    // required uint64 ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void open_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.open_t)
  GOOGLE_DCHECK_NE(&from, this);
  const open_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const open_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.open_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.open_t)
    MergeFrom(*source);
  }
}

void open_t::MergeFrom(const open_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.open_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_pathname()) {
      mutable_pathname()->::common::memory_t::MergeFrom(from.pathname());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void open_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_t::CopyFrom(const open_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_pathname()) {
    if (!this->pathname_->IsInitialized()) return false;
  }
  return true;
}

void open_t::Swap(open_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void open_t::InternalSwap(open_t* other) {
  std::swap(pathname_, other->pathname_);
  std::swap(flags_, other->flags_);
  std::swap(mode_, other->mode_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata open_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// open_t

// required .common.memory_t pathname = 1;
bool open_t::has_pathname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void open_t::set_has_pathname() {
  _has_bits_[0] |= 0x00000001u;
}
void open_t::clear_has_pathname() {
  _has_bits_[0] &= ~0x00000001u;
}
void open_t::clear_pathname() {
  if (pathname_ != NULL) pathname_->::common::memory_t::Clear();
  clear_has_pathname();
}
const ::common::memory_t& open_t::pathname() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_t.pathname)
  return pathname_ != NULL ? *pathname_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* open_t::mutable_pathname() {
  set_has_pathname();
  if (pathname_ == NULL) {
    pathname_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.open_t.pathname)
  return pathname_;
}
::common::memory_t* open_t::release_pathname() {
  // @@protoc_insertion_point(field_release:libcall_types.open_t.pathname)
  clear_has_pathname();
  ::common::memory_t* temp = pathname_;
  pathname_ = NULL;
  return temp;
}
void open_t::set_allocated_pathname(::common::memory_t* pathname) {
  delete pathname_;
  pathname_ = pathname;
  if (pathname) {
    set_has_pathname();
  } else {
    clear_has_pathname();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.open_t.pathname)
}

// required uint64 flags = 3;
bool open_t::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void open_t::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
void open_t::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
void open_t::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
  clear_has_flags();
}
::google::protobuf::uint64 open_t::flags() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_t.flags)
  return flags_;
}
void open_t::set_flags(::google::protobuf::uint64 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.open_t.flags)
}

// required uint64 mode = 4;
bool open_t::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void open_t::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void open_t::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void open_t::clear_mode() {
  mode_ = GOOGLE_ULONGLONG(0);
  clear_has_mode();
}
::google::protobuf::uint64 open_t::mode() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_t.mode)
  return mode_;
}
void open_t::set_mode(::google::protobuf::uint64 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.open_t.mode)
}

// required uint64 ret = 5;
bool open_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void open_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void open_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void open_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 open_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.open_t.ret)
  return ret_;
}
void open_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.open_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strcpy_t::kSrcFieldNumber;
const int strcpy_t::kDstFieldNumber;
const int strcpy_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strcpy_t::strcpy_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcpy_t)
}
strcpy_t::strcpy_t(const strcpy_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_t(*from.src_);
  } else {
    src_ = NULL;
  }
  if (from.has_dst()) {
    dst_ = new ::common::memory_t(*from.dst_);
  } else {
    dst_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcpy_t)
}

void strcpy_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&src_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&src_) + sizeof(ret_));
}

strcpy_t::~strcpy_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strcpy_t)
  SharedDtor();
}

void strcpy_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete src_;
  }
  if (this != internal_default_instance()) {
    delete dst_;
  }
}

void strcpy_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strcpy_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[49].descriptor;
}

const strcpy_t& strcpy_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strcpy_t* strcpy_t::New(::google::protobuf::Arena* arena) const {
  strcpy_t* n = new strcpy_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strcpy_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcpy_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_src()) {
      GOOGLE_DCHECK(src_ != NULL);
      src_->::common::memory_t::Clear();
    }
    if (has_dst()) {
      GOOGLE_DCHECK(dst_ != NULL);
      dst_->::common::memory_t::Clear();
    }
  }
  ret_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strcpy_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcpy_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t src = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t dst = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcpy_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcpy_t)
  return false;
#undef DO_
}

void strcpy_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcpy_t)
  // required .common.memory_t src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->src_, output);
  }

  // required .common.memory_t dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dst_, output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcpy_t)
}

::google::protobuf::uint8* strcpy_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcpy_t)
  // required .common.memory_t src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->src_, false, target);
  }

  // required .common.memory_t dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dst_, false, target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcpy_t)
  return target;
}

size_t strcpy_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcpy_t)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_dst()) {
    // required .common.memory_t dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dst_);
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strcpy_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcpy_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required .common.memory_t dst = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dst_);

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strcpy_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strcpy_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strcpy_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcpy_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcpy_t)
    MergeFrom(*source);
  }
}

void strcpy_t::MergeFrom(const strcpy_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_src()) {
      mutable_src()->::common::memory_t::MergeFrom(from.src());
    }
    if (from.has_dst()) {
      mutable_dst()->::common::memory_t::MergeFrom(from.dst());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strcpy_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcpy_t::CopyFrom(const strcpy_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcpy_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_src()) {
    if (!this->src_->IsInitialized()) return false;
  }
  if (has_dst()) {
    if (!this->dst_->IsInitialized()) return false;
  }
  return true;
}

void strcpy_t::Swap(strcpy_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strcpy_t::InternalSwap(strcpy_t* other) {
  std::swap(src_, other->src_);
  std::swap(dst_, other->dst_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strcpy_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strcpy_t

// required .common.memory_t src = 1;
bool strcpy_t::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strcpy_t::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void strcpy_t::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void strcpy_t::clear_src() {
  if (src_ != NULL) src_->::common::memory_t::Clear();
  clear_has_src();
}
const ::common::memory_t& strcpy_t::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcpy_t.src)
  return src_ != NULL ? *src_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* strcpy_t::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strcpy_t.src)
  return src_;
}
::common::memory_t* strcpy_t::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.strcpy_t.src)
  clear_has_src();
  ::common::memory_t* temp = src_;
  src_ = NULL;
  return temp;
}
void strcpy_t::set_allocated_src(::common::memory_t* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strcpy_t.src)
}

// required .common.memory_t dst = 2;
bool strcpy_t::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strcpy_t::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
void strcpy_t::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
void strcpy_t::clear_dst() {
  if (dst_ != NULL) dst_->::common::memory_t::Clear();
  clear_has_dst();
}
const ::common::memory_t& strcpy_t::dst() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcpy_t.dst)
  return dst_ != NULL ? *dst_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* strcpy_t::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) {
    dst_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.strcpy_t.dst)
  return dst_;
}
::common::memory_t* strcpy_t::release_dst() {
  // @@protoc_insertion_point(field_release:libcall_types.strcpy_t.dst)
  clear_has_dst();
  ::common::memory_t* temp = dst_;
  dst_ = NULL;
  return temp;
}
void strcpy_t::set_allocated_dst(::common::memory_t* dst) {
  delete dst_;
  dst_ = dst;
  if (dst) {
    set_has_dst();
  } else {
    clear_has_dst();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.strcpy_t.dst)
}

// required uint64 ret = 3;
bool strcpy_t::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strcpy_t::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void strcpy_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void strcpy_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 strcpy_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcpy_t.ret)
  return ret_;
}
void strcpy_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcpy_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strcmp_t::kS1FieldNumber;
const int strcmp_t::kS2FieldNumber;
const int strcmp_t::kSizeMaxS1FieldNumber;
const int strcmp_t::kSizeMaxS2FieldNumber;
const int strcmp_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strcmp_t::strcmp_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcmp_t)
}
strcmp_t::strcmp_t(const strcmp_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcmp_t)
}

void strcmp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
}

strcmp_t::~strcmp_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strcmp_t)
  SharedDtor();
}

void strcmp_t::SharedDtor() {
}

void strcmp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strcmp_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[50].descriptor;
}

const strcmp_t& strcmp_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strcmp_t* strcmp_t::New(::google::protobuf::Arena* arena) const {
  strcmp_t* n = new strcmp_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strcmp_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcmp_t)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strcmp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcmp_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s1 = 1;
      case 1: {
        if (tag == 8u) {
          set_has_s1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 s2 = 2;
      case 2: {
        if (tag == 16u) {
          set_has_s2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size_max_s1 = 3;
      case 3: {
        if (tag == 24u) {
          set_has_size_max_s1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_max_s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size_max_s2 = 4;
      case 4: {
        if (tag == 32u) {
          set_has_size_max_s2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_max_s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 5;
      case 5: {
        if (tag == 40u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcmp_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcmp_t)
  return false;
#undef DO_
}

void strcmp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcmp_t)
  // required uint64 s1 = 1;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->s1(), output);
  }

  // required uint64 s2 = 2;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->s2(), output);
  }

  // required uint64 size_max_s1 = 3;
  if (has_size_max_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size_max_s1(), output);
  }

  // required uint64 size_max_s2 = 4;
  if (has_size_max_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size_max_s2(), output);
  }

  // required uint64 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcmp_t)
}

::google::protobuf::uint8* strcmp_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcmp_t)
  // required uint64 s1 = 1;
  if (has_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->s1(), target);
  }

  // required uint64 s2 = 2;
  if (has_s2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->s2(), target);
  }

  // required uint64 size_max_s1 = 3;
  if (has_size_max_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size_max_s1(), target);
  }

  // required uint64 size_max_s2 = 4;
  if (has_size_max_s2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size_max_s2(), target);
  }

  // required uint64 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcmp_t)
  return target;
}

size_t strcmp_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcmp_t)
  size_t total_size = 0;

  if (has_s1()) {
    // required uint64 s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s1());
  }

  if (has_s2()) {
    // required uint64 s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s2());
  }

  if (has_size_max_s1()) {
    // required uint64 size_max_s1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_max_s1());
  }

  if (has_size_max_s2()) {
    // required uint64 size_max_s2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_max_s2());
  }

  if (has_ret()) {
    // required uint64 ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strcmp_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcmp_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s1());

    // required uint64 s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s2());

    // required uint64 size_max_s1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_max_s1());

    // required uint64 size_max_s2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size_max_s2());

    // required uint64 ret = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strcmp_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strcmp_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strcmp_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcmp_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcmp_t)
    MergeFrom(*source);
  }
}

void strcmp_t::MergeFrom(const strcmp_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_size_max_s1()) {
      set_size_max_s1(from.size_max_s1());
    }
    if (from.has_size_max_s2()) {
      set_size_max_s2(from.size_max_s2());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strcmp_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcmp_t::CopyFrom(const strcmp_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcmp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void strcmp_t::Swap(strcmp_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strcmp_t::InternalSwap(strcmp_t* other) {
  std::swap(s1_, other->s1_);
  std::swap(s2_, other->s2_);
  std::swap(size_max_s1_, other->size_max_s1_);
  std::swap(size_max_s2_, other->size_max_s2_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strcmp_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strcmp_t

// required uint64 s1 = 1;
bool strcmp_t::has_s1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strcmp_t::set_has_s1() {
  _has_bits_[0] |= 0x00000001u;
}
void strcmp_t::clear_has_s1() {
  _has_bits_[0] &= ~0x00000001u;
}
void strcmp_t::clear_s1() {
  s1_ = GOOGLE_ULONGLONG(0);
  clear_has_s1();
}
::google::protobuf::uint64 strcmp_t::s1() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_t.s1)
  return s1_;
}
void strcmp_t::set_s1(::google::protobuf::uint64 value) {
  set_has_s1();
  s1_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcmp_t.s1)
}

// required uint64 s2 = 2;
bool strcmp_t::has_s2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strcmp_t::set_has_s2() {
  _has_bits_[0] |= 0x00000002u;
}
void strcmp_t::clear_has_s2() {
  _has_bits_[0] &= ~0x00000002u;
}
void strcmp_t::clear_s2() {
  s2_ = GOOGLE_ULONGLONG(0);
  clear_has_s2();
}
::google::protobuf::uint64 strcmp_t::s2() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_t.s2)
  return s2_;
}
void strcmp_t::set_s2(::google::protobuf::uint64 value) {
  set_has_s2();
  s2_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcmp_t.s2)
}

// required uint64 size_max_s1 = 3;
bool strcmp_t::has_size_max_s1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strcmp_t::set_has_size_max_s1() {
  _has_bits_[0] |= 0x00000004u;
}
void strcmp_t::clear_has_size_max_s1() {
  _has_bits_[0] &= ~0x00000004u;
}
void strcmp_t::clear_size_max_s1() {
  size_max_s1_ = GOOGLE_ULONGLONG(0);
  clear_has_size_max_s1();
}
::google::protobuf::uint64 strcmp_t::size_max_s1() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_t.size_max_s1)
  return size_max_s1_;
}
void strcmp_t::set_size_max_s1(::google::protobuf::uint64 value) {
  set_has_size_max_s1();
  size_max_s1_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcmp_t.size_max_s1)
}

// required uint64 size_max_s2 = 4;
bool strcmp_t::has_size_max_s2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void strcmp_t::set_has_size_max_s2() {
  _has_bits_[0] |= 0x00000008u;
}
void strcmp_t::clear_has_size_max_s2() {
  _has_bits_[0] &= ~0x00000008u;
}
void strcmp_t::clear_size_max_s2() {
  size_max_s2_ = GOOGLE_ULONGLONG(0);
  clear_has_size_max_s2();
}
::google::protobuf::uint64 strcmp_t::size_max_s2() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_t.size_max_s2)
  return size_max_s2_;
}
void strcmp_t::set_size_max_s2(::google::protobuf::uint64 value) {
  set_has_size_max_s2();
  size_max_s2_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcmp_t.size_max_s2)
}

// required uint64 ret = 5;
bool strcmp_t::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void strcmp_t::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
void strcmp_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
void strcmp_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 strcmp_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strcmp_t.ret)
  return ret_;
}
void strcmp_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strcmp_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int strncmp_t::kS1FieldNumber;
const int strncmp_t::kS2FieldNumber;
const int strncmp_t::kNFieldNumber;
const int strncmp_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

strncmp_t::strncmp_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncmp_t)
}
strncmp_t::strncmp_t(const strncmp_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncmp_t)
}

void strncmp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
}

strncmp_t::~strncmp_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strncmp_t)
  SharedDtor();
}

void strncmp_t::SharedDtor() {
}

void strncmp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strncmp_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[51].descriptor;
}

const strncmp_t& strncmp_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

strncmp_t* strncmp_t::New(::google::protobuf::Arena* arena) const {
  strncmp_t* n = new strncmp_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void strncmp_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncmp_t)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool strncmp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncmp_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s1 = 1;
      case 1: {
        if (tag == 8u) {
          set_has_s1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 s2 = 2;
      case 2: {
        if (tag == 16u) {
          set_has_s2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 n = 3;
      case 3: {
        if (tag == 24u) {
          set_has_n();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncmp_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncmp_t)
  return false;
#undef DO_
}

void strncmp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncmp_t)
  // required uint64 s1 = 1;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->s1(), output);
  }

  // required uint64 s2 = 2;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->s2(), output);
  }

  // required uint64 n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->n(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncmp_t)
}

::google::protobuf::uint8* strncmp_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncmp_t)
  // required uint64 s1 = 1;
  if (has_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->s1(), target);
  }

  // required uint64 s2 = 2;
  if (has_s2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->s2(), target);
  }

  // required uint64 n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->n(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncmp_t)
  return target;
}

size_t strncmp_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncmp_t)
  size_t total_size = 0;

  if (has_s1()) {
    // required uint64 s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s1());
  }

  if (has_s2()) {
    // required uint64 s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s2());
  }

  if (has_n()) {
    // required uint64 n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strncmp_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncmp_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s1());

    // required uint64 s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s2());

    // required uint64 n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strncmp_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strncmp_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const strncmp_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncmp_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncmp_t)
    MergeFrom(*source);
  }
}

void strncmp_t::MergeFrom(const strncmp_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void strncmp_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncmp_t::CopyFrom(const strncmp_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncmp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncmp_t::Swap(strncmp_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void strncmp_t::InternalSwap(strncmp_t* other) {
  std::swap(s1_, other->s1_);
  std::swap(s2_, other->s2_);
  std::swap(n_, other->n_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata strncmp_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// strncmp_t

// required uint64 s1 = 1;
bool strncmp_t::has_s1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void strncmp_t::set_has_s1() {
  _has_bits_[0] |= 0x00000001u;
}
void strncmp_t::clear_has_s1() {
  _has_bits_[0] &= ~0x00000001u;
}
void strncmp_t::clear_s1() {
  s1_ = GOOGLE_ULONGLONG(0);
  clear_has_s1();
}
::google::protobuf::uint64 strncmp_t::s1() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_t.s1)
  return s1_;
}
void strncmp_t::set_s1(::google::protobuf::uint64 value) {
  set_has_s1();
  s1_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_t.s1)
}

// required uint64 s2 = 2;
bool strncmp_t::has_s2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void strncmp_t::set_has_s2() {
  _has_bits_[0] |= 0x00000002u;
}
void strncmp_t::clear_has_s2() {
  _has_bits_[0] &= ~0x00000002u;
}
void strncmp_t::clear_s2() {
  s2_ = GOOGLE_ULONGLONG(0);
  clear_has_s2();
}
::google::protobuf::uint64 strncmp_t::s2() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_t.s2)
  return s2_;
}
void strncmp_t::set_s2(::google::protobuf::uint64 value) {
  set_has_s2();
  s2_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_t.s2)
}

// required uint64 n = 3;
bool strncmp_t::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void strncmp_t::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void strncmp_t::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void strncmp_t::clear_n() {
  n_ = GOOGLE_ULONGLONG(0);
  clear_has_n();
}
::google::protobuf::uint64 strncmp_t::n() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_t.n)
  return n_;
}
void strncmp_t::set_n(::google::protobuf::uint64 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_t.n)
}

// required uint64 ret = 4;
bool strncmp_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void strncmp_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void strncmp_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void strncmp_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 strncmp_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.strncmp_t.ret)
  return ret_;
}
void strncmp_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.strncmp_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memcmp_t::kS1FieldNumber;
const int memcmp_t::kS2FieldNumber;
const int memcmp_t::kNFieldNumber;
const int memcmp_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memcmp_t::memcmp_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcmp_t)
}
memcmp_t::memcmp_t(const memcmp_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcmp_t)
}

void memcmp_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_) + sizeof(ret_));
}

memcmp_t::~memcmp_t() {
  // @@protoc_insertion_point(destructor:libcall_types.memcmp_t)
  SharedDtor();
}

void memcmp_t::SharedDtor() {
}

void memcmp_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memcmp_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[52].descriptor;
}

const memcmp_t& memcmp_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

memcmp_t* memcmp_t::New(::google::protobuf::Arena* arena) const {
  memcmp_t* n = new memcmp_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memcmp_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcmp_t)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s1_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool memcmp_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcmp_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s1 = 1;
      case 1: {
        if (tag == 8u) {
          set_has_s1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 s2 = 2;
      case 2: {
        if (tag == 16u) {
          set_has_s2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 n = 3;
      case 3: {
        if (tag == 24u) {
          set_has_n();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcmp_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcmp_t)
  return false;
#undef DO_
}

void memcmp_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcmp_t)
  // required uint64 s1 = 1;
  if (has_s1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->s1(), output);
  }

  // required uint64 s2 = 2;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->s2(), output);
  }

  // required uint64 n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->n(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcmp_t)
}

::google::protobuf::uint8* memcmp_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcmp_t)
  // required uint64 s1 = 1;
  if (has_s1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->s1(), target);
  }

  // required uint64 s2 = 2;
  if (has_s2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->s2(), target);
  }

  // required uint64 n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->n(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcmp_t)
  return target;
}

size_t memcmp_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcmp_t)
  size_t total_size = 0;

  if (has_s1()) {
    // required uint64 s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s1());
  }

  if (has_s2()) {
    // required uint64 s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s2());
  }

  if (has_n()) {
    // required uint64 n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t memcmp_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcmp_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 s1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s1());

    // required uint64 s2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->s2());

    // required uint64 n = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->n());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memcmp_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  const memcmp_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const memcmp_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcmp_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcmp_t)
    MergeFrom(*source);
  }
}

void memcmp_t::MergeFrom(const memcmp_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s1()) {
      set_s1(from.s1());
    }
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void memcmp_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcmp_t::CopyFrom(const memcmp_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcmp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memcmp_t::Swap(memcmp_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memcmp_t::InternalSwap(memcmp_t* other) {
  std::swap(s1_, other->s1_);
  std::swap(s2_, other->s2_);
  std::swap(n_, other->n_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memcmp_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memcmp_t

// required uint64 s1 = 1;
bool memcmp_t::has_s1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void memcmp_t::set_has_s1() {
  _has_bits_[0] |= 0x00000001u;
}
void memcmp_t::clear_has_s1() {
  _has_bits_[0] &= ~0x00000001u;
}
void memcmp_t::clear_s1() {
  s1_ = GOOGLE_ULONGLONG(0);
  clear_has_s1();
}
::google::protobuf::uint64 memcmp_t::s1() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_t.s1)
  return s1_;
}
void memcmp_t::set_s1(::google::protobuf::uint64 value) {
  set_has_s1();
  s1_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_t.s1)
}

// required uint64 s2 = 2;
bool memcmp_t::has_s2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void memcmp_t::set_has_s2() {
  _has_bits_[0] |= 0x00000002u;
}
void memcmp_t::clear_has_s2() {
  _has_bits_[0] &= ~0x00000002u;
}
void memcmp_t::clear_s2() {
  s2_ = GOOGLE_ULONGLONG(0);
  clear_has_s2();
}
::google::protobuf::uint64 memcmp_t::s2() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_t.s2)
  return s2_;
}
void memcmp_t::set_s2(::google::protobuf::uint64 value) {
  set_has_s2();
  s2_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_t.s2)
}

// required uint64 n = 3;
bool memcmp_t::has_n() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void memcmp_t::set_has_n() {
  _has_bits_[0] |= 0x00000004u;
}
void memcmp_t::clear_has_n() {
  _has_bits_[0] &= ~0x00000004u;
}
void memcmp_t::clear_n() {
  n_ = GOOGLE_ULONGLONG(0);
  clear_has_n();
}
::google::protobuf::uint64 memcmp_t::n() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_t.n)
  return n_;
}
void memcmp_t::set_n(::google::protobuf::uint64 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_t.n)
}

// required uint64 ret = 4;
bool memcmp_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void memcmp_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void memcmp_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void memcmp_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 memcmp_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcmp_t.ret)
  return ret_;
}
void memcmp_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcmp_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int printf_t::kFormatFieldNumber;
const int printf_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

printf_t::printf_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.printf_t)
}
printf_t::printf_t(const printf_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_format()) {
    format_ = new ::common::memory_t(*from.format_);
  } else {
    format_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.printf_t)
}

void printf_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&format_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&format_) + sizeof(ret_));
}

printf_t::~printf_t() {
  // @@protoc_insertion_point(destructor:libcall_types.printf_t)
  SharedDtor();
}

void printf_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete format_;
  }
}

void printf_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* printf_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[53].descriptor;
}

const printf_t& printf_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

printf_t* printf_t::New(::google::protobuf::Arena* arena) const {
  printf_t* n = new printf_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void printf_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.printf_t)
  if (has_format()) {
    GOOGLE_DCHECK(format_ != NULL);
    format_->::common::memory_t::Clear();
  }
  ret_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool printf_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.printf_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t format = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.printf_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.printf_t)
  return false;
#undef DO_
}

void printf_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.printf_t)
  // required .common.memory_t format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->format_, output);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.printf_t)
}

::google::protobuf::uint8* printf_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.printf_t)
  // required .common.memory_t format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->format_, false, target);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.printf_t)
  return target;
}

size_t printf_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.printf_t)
  size_t total_size = 0;

  if (has_format()) {
    // required .common.memory_t format = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->format_);
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t printf_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.printf_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t format = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->format_);

    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void printf_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.printf_t)
  GOOGLE_DCHECK_NE(&from, this);
  const printf_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const printf_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.printf_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.printf_t)
    MergeFrom(*source);
  }
}

void printf_t::MergeFrom(const printf_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.printf_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_format()) {
      mutable_format()->::common::memory_t::MergeFrom(from.format());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void printf_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.printf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void printf_t::CopyFrom(const printf_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.printf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool printf_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_format()) {
    if (!this->format_->IsInitialized()) return false;
  }
  return true;
}

void printf_t::Swap(printf_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void printf_t::InternalSwap(printf_t* other) {
  std::swap(format_, other->format_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata printf_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// printf_t

// required .common.memory_t format = 1;
bool printf_t::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void printf_t::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
void printf_t::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
void printf_t::clear_format() {
  if (format_ != NULL) format_->::common::memory_t::Clear();
  clear_has_format();
}
const ::common::memory_t& printf_t::format() const {
  // @@protoc_insertion_point(field_get:libcall_types.printf_t.format)
  return format_ != NULL ? *format_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* printf_t::mutable_format() {
  set_has_format();
  if (format_ == NULL) {
    format_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.printf_t.format)
  return format_;
}
::common::memory_t* printf_t::release_format() {
  // @@protoc_insertion_point(field_release:libcall_types.printf_t.format)
  clear_has_format();
  ::common::memory_t* temp = format_;
  format_ = NULL;
  return temp;
}
void printf_t::set_allocated_format(::common::memory_t* format) {
  delete format_;
  format_ = format;
  if (format) {
    set_has_format();
  } else {
    clear_has_format();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.printf_t.format)
}

// required uint64 ret = 2;
bool printf_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void printf_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void printf_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void printf_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 printf_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.printf_t.ret)
  return ret_;
}
void printf_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.printf_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int atoi_t::kSrcFieldNumber;
const int atoi_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

atoi_t::atoi_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.atoi_t)
}
atoi_t::atoi_t(const atoi_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_t(*from.src_);
  } else {
    src_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.atoi_t)
}

void atoi_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&src_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&src_) + sizeof(ret_));
}

atoi_t::~atoi_t() {
  // @@protoc_insertion_point(destructor:libcall_types.atoi_t)
  SharedDtor();
}

void atoi_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete src_;
  }
}

void atoi_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* atoi_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[54].descriptor;
}

const atoi_t& atoi_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

atoi_t* atoi_t::New(::google::protobuf::Arena* arena) const {
  atoi_t* n = new atoi_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void atoi_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.atoi_t)
  if (has_src()) {
    GOOGLE_DCHECK(src_ != NULL);
    src_->::common::memory_t::Clear();
  }
  ret_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool atoi_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.atoi_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t src = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.atoi_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.atoi_t)
  return false;
#undef DO_
}

void atoi_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.atoi_t)
  // required .common.memory_t src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->src_, output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.atoi_t)
}

::google::protobuf::uint8* atoi_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.atoi_t)
  // required .common.memory_t src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->src_, false, target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.atoi_t)
  return target;
}

size_t atoi_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.atoi_t)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t atoi_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.atoi_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void atoi_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.atoi_t)
  GOOGLE_DCHECK_NE(&from, this);
  const atoi_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const atoi_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.atoi_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.atoi_t)
    MergeFrom(*source);
  }
}

void atoi_t::MergeFrom(const atoi_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.atoi_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_src()) {
      mutable_src()->::common::memory_t::MergeFrom(from.src());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void atoi_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.atoi_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atoi_t::CopyFrom(const atoi_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.atoi_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atoi_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_src()) {
    if (!this->src_->IsInitialized()) return false;
  }
  return true;
}

void atoi_t::Swap(atoi_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void atoi_t::InternalSwap(atoi_t* other) {
  std::swap(src_, other->src_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata atoi_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// atoi_t

// required .common.memory_t src = 1;
bool atoi_t::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void atoi_t::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void atoi_t::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void atoi_t::clear_src() {
  if (src_ != NULL) src_->::common::memory_t::Clear();
  clear_has_src();
}
const ::common::memory_t& atoi_t::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.atoi_t.src)
  return src_ != NULL ? *src_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* atoi_t::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.atoi_t.src)
  return src_;
}
::common::memory_t* atoi_t::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.atoi_t.src)
  clear_has_src();
  ::common::memory_t* temp = src_;
  src_ = NULL;
  return temp;
}
void atoi_t::set_allocated_src(::common::memory_t* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.atoi_t.src)
}

// required uint64 ret = 3;
bool atoi_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void atoi_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void atoi_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void atoi_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 atoi_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.atoi_t.ret)
  return ret_;
}
void atoi_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.atoi_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int malloc_t::kSizeFieldNumber;
const int malloc_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

malloc_t::malloc_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.malloc_t)
}
malloc_t::malloc_t(const malloc_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.malloc_t)
}

void malloc_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
}

malloc_t::~malloc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.malloc_t)
  SharedDtor();
}

void malloc_t::SharedDtor() {
}

void malloc_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* malloc_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[55].descriptor;
}

const malloc_t& malloc_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

malloc_t* malloc_t::New(::google::protobuf::Arena* arena) const {
  malloc_t* n = new malloc_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void malloc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.malloc_t)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool malloc_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.malloc_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (tag == 8u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.malloc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.malloc_t)
  return false;
#undef DO_
}

void malloc_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.malloc_t)
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.malloc_t)
}

::google::protobuf::uint8* malloc_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.malloc_t)
  // required uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.malloc_t)
  return target;
}

size_t malloc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.malloc_t)
  size_t total_size = 0;

  if (has_size()) {
    // required uint64 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t malloc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.malloc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 size = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void malloc_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.malloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const malloc_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const malloc_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.malloc_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.malloc_t)
    MergeFrom(*source);
  }
}

void malloc_t::MergeFrom(const malloc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.malloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void malloc_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.malloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void malloc_t::CopyFrom(const malloc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.malloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool malloc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void malloc_t::Swap(malloc_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void malloc_t::InternalSwap(malloc_t* other) {
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata malloc_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// malloc_t

// required uint64 size = 1;
bool malloc_t::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void malloc_t::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void malloc_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void malloc_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 malloc_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.malloc_t.size)
  return size_;
}
void malloc_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.malloc_t.size)
}

// required uint64 ret = 2;
bool malloc_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void malloc_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void malloc_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void malloc_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 malloc_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.malloc_t.ret)
  return ret_;
}
void malloc_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.malloc_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getmodulehandle_t::kModuleNameFieldNumber;
const int getmodulehandle_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getmodulehandle_t::getmodulehandle_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmodulehandle_t)
}
getmodulehandle_t::getmodulehandle_t(const getmodulehandle_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module_name()) {
    module_name_ = new ::common::memory_t(*from.module_name_);
  } else {
    module_name_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmodulehandle_t)
}

void getmodulehandle_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&module_name_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&module_name_) + sizeof(ret_));
}

getmodulehandle_t::~getmodulehandle_t() {
  // @@protoc_insertion_point(destructor:libcall_types.getmodulehandle_t)
  SharedDtor();
}

void getmodulehandle_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete module_name_;
  }
}

void getmodulehandle_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getmodulehandle_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[56].descriptor;
}

const getmodulehandle_t& getmodulehandle_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

getmodulehandle_t* getmodulehandle_t::New(::google::protobuf::Arena* arena) const {
  getmodulehandle_t* n = new getmodulehandle_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getmodulehandle_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmodulehandle_t)
  if (has_module_name()) {
    GOOGLE_DCHECK(module_name_ != NULL);
    module_name_->::common::memory_t::Clear();
  }
  ret_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool getmodulehandle_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmodulehandle_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t module_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmodulehandle_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmodulehandle_t)
  return false;
#undef DO_
}

void getmodulehandle_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmodulehandle_t)
  // required .common.memory_t module_name = 1;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->module_name_, output);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmodulehandle_t)
}

::google::protobuf::uint8* getmodulehandle_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmodulehandle_t)
  // required .common.memory_t module_name = 1;
  if (has_module_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->module_name_, false, target);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmodulehandle_t)
  return target;
}

size_t getmodulehandle_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmodulehandle_t)
  size_t total_size = 0;

  if (has_module_name()) {
    // required .common.memory_t module_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_name_);
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t getmodulehandle_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmodulehandle_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t module_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->module_name_);

    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getmodulehandle_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmodulehandle_t)
  GOOGLE_DCHECK_NE(&from, this);
  const getmodulehandle_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getmodulehandle_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmodulehandle_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmodulehandle_t)
    MergeFrom(*source);
  }
}

void getmodulehandle_t::MergeFrom(const getmodulehandle_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmodulehandle_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_module_name()) {
      mutable_module_name()->::common::memory_t::MergeFrom(from.module_name());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void getmodulehandle_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmodulehandle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmodulehandle_t::CopyFrom(const getmodulehandle_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmodulehandle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmodulehandle_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_module_name()) {
    if (!this->module_name_->IsInitialized()) return false;
  }
  return true;
}

void getmodulehandle_t::Swap(getmodulehandle_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getmodulehandle_t::InternalSwap(getmodulehandle_t* other) {
  std::swap(module_name_, other->module_name_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getmodulehandle_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getmodulehandle_t

// required .common.memory_t module_name = 1;
bool getmodulehandle_t::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void getmodulehandle_t::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
void getmodulehandle_t::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void getmodulehandle_t::clear_module_name() {
  if (module_name_ != NULL) module_name_->::common::memory_t::Clear();
  clear_has_module_name();
}
const ::common::memory_t& getmodulehandle_t::module_name() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmodulehandle_t.module_name)
  return module_name_ != NULL ? *module_name_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* getmodulehandle_t::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == NULL) {
    module_name_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmodulehandle_t.module_name)
  return module_name_;
}
::common::memory_t* getmodulehandle_t::release_module_name() {
  // @@protoc_insertion_point(field_release:libcall_types.getmodulehandle_t.module_name)
  clear_has_module_name();
  ::common::memory_t* temp = module_name_;
  module_name_ = NULL;
  return temp;
}
void getmodulehandle_t::set_allocated_module_name(::common::memory_t* module_name) {
  delete module_name_;
  module_name_ = module_name;
  if (module_name) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmodulehandle_t.module_name)
}

// required uint64 ret = 2;
bool getmodulehandle_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void getmodulehandle_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void getmodulehandle_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void getmodulehandle_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 getmodulehandle_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmodulehandle_t.ret)
  return ret_;
}
void getmodulehandle_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getmodulehandle_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getprocaddress_t::kHmoduleFieldNumber;
const int getprocaddress_t::kProcNameFieldNumber;
const int getprocaddress_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getprocaddress_t::getprocaddress_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getprocaddress_t)
}
getprocaddress_t::getprocaddress_t(const getprocaddress_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proc_name()) {
    proc_name_ = new ::common::memory_t(*from.proc_name_);
  } else {
    proc_name_ = NULL;
  }
  ::memcpy(&hmodule_, &from.hmodule_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&hmodule_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getprocaddress_t)
}

void getprocaddress_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&proc_name_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&proc_name_) + sizeof(ret_));
}

getprocaddress_t::~getprocaddress_t() {
  // @@protoc_insertion_point(destructor:libcall_types.getprocaddress_t)
  SharedDtor();
}

void getprocaddress_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete proc_name_;
  }
}

void getprocaddress_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getprocaddress_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[57].descriptor;
}

const getprocaddress_t& getprocaddress_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

getprocaddress_t* getprocaddress_t::New(::google::protobuf::Arena* arena) const {
  getprocaddress_t* n = new getprocaddress_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getprocaddress_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getprocaddress_t)
  if (has_proc_name()) {
    GOOGLE_DCHECK(proc_name_ != NULL);
    proc_name_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&hmodule_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&hmodule_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool getprocaddress_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getprocaddress_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 hmodule = 1;
      case 1: {
        if (tag == 8u) {
          set_has_hmodule();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hmodule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t proc_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proc_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getprocaddress_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getprocaddress_t)
  return false;
#undef DO_
}

void getprocaddress_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getprocaddress_t)
  // required uint64 hmodule = 1;
  if (has_hmodule()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hmodule(), output);
  }

  // required .common.memory_t proc_name = 2;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->proc_name_, output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getprocaddress_t)
}

::google::protobuf::uint8* getprocaddress_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getprocaddress_t)
  // required uint64 hmodule = 1;
  if (has_hmodule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hmodule(), target);
  }

  // required .common.memory_t proc_name = 2;
  if (has_proc_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->proc_name_, false, target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getprocaddress_t)
  return target;
}

size_t getprocaddress_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getprocaddress_t)
  size_t total_size = 0;

  if (has_proc_name()) {
    // required .common.memory_t proc_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proc_name_);
  }

  if (has_hmodule()) {
    // required uint64 hmodule = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hmodule());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t getprocaddress_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getprocaddress_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t proc_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proc_name_);

    // required uint64 hmodule = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hmodule());

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getprocaddress_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getprocaddress_t)
  GOOGLE_DCHECK_NE(&from, this);
  const getprocaddress_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getprocaddress_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getprocaddress_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getprocaddress_t)
    MergeFrom(*source);
  }
}

void getprocaddress_t::MergeFrom(const getprocaddress_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getprocaddress_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_proc_name()) {
      mutable_proc_name()->::common::memory_t::MergeFrom(from.proc_name());
    }
    if (from.has_hmodule()) {
      set_hmodule(from.hmodule());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void getprocaddress_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getprocaddress_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getprocaddress_t::CopyFrom(const getprocaddress_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getprocaddress_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getprocaddress_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_proc_name()) {
    if (!this->proc_name_->IsInitialized()) return false;
  }
  return true;
}

void getprocaddress_t::Swap(getprocaddress_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getprocaddress_t::InternalSwap(getprocaddress_t* other) {
  std::swap(proc_name_, other->proc_name_);
  std::swap(hmodule_, other->hmodule_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getprocaddress_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getprocaddress_t

// required uint64 hmodule = 1;
bool getprocaddress_t::has_hmodule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void getprocaddress_t::set_has_hmodule() {
  _has_bits_[0] |= 0x00000002u;
}
void getprocaddress_t::clear_has_hmodule() {
  _has_bits_[0] &= ~0x00000002u;
}
void getprocaddress_t::clear_hmodule() {
  hmodule_ = GOOGLE_ULONGLONG(0);
  clear_has_hmodule();
}
::google::protobuf::uint64 getprocaddress_t::hmodule() const {
  // @@protoc_insertion_point(field_get:libcall_types.getprocaddress_t.hmodule)
  return hmodule_;
}
void getprocaddress_t::set_hmodule(::google::protobuf::uint64 value) {
  set_has_hmodule();
  hmodule_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getprocaddress_t.hmodule)
}

// required .common.memory_t proc_name = 2;
bool getprocaddress_t::has_proc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void getprocaddress_t::set_has_proc_name() {
  _has_bits_[0] |= 0x00000001u;
}
void getprocaddress_t::clear_has_proc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void getprocaddress_t::clear_proc_name() {
  if (proc_name_ != NULL) proc_name_->::common::memory_t::Clear();
  clear_has_proc_name();
}
const ::common::memory_t& getprocaddress_t::proc_name() const {
  // @@protoc_insertion_point(field_get:libcall_types.getprocaddress_t.proc_name)
  return proc_name_ != NULL ? *proc_name_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* getprocaddress_t::mutable_proc_name() {
  set_has_proc_name();
  if (proc_name_ == NULL) {
    proc_name_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getprocaddress_t.proc_name)
  return proc_name_;
}
::common::memory_t* getprocaddress_t::release_proc_name() {
  // @@protoc_insertion_point(field_release:libcall_types.getprocaddress_t.proc_name)
  clear_has_proc_name();
  ::common::memory_t* temp = proc_name_;
  proc_name_ = NULL;
  return temp;
}
void getprocaddress_t::set_allocated_proc_name(::common::memory_t* proc_name) {
  delete proc_name_;
  proc_name_ = proc_name;
  if (proc_name) {
    set_has_proc_name();
  } else {
    clear_has_proc_name();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getprocaddress_t.proc_name)
}

// required uint64 ret = 3;
bool getprocaddress_t::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void getprocaddress_t::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void getprocaddress_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void getprocaddress_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 getprocaddress_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.getprocaddress_t.ret)
  return ret_;
}
void getprocaddress_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getprocaddress_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int getmainargs_t::kArgcFieldNumber;
const int getmainargs_t::kArgvFieldNumber;
const int getmainargs_t::kEnvFieldNumber;
const int getmainargs_t::kDowildcardFieldNumber;
const int getmainargs_t::kStartinfoFieldNumber;
const int getmainargs_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

getmainargs_t::getmainargs_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmainargs_t)
}
getmainargs_t::getmainargs_t(const getmainargs_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_argc()) {
    argc_ = new ::common::memory_t(*from.argc_);
  } else {
    argc_ = NULL;
  }
  if (from.has_argv()) {
    argv_ = new ::common::memory_t(*from.argv_);
  } else {
    argv_ = NULL;
  }
  if (from.has_env()) {
    env_ = new ::common::memory_t(*from.env_);
  } else {
    env_ = NULL;
  }
  if (from.has_startinfo()) {
    startinfo_ = new ::common::memory_t(*from.startinfo_);
  } else {
    startinfo_ = NULL;
  }
  ::memcpy(&dowildcard_, &from.dowildcard_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dowildcard_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmainargs_t)
}

void getmainargs_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&argc_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&argc_) + sizeof(ret_));
}

getmainargs_t::~getmainargs_t() {
  // @@protoc_insertion_point(destructor:libcall_types.getmainargs_t)
  SharedDtor();
}

void getmainargs_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete argc_;
  }
  if (this != internal_default_instance()) {
    delete argv_;
  }
  if (this != internal_default_instance()) {
    delete env_;
  }
  if (this != internal_default_instance()) {
    delete startinfo_;
  }
}

void getmainargs_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getmainargs_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[58].descriptor;
}

const getmainargs_t& getmainargs_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

getmainargs_t* getmainargs_t::New(::google::protobuf::Arena* arena) const {
  getmainargs_t* n = new getmainargs_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void getmainargs_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmainargs_t)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_argc()) {
      GOOGLE_DCHECK(argc_ != NULL);
      argc_->::common::memory_t::Clear();
    }
    if (has_argv()) {
      GOOGLE_DCHECK(argv_ != NULL);
      argv_->::common::memory_t::Clear();
    }
    if (has_env()) {
      GOOGLE_DCHECK(env_ != NULL);
      env_->::common::memory_t::Clear();
    }
    if (has_startinfo()) {
      GOOGLE_DCHECK(startinfo_ != NULL);
      startinfo_->::common::memory_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&dowildcard_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dowildcard_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool getmainargs_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmainargs_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t argc = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t argv = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t env = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 dowildcard = 4;
      case 4: {
        if (tag == 32u) {
          set_has_dowildcard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dowildcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t startinfo = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 6;
      case 6: {
        if (tag == 48u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmainargs_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmainargs_t)
  return false;
#undef DO_
}

void getmainargs_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmainargs_t)
  // required .common.memory_t argc = 1;
  if (has_argc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->argc_, output);
  }

  // required .common.memory_t argv = 2;
  if (has_argv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->argv_, output);
  }

  // required .common.memory_t env = 3;
  if (has_env()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->env_, output);
  }

  // required uint64 dowildcard = 4;
  if (has_dowildcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dowildcard(), output);
  }

  // required .common.memory_t startinfo = 5;
  if (has_startinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->startinfo_, output);
  }

  // required uint64 ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmainargs_t)
}

::google::protobuf::uint8* getmainargs_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmainargs_t)
  // required .common.memory_t argc = 1;
  if (has_argc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->argc_, false, target);
  }

  // required .common.memory_t argv = 2;
  if (has_argv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->argv_, false, target);
  }

  // required .common.memory_t env = 3;
  if (has_env()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->env_, false, target);
  }

  // required uint64 dowildcard = 4;
  if (has_dowildcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dowildcard(), target);
  }

  // required .common.memory_t startinfo = 5;
  if (has_startinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->startinfo_, false, target);
  }

  // required uint64 ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmainargs_t)
  return target;
}

size_t getmainargs_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmainargs_t)
  size_t total_size = 0;

  if (has_argc()) {
    // required .common.memory_t argc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argc_);
  }

  if (has_argv()) {
    // required .common.memory_t argv = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argv_);
  }

  if (has_env()) {
    // required .common.memory_t env = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->env_);
  }

  if (has_startinfo()) {
    // required .common.memory_t startinfo = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startinfo_);
  }

  if (has_dowildcard()) {
    // required uint64 dowildcard = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dowildcard());
  }

  if (has_ret()) {
    // required uint64 ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t getmainargs_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmainargs_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_t argc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argc_);

    // required .common.memory_t argv = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->argv_);

    // required .common.memory_t env = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->env_);

    // required .common.memory_t startinfo = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startinfo_);

    // required uint64 dowildcard = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dowildcard());

    // required uint64 ret = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getmainargs_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmainargs_t)
  GOOGLE_DCHECK_NE(&from, this);
  const getmainargs_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const getmainargs_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmainargs_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmainargs_t)
    MergeFrom(*source);
  }
}

void getmainargs_t::MergeFrom(const getmainargs_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmainargs_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_argc()) {
      mutable_argc()->::common::memory_t::MergeFrom(from.argc());
    }
    if (from.has_argv()) {
      mutable_argv()->::common::memory_t::MergeFrom(from.argv());
    }
    if (from.has_env()) {
      mutable_env()->::common::memory_t::MergeFrom(from.env());
    }
    if (from.has_startinfo()) {
      mutable_startinfo()->::common::memory_t::MergeFrom(from.startinfo());
    }
    if (from.has_dowildcard()) {
      set_dowildcard(from.dowildcard());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void getmainargs_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmainargs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmainargs_t::CopyFrom(const getmainargs_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmainargs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmainargs_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_argc()) {
    if (!this->argc_->IsInitialized()) return false;
  }
  if (has_argv()) {
    if (!this->argv_->IsInitialized()) return false;
  }
  if (has_env()) {
    if (!this->env_->IsInitialized()) return false;
  }
  if (has_startinfo()) {
    if (!this->startinfo_->IsInitialized()) return false;
  }
  return true;
}

void getmainargs_t::Swap(getmainargs_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void getmainargs_t::InternalSwap(getmainargs_t* other) {
  std::swap(argc_, other->argc_);
  std::swap(argv_, other->argv_);
  std::swap(env_, other->env_);
  std::swap(startinfo_, other->startinfo_);
  std::swap(dowildcard_, other->dowildcard_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata getmainargs_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// getmainargs_t

// required .common.memory_t argc = 1;
bool getmainargs_t::has_argc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void getmainargs_t::set_has_argc() {
  _has_bits_[0] |= 0x00000001u;
}
void getmainargs_t::clear_has_argc() {
  _has_bits_[0] &= ~0x00000001u;
}
void getmainargs_t::clear_argc() {
  if (argc_ != NULL) argc_->::common::memory_t::Clear();
  clear_has_argc();
}
const ::common::memory_t& getmainargs_t::argc() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_t.argc)
  return argc_ != NULL ? *argc_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* getmainargs_t::mutable_argc() {
  set_has_argc();
  if (argc_ == NULL) {
    argc_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_t.argc)
  return argc_;
}
::common::memory_t* getmainargs_t::release_argc() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_t.argc)
  clear_has_argc();
  ::common::memory_t* temp = argc_;
  argc_ = NULL;
  return temp;
}
void getmainargs_t::set_allocated_argc(::common::memory_t* argc) {
  delete argc_;
  argc_ = argc;
  if (argc) {
    set_has_argc();
  } else {
    clear_has_argc();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_t.argc)
}

// required .common.memory_t argv = 2;
bool getmainargs_t::has_argv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void getmainargs_t::set_has_argv() {
  _has_bits_[0] |= 0x00000002u;
}
void getmainargs_t::clear_has_argv() {
  _has_bits_[0] &= ~0x00000002u;
}
void getmainargs_t::clear_argv() {
  if (argv_ != NULL) argv_->::common::memory_t::Clear();
  clear_has_argv();
}
const ::common::memory_t& getmainargs_t::argv() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_t.argv)
  return argv_ != NULL ? *argv_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* getmainargs_t::mutable_argv() {
  set_has_argv();
  if (argv_ == NULL) {
    argv_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_t.argv)
  return argv_;
}
::common::memory_t* getmainargs_t::release_argv() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_t.argv)
  clear_has_argv();
  ::common::memory_t* temp = argv_;
  argv_ = NULL;
  return temp;
}
void getmainargs_t::set_allocated_argv(::common::memory_t* argv) {
  delete argv_;
  argv_ = argv;
  if (argv) {
    set_has_argv();
  } else {
    clear_has_argv();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_t.argv)
}

// required .common.memory_t env = 3;
bool getmainargs_t::has_env() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void getmainargs_t::set_has_env() {
  _has_bits_[0] |= 0x00000004u;
}
void getmainargs_t::clear_has_env() {
  _has_bits_[0] &= ~0x00000004u;
}
void getmainargs_t::clear_env() {
  if (env_ != NULL) env_->::common::memory_t::Clear();
  clear_has_env();
}
const ::common::memory_t& getmainargs_t::env() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_t.env)
  return env_ != NULL ? *env_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* getmainargs_t::mutable_env() {
  set_has_env();
  if (env_ == NULL) {
    env_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_t.env)
  return env_;
}
::common::memory_t* getmainargs_t::release_env() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_t.env)
  clear_has_env();
  ::common::memory_t* temp = env_;
  env_ = NULL;
  return temp;
}
void getmainargs_t::set_allocated_env(::common::memory_t* env) {
  delete env_;
  env_ = env;
  if (env) {
    set_has_env();
  } else {
    clear_has_env();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_t.env)
}

// required uint64 dowildcard = 4;
bool getmainargs_t::has_dowildcard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void getmainargs_t::set_has_dowildcard() {
  _has_bits_[0] |= 0x00000010u;
}
void getmainargs_t::clear_has_dowildcard() {
  _has_bits_[0] &= ~0x00000010u;
}
void getmainargs_t::clear_dowildcard() {
  dowildcard_ = GOOGLE_ULONGLONG(0);
  clear_has_dowildcard();
}
::google::protobuf::uint64 getmainargs_t::dowildcard() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_t.dowildcard)
  return dowildcard_;
}
void getmainargs_t::set_dowildcard(::google::protobuf::uint64 value) {
  set_has_dowildcard();
  dowildcard_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getmainargs_t.dowildcard)
}

// required .common.memory_t startinfo = 5;
bool getmainargs_t::has_startinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void getmainargs_t::set_has_startinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void getmainargs_t::clear_has_startinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void getmainargs_t::clear_startinfo() {
  if (startinfo_ != NULL) startinfo_->::common::memory_t::Clear();
  clear_has_startinfo();
}
const ::common::memory_t& getmainargs_t::startinfo() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_t.startinfo)
  return startinfo_ != NULL ? *startinfo_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* getmainargs_t::mutable_startinfo() {
  set_has_startinfo();
  if (startinfo_ == NULL) {
    startinfo_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.getmainargs_t.startinfo)
  return startinfo_;
}
::common::memory_t* getmainargs_t::release_startinfo() {
  // @@protoc_insertion_point(field_release:libcall_types.getmainargs_t.startinfo)
  clear_has_startinfo();
  ::common::memory_t* temp = startinfo_;
  startinfo_ = NULL;
  return temp;
}
void getmainargs_t::set_allocated_startinfo(::common::memory_t* startinfo) {
  delete startinfo_;
  startinfo_ = startinfo;
  if (startinfo) {
    set_has_startinfo();
  } else {
    clear_has_startinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.getmainargs_t.startinfo)
}

// required uint64 ret = 6;
bool getmainargs_t::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void getmainargs_t::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
void getmainargs_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
void getmainargs_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 getmainargs_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.getmainargs_t.ret)
  return ret_;
}
void getmainargs_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.getmainargs_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gethostname_t::kNameFieldNumber;
const int gethostname_t::kNamelenFieldNumber;
const int gethostname_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gethostname_t::gethostname_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.gethostname_t)
}
gethostname_t::gethostname_t(const gethostname_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::common::memory_t(*from.name_);
  } else {
    name_ = NULL;
  }
  ::memcpy(&namelen_, &from.namelen_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&namelen_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.gethostname_t)
}

void gethostname_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&name_) + sizeof(ret_));
}

gethostname_t::~gethostname_t() {
  // @@protoc_insertion_point(destructor:libcall_types.gethostname_t)
  SharedDtor();
}

void gethostname_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete name_;
  }
}

void gethostname_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gethostname_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[59].descriptor;
}

const gethostname_t& gethostname_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

gethostname_t* gethostname_t::New(::google::protobuf::Arena* arena) const {
  gethostname_t* n = new gethostname_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void gethostname_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.gethostname_t)
  if (has_name()) {
    GOOGLE_DCHECK(name_ != NULL);
    name_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&namelen_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&namelen_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gethostname_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.gethostname_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 namelen = 2;
      case 2: {
        if (tag == 16u) {
          set_has_namelen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &namelen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.gethostname_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.gethostname_t)
  return false;
#undef DO_
}

void gethostname_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.gethostname_t)
  // required .common.memory_t name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->name_, output);
  }

  // required uint64 namelen = 2;
  if (has_namelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->namelen(), output);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.gethostname_t)
}

::google::protobuf::uint8* gethostname_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.gethostname_t)
  // required .common.memory_t name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->name_, false, target);
  }

  // required uint64 namelen = 2;
  if (has_namelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->namelen(), target);
  }

  // required uint64 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.gethostname_t)
  return target;
}

size_t gethostname_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.gethostname_t)
  size_t total_size = 0;

  if (has_name()) {
    // required .common.memory_t name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }

  if (has_namelen()) {
    // required uint64 namelen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->namelen());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t gethostname_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.gethostname_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);

    // required uint64 namelen = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->namelen());

    // required uint64 ret = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gethostname_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.gethostname_t)
  GOOGLE_DCHECK_NE(&from, this);
  const gethostname_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gethostname_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.gethostname_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.gethostname_t)
    MergeFrom(*source);
  }
}

void gethostname_t::MergeFrom(const gethostname_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.gethostname_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      mutable_name()->::common::memory_t::MergeFrom(from.name());
    }
    if (from.has_namelen()) {
      set_namelen(from.namelen());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void gethostname_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.gethostname_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gethostname_t::CopyFrom(const gethostname_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.gethostname_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gethostname_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_name()) {
    if (!this->name_->IsInitialized()) return false;
  }
  return true;
}

void gethostname_t::Swap(gethostname_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gethostname_t::InternalSwap(gethostname_t* other) {
  std::swap(name_, other->name_);
  std::swap(namelen_, other->namelen_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata gethostname_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// gethostname_t

// required .common.memory_t name = 1;
bool gethostname_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void gethostname_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void gethostname_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void gethostname_t::clear_name() {
  if (name_ != NULL) name_->::common::memory_t::Clear();
  clear_has_name();
}
const ::common::memory_t& gethostname_t::name() const {
  // @@protoc_insertion_point(field_get:libcall_types.gethostname_t.name)
  return name_ != NULL ? *name_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* gethostname_t::mutable_name() {
  set_has_name();
  if (name_ == NULL) {
    name_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.gethostname_t.name)
  return name_;
}
::common::memory_t* gethostname_t::release_name() {
  // @@protoc_insertion_point(field_release:libcall_types.gethostname_t.name)
  clear_has_name();
  ::common::memory_t* temp = name_;
  name_ = NULL;
  return temp;
}
void gethostname_t::set_allocated_name(::common::memory_t* name) {
  delete name_;
  name_ = name;
  if (name) {
    set_has_name();
  } else {
    clear_has_name();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.gethostname_t.name)
}

// required uint64 namelen = 2;
bool gethostname_t::has_namelen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void gethostname_t::set_has_namelen() {
  _has_bits_[0] |= 0x00000002u;
}
void gethostname_t::clear_has_namelen() {
  _has_bits_[0] &= ~0x00000002u;
}
void gethostname_t::clear_namelen() {
  namelen_ = GOOGLE_ULONGLONG(0);
  clear_has_namelen();
}
::google::protobuf::uint64 gethostname_t::namelen() const {
  // @@protoc_insertion_point(field_get:libcall_types.gethostname_t.namelen)
  return namelen_;
}
void gethostname_t::set_namelen(::google::protobuf::uint64 value) {
  set_has_namelen();
  namelen_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.gethostname_t.namelen)
}

// required uint64 ret = 3;
bool gethostname_t::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void gethostname_t::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
void gethostname_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
void gethostname_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 gethostname_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.gethostname_t.ret)
  return ret_;
}
void gethostname_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.gethostname_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int free_t::kPtrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

free_t::free_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.free_t)
}
free_t::free_t(const free_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ptr_ = from.ptr_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.free_t)
}

void free_t::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
}

free_t::~free_t() {
  // @@protoc_insertion_point(destructor:libcall_types.free_t)
  SharedDtor();
}

void free_t::SharedDtor() {
}

void free_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* free_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[60].descriptor;
}

const free_t& free_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

free_t* free_t::New(::google::protobuf::Arena* arena) const {
  free_t* n = new free_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void free_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.free_t)
  ptr_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool free_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.free_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ptr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.free_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.free_t)
  return false;
#undef DO_
}

void free_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.free_t)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.free_t)
}

::google::protobuf::uint8* free_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.free_t)
  // required uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.free_t)
  return target;
}

size_t free_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.free_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 ptr = 1;
  if (has_ptr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void free_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.free_t)
  GOOGLE_DCHECK_NE(&from, this);
  const free_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const free_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.free_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.free_t)
    MergeFrom(*source);
  }
}

void free_t::MergeFrom(const free_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.free_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptr()) {
    set_ptr(from.ptr());
  }
}

void free_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.free_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void free_t::CopyFrom(const free_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.free_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool free_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void free_t::Swap(free_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void free_t::InternalSwap(free_t* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata free_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// free_t

// required uint64 ptr = 1;
bool free_t::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void free_t::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
void free_t::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
void free_t::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
::google::protobuf::uint64 free_t::ptr() const {
  // @@protoc_insertion_point(field_get:libcall_types.free_t.ptr)
  return ptr_;
}
void free_t::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.free_t.ptr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memcpy_t::kDestFieldNumber;
const int memcpy_t::kSrcFieldNumber;
const int memcpy_t::kSizeFieldNumber;
const int memcpy_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memcpy_t::memcpy_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcpy_t)
}
memcpy_t::memcpy_t(const memcpy_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dest()) {
    dest_ = new ::common::memory_t(*from.dest_);
  } else {
    dest_ = NULL;
  }
  if (from.has_src()) {
    src_ = new ::common::memory_t(*from.src_);
  } else {
    src_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcpy_t)
}

void memcpy_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dest_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dest_) + sizeof(ret_));
}

memcpy_t::~memcpy_t() {
  // @@protoc_insertion_point(destructor:libcall_types.memcpy_t)
  SharedDtor();
}

void memcpy_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dest_;
  }
  if (this != internal_default_instance()) {
    delete src_;
  }
}

void memcpy_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memcpy_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[61].descriptor;
}

const memcpy_t& memcpy_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

memcpy_t* memcpy_t::New(::google::protobuf::Arena* arena) const {
  memcpy_t* n = new memcpy_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memcpy_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcpy_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dest()) {
      GOOGLE_DCHECK(dest_ != NULL);
      dest_->::common::memory_t::Clear();
    }
    if (has_src()) {
      GOOGLE_DCHECK(src_ != NULL);
      src_->::common::memory_t::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool memcpy_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcpy_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t dest = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t src = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (tag == 24u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcpy_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcpy_t)
  return false;
#undef DO_
}

void memcpy_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcpy_t)
  // required .common.memory_t dest = 1;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dest_, output);
  }

  // required .common.memory_t src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->src_, output);
  }

  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcpy_t)
}

::google::protobuf::uint8* memcpy_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcpy_t)
  // required .common.memory_t dest = 1;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dest_, false, target);
  }

  // required .common.memory_t src = 2;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->src_, false, target);
  }

  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcpy_t)
  return target;
}

size_t memcpy_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcpy_t)
  size_t total_size = 0;

  if (has_dest()) {
    // required .common.memory_t dest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dest_);
  }

  if (has_src()) {
    // required .common.memory_t src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t memcpy_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcpy_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t dest = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dest_);

    // required .common.memory_t src = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->src_);

    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memcpy_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  const memcpy_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const memcpy_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcpy_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcpy_t)
    MergeFrom(*source);
  }
}

void memcpy_t::MergeFrom(const memcpy_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_dest()) {
      mutable_dest()->::common::memory_t::MergeFrom(from.dest());
    }
    if (from.has_src()) {
      mutable_src()->::common::memory_t::MergeFrom(from.src());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void memcpy_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcpy_t::CopyFrom(const memcpy_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcpy_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_dest()) {
    if (!this->dest_->IsInitialized()) return false;
  }
  if (has_src()) {
    if (!this->src_->IsInitialized()) return false;
  }
  return true;
}

void memcpy_t::Swap(memcpy_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memcpy_t::InternalSwap(memcpy_t* other) {
  std::swap(dest_, other->dest_);
  std::swap(src_, other->src_);
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memcpy_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[61];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memcpy_t

// required .common.memory_t dest = 1;
bool memcpy_t::has_dest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void memcpy_t::set_has_dest() {
  _has_bits_[0] |= 0x00000001u;
}
void memcpy_t::clear_has_dest() {
  _has_bits_[0] &= ~0x00000001u;
}
void memcpy_t::clear_dest() {
  if (dest_ != NULL) dest_->::common::memory_t::Clear();
  clear_has_dest();
}
const ::common::memory_t& memcpy_t::dest() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_t.dest)
  return dest_ != NULL ? *dest_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* memcpy_t::mutable_dest() {
  set_has_dest();
  if (dest_ == NULL) {
    dest_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.memcpy_t.dest)
  return dest_;
}
::common::memory_t* memcpy_t::release_dest() {
  // @@protoc_insertion_point(field_release:libcall_types.memcpy_t.dest)
  clear_has_dest();
  ::common::memory_t* temp = dest_;
  dest_ = NULL;
  return temp;
}
void memcpy_t::set_allocated_dest(::common::memory_t* dest) {
  delete dest_;
  dest_ = dest;
  if (dest) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.memcpy_t.dest)
}

// required .common.memory_t src = 2;
bool memcpy_t::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void memcpy_t::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
void memcpy_t::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
void memcpy_t::clear_src() {
  if (src_ != NULL) src_->::common::memory_t::Clear();
  clear_has_src();
}
const ::common::memory_t& memcpy_t::src() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_t.src)
  return src_ != NULL ? *src_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* memcpy_t::mutable_src() {
  set_has_src();
  if (src_ == NULL) {
    src_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.memcpy_t.src)
  return src_;
}
::common::memory_t* memcpy_t::release_src() {
  // @@protoc_insertion_point(field_release:libcall_types.memcpy_t.src)
  clear_has_src();
  ::common::memory_t* temp = src_;
  src_ = NULL;
  return temp;
}
void memcpy_t::set_allocated_src(::common::memory_t* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.memcpy_t.src)
}

// required uint64 size = 3;
bool memcpy_t::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void memcpy_t::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void memcpy_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void memcpy_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 memcpy_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_t.size)
  return size_;
}
void memcpy_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcpy_t.size)
}

// required uint64 ret = 4;
bool memcpy_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void memcpy_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void memcpy_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void memcpy_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 memcpy_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.memcpy_t.ret)
  return ret_;
}
void memcpy_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memcpy_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int memset_t::kSFieldNumber;
const int memset_t::kCFieldNumber;
const int memset_t::kSizeFieldNumber;
const int memset_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

memset_t::memset_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memset_t)
}
memset_t::memset_t(const memset_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s()) {
    s_ = new ::common::memory_t(*from.s_);
  } else {
    s_ = NULL;
  }
  ::memcpy(&c_, &from.c_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&c_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memset_t)
}

void memset_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s_) + sizeof(ret_));
}

memset_t::~memset_t() {
  // @@protoc_insertion_point(destructor:libcall_types.memset_t)
  SharedDtor();
}

void memset_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete s_;
  }
}

void memset_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* memset_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[62].descriptor;
}

const memset_t& memset_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

memset_t* memset_t::New(::google::protobuf::Arena* arena) const {
  memset_t* n = new memset_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void memset_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memset_t)
  if (has_s()) {
    GOOGLE_DCHECK(s_ != NULL);
    s_->::common::memory_t::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&c_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&c_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool memset_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memset_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t s = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 c = 2;
      case 2: {
        if (tag == 16u) {
          set_has_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (tag == 24u) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memset_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memset_t)
  return false;
#undef DO_
}

void memset_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memset_t)
  // required .common.memory_t s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->s_, output);
  }

  // required uint64 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->c(), output);
  }

  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memset_t)
}

::google::protobuf::uint8* memset_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memset_t)
  // required .common.memory_t s = 1;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->s_, false, target);
  }

  // required uint64 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->c(), target);
  }

  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memset_t)
  return target;
}

size_t memset_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memset_t)
  size_t total_size = 0;

  if (has_s()) {
    // required .common.memory_t s = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_);
  }

  if (has_c()) {
    // required uint64 c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->c());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t memset_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memset_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t s = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->s_);

    // required uint64 c = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->c());

    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void memset_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memset_t)
  GOOGLE_DCHECK_NE(&from, this);
  const memset_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const memset_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memset_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memset_t)
    MergeFrom(*source);
  }
}

void memset_t::MergeFrom(const memset_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memset_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_s()) {
      mutable_s()->::common::memory_t::MergeFrom(from.s());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void memset_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memset_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memset_t::CopyFrom(const memset_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memset_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memset_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_s()) {
    if (!this->s_->IsInitialized()) return false;
  }
  return true;
}

void memset_t::Swap(memset_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void memset_t::InternalSwap(memset_t* other) {
  std::swap(s_, other->s_);
  std::swap(c_, other->c_);
  std::swap(size_, other->size_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata memset_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[62];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// memset_t

// required .common.memory_t s = 1;
bool memset_t::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void memset_t::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void memset_t::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void memset_t::clear_s() {
  if (s_ != NULL) s_->::common::memory_t::Clear();
  clear_has_s();
}
const ::common::memory_t& memset_t::s() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_t.s)
  return s_ != NULL ? *s_
                         : *::common::memory_t::internal_default_instance();
}
::common::memory_t* memset_t::mutable_s() {
  set_has_s();
  if (s_ == NULL) {
    s_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:libcall_types.memset_t.s)
  return s_;
}
::common::memory_t* memset_t::release_s() {
  // @@protoc_insertion_point(field_release:libcall_types.memset_t.s)
  clear_has_s();
  ::common::memory_t* temp = s_;
  s_ = NULL;
  return temp;
}
void memset_t::set_allocated_s(::common::memory_t* s) {
  delete s_;
  s_ = s;
  if (s) {
    set_has_s();
  } else {
    clear_has_s();
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.memset_t.s)
}

// required uint64 c = 2;
bool memset_t::has_c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void memset_t::set_has_c() {
  _has_bits_[0] |= 0x00000002u;
}
void memset_t::clear_has_c() {
  _has_bits_[0] &= ~0x00000002u;
}
void memset_t::clear_c() {
  c_ = GOOGLE_ULONGLONG(0);
  clear_has_c();
}
::google::protobuf::uint64 memset_t::c() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_t.c)
  return c_;
}
void memset_t::set_c(::google::protobuf::uint64 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memset_t.c)
}

// required uint64 size = 3;
bool memset_t::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void memset_t::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void memset_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void memset_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 memset_t::size() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_t.size)
  return size_;
}
void memset_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memset_t.size)
}

// required uint64 ret = 4;
bool memset_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void memset_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void memset_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void memset_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 memset_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.memset_t.ret)
  return ret_;
}
void memset_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.memset_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int fgetc_t::kStreamFieldNumber;
const int fgetc_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

fgetc_t::fgetc_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fgetc_t)
}
fgetc_t::fgetc_t(const fgetc_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fgetc_t)
}

void fgetc_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_) + sizeof(ret_));
}

fgetc_t::~fgetc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fgetc_t)
  SharedDtor();
}

void fgetc_t::SharedDtor() {
}

void fgetc_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fgetc_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[63].descriptor;
}

const fgetc_t& fgetc_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

fgetc_t* fgetc_t::New(::google::protobuf::Arena* arena) const {
  fgetc_t* n = new fgetc_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void fgetc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fgetc_t)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stream_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool fgetc_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fgetc_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stream = 1;
      case 1: {
        if (tag == 8u) {
          set_has_stream();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fgetc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fgetc_t)
  return false;
#undef DO_
}

void fgetc_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fgetc_t)
  // required uint64 stream = 1;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream(), output);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fgetc_t)
}

::google::protobuf::uint8* fgetc_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fgetc_t)
  // required uint64 stream = 1;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream(), target);
  }

  // required uint64 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fgetc_t)
  return target;
}

size_t fgetc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fgetc_t)
  size_t total_size = 0;

  if (has_stream()) {
    // required uint64 stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream());
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fgetc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fgetc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 stream = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->stream());

    // required uint64 ret = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fgetc_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fgetc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fgetc_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const fgetc_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fgetc_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fgetc_t)
    MergeFrom(*source);
  }
}

void fgetc_t::MergeFrom(const fgetc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fgetc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void fgetc_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fgetc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fgetc_t::CopyFrom(const fgetc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fgetc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fgetc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fgetc_t::Swap(fgetc_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void fgetc_t::InternalSwap(fgetc_t* other) {
  std::swap(stream_, other->stream_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata fgetc_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[63];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// fgetc_t

// required uint64 stream = 1;
bool fgetc_t::has_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void fgetc_t::set_has_stream() {
  _has_bits_[0] |= 0x00000001u;
}
void fgetc_t::clear_has_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
void fgetc_t::clear_stream() {
  stream_ = GOOGLE_ULONGLONG(0);
  clear_has_stream();
}
::google::protobuf::uint64 fgetc_t::stream() const {
  // @@protoc_insertion_point(field_get:libcall_types.fgetc_t.stream)
  return stream_;
}
void fgetc_t::set_stream(::google::protobuf::uint64 value) {
  set_has_stream();
  stream_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fgetc_t.stream)
}

// required uint64 ret = 2;
bool fgetc_t::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void fgetc_t::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void fgetc_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void fgetc_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 fgetc_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.fgetc_t.ret)
  return ret_;
}
void fgetc_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.fgetc_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lseek_t::kFdFieldNumber;
const int lseek_t::kOffsetFieldNumber;
const int lseek_t::kWhenceFieldNumber;
const int lseek_t::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lseek_t::lseek_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_libcall_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.lseek_t)
}
lseek_t::lseek_t(const lseek_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fd_, &from.fd_,
    reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.lseek_t)
}

void lseek_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_) + sizeof(ret_));
}

lseek_t::~lseek_t() {
  // @@protoc_insertion_point(destructor:libcall_types.lseek_t)
  SharedDtor();
}

void lseek_t::SharedDtor() {
}

void lseek_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lseek_t::descriptor() {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[64].descriptor;
}

const lseek_t& lseek_t::default_instance() {
  protobuf_libcall_2eproto::InitDefaults();
  return *internal_default_instance();
}

lseek_t* lseek_t::New(::google::protobuf::Arena* arena) const {
  lseek_t* n = new lseek_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void lseek_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.lseek_t)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&fd_, 0, reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool lseek_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.lseek_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fd = 1;
      case 1: {
        if (tag == 8u) {
          set_has_fd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 offset = 2;
      case 2: {
        if (tag == 16u) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 whence = 3;
      case 3: {
        if (tag == 24u) {
          set_has_whence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &whence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (tag == 32u) {
          set_has_ret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.lseek_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.lseek_t)
  return false;
#undef DO_
}

void lseek_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.lseek_t)
  // required uint64 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fd(), output);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // required uint64 whence = 3;
  if (has_whence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->whence(), output);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.lseek_t)
}

::google::protobuf::uint8* lseek_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.lseek_t)
  // required uint64 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fd(), target);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // required uint64 whence = 3;
  if (has_whence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->whence(), target);
  }

  // required uint64 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.lseek_t)
  return target;
}

size_t lseek_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.lseek_t)
  size_t total_size = 0;

  if (has_fd()) {
    // required uint64 fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_offset()) {
    // required uint64 offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  if (has_whence()) {
    // required uint64 whence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->whence());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t lseek_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.lseek_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 fd = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());

    // required uint64 whence = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->whence());

    // required uint64 ret = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lseek_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.lseek_t)
  GOOGLE_DCHECK_NE(&from, this);
  const lseek_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lseek_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.lseek_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.lseek_t)
    MergeFrom(*source);
  }
}

void lseek_t::MergeFrom(const lseek_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.lseek_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_whence()) {
      set_whence(from.whence());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
}

void lseek_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.lseek_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lseek_t::CopyFrom(const lseek_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.lseek_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lseek_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void lseek_t::Swap(lseek_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lseek_t::InternalSwap(lseek_t* other) {
  std::swap(fd_, other->fd_);
  std::swap(offset_, other->offset_);
  std::swap(whence_, other->whence_);
  std::swap(ret_, other->ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata lseek_t::GetMetadata() const {
  protobuf_libcall_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_libcall_2eproto::file_level_metadata[64];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// lseek_t

// required uint64 fd = 1;
bool lseek_t::has_fd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void lseek_t::set_has_fd() {
  _has_bits_[0] |= 0x00000001u;
}
void lseek_t::clear_has_fd() {
  _has_bits_[0] &= ~0x00000001u;
}
void lseek_t::clear_fd() {
  fd_ = GOOGLE_ULONGLONG(0);
  clear_has_fd();
}
::google::protobuf::uint64 lseek_t::fd() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_t.fd)
  return fd_;
}
void lseek_t::set_fd(::google::protobuf::uint64 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_t.fd)
}

// required uint64 offset = 2;
bool lseek_t::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void lseek_t::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void lseek_t::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void lseek_t::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
::google::protobuf::uint64 lseek_t::offset() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_t.offset)
  return offset_;
}
void lseek_t::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_t.offset)
}

// required uint64 whence = 3;
bool lseek_t::has_whence() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void lseek_t::set_has_whence() {
  _has_bits_[0] |= 0x00000004u;
}
void lseek_t::clear_has_whence() {
  _has_bits_[0] &= ~0x00000004u;
}
void lseek_t::clear_whence() {
  whence_ = GOOGLE_ULONGLONG(0);
  clear_has_whence();
}
::google::protobuf::uint64 lseek_t::whence() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_t.whence)
  return whence_;
}
void lseek_t::set_whence(::google::protobuf::uint64 value) {
  set_has_whence();
  whence_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_t.whence)
}

// required uint64 ret = 4;
bool lseek_t::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void lseek_t::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
void lseek_t::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
void lseek_t::clear_ret() {
  ret_ = GOOGLE_ULONGLONG(0);
  clear_has_ret();
}
::google::protobuf::uint64 lseek_t::ret() const {
  // @@protoc_insertion_point(field_get:libcall_types.lseek_t.ret)
  return ret_;
}
void lseek_t::set_ret(::google::protobuf::uint64 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:libcall_types.lseek_t.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace libcall_types

// @@protoc_insertion_point(global_scope)
