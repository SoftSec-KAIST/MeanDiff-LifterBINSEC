// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "trace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace trace_format {
class header_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<header_t> {
} _header_t_default_instance_;
class metadata_t_exception_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<metadata_t_exception_t> {
} _metadata_t_exception_t_default_instance_;
class metadata_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<metadata_t> {
  public:
  ::google::protobuf::internal::ArenaStringPtr module_metadata_;
  const ::trace_format::metadata_t_exception_t* exception_metadata_;
  ::google::protobuf::uint32 wave_metadata_;
} _metadata_t_default_instance_;
class ins_con_info_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ins_con_info_t> {
  public:
  const ::common::register_t* read_register_;
  const ::common::register_t* write_register_;
  const ::common::memory_t* load_memory_;
  const ::common::memory_t* store_memory_;
  const ::libcall_types::libcall_t* call_;
  const ::syscall_types::syscall_t* system_call_;
  ::google::protobuf::uint64 next_address_;
  ::google::protobuf::internal::ArenaStringPtr reserved_comment_;
  ::google::protobuf::uint32 wave_;
} _ins_con_info_t_default_instance_;
class instruction_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<instruction_t> {
} _instruction_t_default_instance_;
class body_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<body_t> {
  public:
  const ::trace_format::metadata_t* metadata_;
  const ::trace_format::instruction_t* instruction_;
} _body_t_default_instance_;
class chunk_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<chunk_t> {
} _chunk_t_default_instance_;
class trace_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<trace_t> {
} _trace_t_default_instance_;

namespace protobuf_trace_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, architecture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, address_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header_t, kind_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t_exception_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t_exception_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t_exception_t, type_exception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t_exception_t, handler_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, typeid__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_metadata_t_default_instance_), module_metadata_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_metadata_t_default_instance_), exception_metadata_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_metadata_t_default_instance_), wave_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metadata_t, metadata_content_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, typeid__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), read_register_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), write_register_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), load_memory_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), store_memory_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), call_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), system_call_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), next_address_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), reserved_comment_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_ins_con_info_t_default_instance_), wave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ins_con_info_t, conc_info_content_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, thread_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, concrete_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instruction_t, dba_instrs_),
  3,
  2,
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, typeid__),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_body_t_default_instance_), metadata_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_body_t_default_instance_), instruction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(body_t, body_content_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chunk_t, body_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trace_t, body_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(header_t)},
  { 10, 16, sizeof(metadata_t_exception_t)},
  { 18, 27, sizeof(metadata_t)},
  { 31, 46, sizeof(ins_con_info_t)},
  { 56, 65, sizeof(instruction_t)},
  { 70, 78, sizeof(body_t)},
  { 81, 86, sizeof(chunk_t)},
  { 87, 93, sizeof(trace_t)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_header_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_metadata_t_exception_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_metadata_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ins_con_info_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_instruction_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_body_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_chunk_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_trace_t_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "trace.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _header_t_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _metadata_t_exception_t_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _metadata_t_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ins_con_info_t_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _instruction_t_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _body_t_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _chunk_t_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _trace_t_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::dba::protobuf_dba_2eproto::InitDefaults();
  ::common::protobuf_common_2eproto::InitDefaults();
  ::syscall_types::protobuf_syscall_2eproto::InitDefaults();
  ::libcall_types::protobuf_libcall_2eproto::InitDefaults();
  _header_t_default_instance_.DefaultConstruct();
  _metadata_t_exception_t_default_instance_.DefaultConstruct();
  _metadata_t_default_instance_.DefaultConstruct();
  _ins_con_info_t_default_instance_.DefaultConstruct();
  _instruction_t_default_instance_.DefaultConstruct();
  _body_t_default_instance_.DefaultConstruct();
  _chunk_t_default_instance_.DefaultConstruct();
  _trace_t_default_instance_.DefaultConstruct();
  _metadata_t_default_instance_.module_metadata_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _metadata_t_default_instance_.exception_metadata_ = const_cast< ::trace_format::metadata_t_exception_t*>(
      ::trace_format::metadata_t_exception_t::internal_default_instance());
  _metadata_t_default_instance_.wave_metadata_ = 0u;
  _ins_con_info_t_default_instance_.read_register_ = const_cast< ::common::register_t*>(
      ::common::register_t::internal_default_instance());
  _ins_con_info_t_default_instance_.write_register_ = const_cast< ::common::register_t*>(
      ::common::register_t::internal_default_instance());
  _ins_con_info_t_default_instance_.load_memory_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _ins_con_info_t_default_instance_.store_memory_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  _ins_con_info_t_default_instance_.call_ = const_cast< ::libcall_types::libcall_t*>(
      ::libcall_types::libcall_t::internal_default_instance());
  _ins_con_info_t_default_instance_.system_call_ = const_cast< ::syscall_types::syscall_t*>(
      ::syscall_types::syscall_t::internal_default_instance());
  _ins_con_info_t_default_instance_.next_address_ = GOOGLE_ULONGLONG(0);
  _ins_con_info_t_default_instance_.reserved_comment_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ins_con_info_t_default_instance_.wave_ = 0u;
  _instruction_t_default_instance_.get_mutable()->dba_instrs_ = const_cast< ::dba::dba_list*>(
      ::dba::dba_list::internal_default_instance());
  _body_t_default_instance_.metadata_ = const_cast< ::trace_format::metadata_t*>(
      ::trace_format::metadata_t::internal_default_instance());
  _body_t_default_instance_.instruction_ = const_cast< ::trace_format::instruction_t*>(
      ::trace_format::instruction_t::internal_default_instance());
  _trace_t_default_instance_.get_mutable()->header_ = const_cast< ::trace_format::header_t*>(
      ::trace_format::header_t::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013trace.proto\022\014trace_format\032\tdba.proto\032\014"
      "common.proto\032\rsyscall.proto\032\rlibcall.pro"
      "to\"\300\001\n\010header_t\022;\n\014architecture\030\001 \002(\0162%."
      "trace_format.header_t.architecture_t\022*\n\014"
      "address_size\030\002 \002(\0162\024.common.proto_size_t"
      "\022$\n\004kind\030\003 \001(\0162\021.common.ir_kind_t:\003DBA\"%"
      "\n\016architecture_t\022\007\n\003X86\020\000\022\n\n\006X86_64\020\001\"\353\002"
      "\n\nmetadata_t\022:\n\006typeid\030\001 \002(\0162*.trace_for"
      "mat.metadata_t.typeid_metadata_t\022\031\n\017modu"
      "le_metadata\030\002 \001(\tH\000\022B\n\022exception_metadat"
      "a\030\003 \001(\0132$.trace_format.metadata_t.except"
      "ion_tH\000\022\027\n\rwave_metadata\030\004 \001(\rH\000\0326\n\013exce"
      "ption_t\022\026\n\016type_exception\030\001 \002(\r\022\017\n\007handl"
      "er\030\002 \002(\004\"]\n\021typeid_metadata_t\022\024\n\020INVALID"
      "_METADATA\020\000\022\022\n\016EXCEPTION_TYPE\020\001\022\017\n\013MODUL"
      "E_TYPE\020\002\022\r\n\tWAVE_TYPE\020\003B\022\n\020metadata_cont"
      "ent\"\336\004\n\016ins_con_info_t\022>\n\006typeid\030\001 \002(\0162."
      ".trace_format.ins_con_info_t.typeid_con_"
      "info_t\022+\n\rread_register\030\002 \001(\0132\022.common.r"
      "egister_tH\000\022,\n\016write_register\030\003 \001(\0132\022.co"
      "mmon.register_tH\000\022\'\n\013load_memory\030\004 \001(\0132\020"
      ".common.memory_tH\000\022(\n\014store_memory\030\005 \001(\013"
      "2\020.common.memory_tH\000\022(\n\004call\030\006 \001(\0132\030.lib"
      "call_types.libcall_tH\000\022/\n\013system_call\030\010 "
      "\001(\0132\030.syscall_types.syscall_tH\000\022\026\n\014next_"
      "address\030\t \001(\004H\000\022\032\n\020reserved_comment\030\n \001("
      "\tH\000\022\016\n\004wave\030\013 \001(\rH\000\"\251\001\n\021typeid_con_info_"
      "t\022\013\n\007INVALID\020\000\022\013\n\007REGREAD\020\001\022\014\n\010REGWRITE\020"
      "\002\022\013\n\007MEMLOAD\020\003\022\014\n\010MEMSTORE\020\004\022\010\n\004CALL\020\005\022\013"
      "\n\007SYSCALL\020\006\022\021\n\rNOT_RETRIEVED\020\007\022\020\n\014NEXT_A"
      "DDRESS\020\010\022\013\n\007COMMENT\020\t\022\010\n\004WAVE\020\nB\023\n\021conc_"
      "info_content\"\234\001\n\rinstruction_t\022\021\n\tthread"
      "_id\030\001 \002(\r\022\017\n\007address\030\002 \002(\004\022\016\n\006opcode\030\003 \002"
      "(\014\0224\n\016concrete_infos\030\004 \003(\0132\034.trace_forma"
      "t.ins_con_info_t\022!\n\ndba_instrs\030\005 \001(\0132\r.d"
      "ba.dba_list\"\336\001\n\006body_t\0222\n\006typeid\030\001 \002(\0162\""
      ".trace_format.body_t.typeid_body_t\022,\n\010me"
      "tadata\030\002 \001(\0132\030.trace_format.metadata_tH\000"
      "\0222\n\013instruction\030\003 \001(\0132\033.trace_format.ins"
      "truction_tH\000\".\n\rtypeid_body_t\022\014\n\010METADAT"
      "A\020\000\022\017\n\013INSTRUCTION\020\001B\016\n\014body_content\"-\n\007"
      "chunk_t\022\"\n\004body\030\001 \003(\0132\024.trace_format.bod"
      "y_t\"U\n\007trace_t\022&\n\006header\030\001 \002(\0132\026.trace_f"
      "ormat.header_t\022\"\n\004body\030\002 \003(\0132\024.trace_for"
      "mat.body_t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "trace.proto", &protobuf_RegisterTypes);
  ::dba::protobuf_dba_2eproto::AddDescriptors();
  ::common::protobuf_common_2eproto::AddDescriptors();
  ::syscall_types::protobuf_syscall_2eproto::AddDescriptors();
  ::libcall_types::protobuf_libcall_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_trace_2eproto

const ::google::protobuf::EnumDescriptor* header_t_architecture_t_descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_enum_descriptors[0];
}
bool header_t_architecture_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const header_t_architecture_t header_t::X86;
const header_t_architecture_t header_t::X86_64;
const header_t_architecture_t header_t::architecture_t_MIN;
const header_t_architecture_t header_t::architecture_t_MAX;
const int header_t::architecture_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* metadata_t_typeid_metadata_t_descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_enum_descriptors[1];
}
bool metadata_t_typeid_metadata_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const metadata_t_typeid_metadata_t metadata_t::INVALID_METADATA;
const metadata_t_typeid_metadata_t metadata_t::EXCEPTION_TYPE;
const metadata_t_typeid_metadata_t metadata_t::MODULE_TYPE;
const metadata_t_typeid_metadata_t metadata_t::WAVE_TYPE;
const metadata_t_typeid_metadata_t metadata_t::typeid_metadata_t_MIN;
const metadata_t_typeid_metadata_t metadata_t::typeid_metadata_t_MAX;
const int metadata_t::typeid_metadata_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ins_con_info_t_typeid_con_info_t_descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_enum_descriptors[2];
}
bool ins_con_info_t_typeid_con_info_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ins_con_info_t_typeid_con_info_t ins_con_info_t::INVALID;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::REGREAD;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::REGWRITE;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::MEMLOAD;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::MEMSTORE;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::CALL;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::SYSCALL;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::NOT_RETRIEVED;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::NEXT_ADDRESS;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::COMMENT;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::WAVE;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::typeid_con_info_t_MIN;
const ins_con_info_t_typeid_con_info_t ins_con_info_t::typeid_con_info_t_MAX;
const int ins_con_info_t::typeid_con_info_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* body_t_typeid_body_t_descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_enum_descriptors[3];
}
bool body_t_typeid_body_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const body_t_typeid_body_t body_t::METADATA;
const body_t_typeid_body_t body_t::INSTRUCTION;
const body_t_typeid_body_t body_t::typeid_body_t_MIN;
const body_t_typeid_body_t body_t::typeid_body_t_MAX;
const int body_t::typeid_body_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int header_t::kArchitectureFieldNumber;
const int header_t::kAddressSizeFieldNumber;
const int header_t::kKindFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

header_t::header_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.header_t)
}
header_t::header_t(const header_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&architecture_, &from.architecture_,
    reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&architecture_) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:trace_format.header_t)
}

void header_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&architecture_, 0, reinterpret_cast<char*>(&address_size_) -
    reinterpret_cast<char*>(&architecture_) + sizeof(address_size_));
  kind_ = 1;
}

header_t::~header_t() {
  // @@protoc_insertion_point(destructor:trace_format.header_t)
  SharedDtor();
}

void header_t::SharedDtor() {
}

void header_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[0].descriptor;
}

const header_t& header_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

header_t* header_t::New(::google::protobuf::Arena* arena) const {
  header_t* n = new header_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void header_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.header_t)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&architecture_, 0, reinterpret_cast<char*>(&address_size_) -
      reinterpret_cast<char*>(&architecture_) + sizeof(address_size_));
    kind_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool header_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.header_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.header_t.architecture_t architecture = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::header_t_architecture_t_IsValid(value)) {
            set_architecture(static_cast< ::trace_format::header_t_architecture_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.proto_size_t address_size = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::proto_size_t_IsValid(value)) {
            set_address_size(static_cast< ::common::proto_size_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.ir_kind_t kind = 3 [default = DBA];
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::ir_kind_t_IsValid(value)) {
            set_kind(static_cast< ::common::ir_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.header_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.header_t)
  return false;
#undef DO_
}

void header_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.header_t)
  // required .trace_format.header_t.architecture_t architecture = 1;
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->architecture(), output);
  }

  // required .common.proto_size_t address_size = 2;
  if (has_address_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->address_size(), output);
  }

  // optional .common.ir_kind_t kind = 3 [default = DBA];
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.header_t)
}

::google::protobuf::uint8* header_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.header_t)
  // required .trace_format.header_t.architecture_t architecture = 1;
  if (has_architecture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->architecture(), target);
  }

  // required .common.proto_size_t address_size = 2;
  if (has_address_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->address_size(), target);
  }

  // optional .common.ir_kind_t kind = 3 [default = DBA];
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.header_t)
  return target;
}

size_t header_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:trace_format.header_t)
  size_t total_size = 0;

  if (has_architecture()) {
    // required .trace_format.header_t.architecture_t architecture = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->architecture());
  }

  if (has_address_size()) {
    // required .common.proto_size_t address_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_size());
  }

  return total_size;
}
size_t header_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.header_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .trace_format.header_t.architecture_t architecture = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->architecture());

    // required .common.proto_size_t address_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .common.ir_kind_t kind = 3 [default = DBA];
  if (has_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.header_t)
  GOOGLE_DCHECK_NE(&from, this);
  const header_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const header_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.header_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.header_t)
    MergeFrom(*source);
  }
}

void header_t::MergeFrom(const header_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.header_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_architecture()) {
      set_architecture(from.architecture());
    }
    if (from.has_address_size()) {
      set_address_size(from.address_size());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
  }
}

void header_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.header_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header_t::CopyFrom(const header_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.header_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void header_t::Swap(header_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void header_t::InternalSwap(header_t* other) {
  std::swap(architecture_, other->architecture_);
  std::swap(address_size_, other->address_size_);
  std::swap(kind_, other->kind_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata header_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// header_t

// required .trace_format.header_t.architecture_t architecture = 1;
bool header_t::has_architecture() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void header_t::set_has_architecture() {
  _has_bits_[0] |= 0x00000001u;
}
void header_t::clear_has_architecture() {
  _has_bits_[0] &= ~0x00000001u;
}
void header_t::clear_architecture() {
  architecture_ = 0;
  clear_has_architecture();
}
::trace_format::header_t_architecture_t header_t::architecture() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.architecture)
  return static_cast< ::trace_format::header_t_architecture_t >(architecture_);
}
void header_t::set_architecture(::trace_format::header_t_architecture_t value) {
  assert(::trace_format::header_t_architecture_t_IsValid(value));
  set_has_architecture();
  architecture_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.architecture)
}

// required .common.proto_size_t address_size = 2;
bool header_t::has_address_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void header_t::set_has_address_size() {
  _has_bits_[0] |= 0x00000002u;
}
void header_t::clear_has_address_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void header_t::clear_address_size() {
  address_size_ = 0;
  clear_has_address_size();
}
::common::proto_size_t header_t::address_size() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.address_size)
  return static_cast< ::common::proto_size_t >(address_size_);
}
void header_t::set_address_size(::common::proto_size_t value) {
  assert(::common::proto_size_t_IsValid(value));
  set_has_address_size();
  address_size_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.address_size)
}

// optional .common.ir_kind_t kind = 3 [default = DBA];
bool header_t::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void header_t::set_has_kind() {
  _has_bits_[0] |= 0x00000004u;
}
void header_t::clear_has_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
void header_t::clear_kind() {
  kind_ = 1;
  clear_has_kind();
}
::common::ir_kind_t header_t::kind() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.kind)
  return static_cast< ::common::ir_kind_t >(kind_);
}
void header_t::set_kind(::common::ir_kind_t value) {
  assert(::common::ir_kind_t_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.kind)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int metadata_t_exception_t::kTypeExceptionFieldNumber;
const int metadata_t_exception_t::kHandlerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

metadata_t_exception_t::metadata_t_exception_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.metadata_t.exception_t)
}
metadata_t_exception_t::metadata_t_exception_t(const metadata_t_exception_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handler_, &from.handler_,
    reinterpret_cast<char*>(&type_exception_) -
    reinterpret_cast<char*>(&handler_) + sizeof(type_exception_));
  // @@protoc_insertion_point(copy_constructor:trace_format.metadata_t.exception_t)
}

void metadata_t_exception_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&handler_, 0, reinterpret_cast<char*>(&type_exception_) -
    reinterpret_cast<char*>(&handler_) + sizeof(type_exception_));
}

metadata_t_exception_t::~metadata_t_exception_t() {
  // @@protoc_insertion_point(destructor:trace_format.metadata_t.exception_t)
  SharedDtor();
}

void metadata_t_exception_t::SharedDtor() {
}

void metadata_t_exception_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metadata_t_exception_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[1].descriptor;
}

const metadata_t_exception_t& metadata_t_exception_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

metadata_t_exception_t* metadata_t_exception_t::New(::google::protobuf::Arena* arena) const {
  metadata_t_exception_t* n = new metadata_t_exception_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void metadata_t_exception_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.metadata_t.exception_t)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&handler_, 0, reinterpret_cast<char*>(&type_exception_) -
      reinterpret_cast<char*>(&handler_) + sizeof(type_exception_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool metadata_t_exception_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.metadata_t.exception_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type_exception = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type_exception();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_exception_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 handler = 2;
      case 2: {
        if (tag == 16u) {
          set_has_handler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.metadata_t.exception_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.metadata_t.exception_t)
  return false;
#undef DO_
}

void metadata_t_exception_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.metadata_t.exception_t)
  // required uint32 type_exception = 1;
  if (has_type_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type_exception(), output);
  }

  // required uint64 handler = 2;
  if (has_handler()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->handler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.metadata_t.exception_t)
}

::google::protobuf::uint8* metadata_t_exception_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.metadata_t.exception_t)
  // required uint32 type_exception = 1;
  if (has_type_exception()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type_exception(), target);
  }

  // required uint64 handler = 2;
  if (has_handler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->handler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.metadata_t.exception_t)
  return target;
}

size_t metadata_t_exception_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:trace_format.metadata_t.exception_t)
  size_t total_size = 0;

  if (has_handler()) {
    // required uint64 handler = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handler());
  }

  if (has_type_exception()) {
    // required uint32 type_exception = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type_exception());
  }

  return total_size;
}
size_t metadata_t_exception_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.metadata_t.exception_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 handler = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handler());

    // required uint32 type_exception = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type_exception());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metadata_t_exception_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.metadata_t.exception_t)
  GOOGLE_DCHECK_NE(&from, this);
  const metadata_t_exception_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const metadata_t_exception_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.metadata_t.exception_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.metadata_t.exception_t)
    MergeFrom(*source);
  }
}

void metadata_t_exception_t::MergeFrom(const metadata_t_exception_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.metadata_t.exception_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_handler()) {
      set_handler(from.handler());
    }
    if (from.has_type_exception()) {
      set_type_exception(from.type_exception());
    }
  }
}

void metadata_t_exception_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.metadata_t.exception_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metadata_t_exception_t::CopyFrom(const metadata_t_exception_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.metadata_t.exception_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metadata_t_exception_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void metadata_t_exception_t::Swap(metadata_t_exception_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void metadata_t_exception_t::InternalSwap(metadata_t_exception_t* other) {
  std::swap(handler_, other->handler_);
  std::swap(type_exception_, other->type_exception_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata metadata_t_exception_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// metadata_t_exception_t

// required uint32 type_exception = 1;
bool metadata_t_exception_t::has_type_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void metadata_t_exception_t::set_has_type_exception() {
  _has_bits_[0] |= 0x00000002u;
}
void metadata_t_exception_t::clear_has_type_exception() {
  _has_bits_[0] &= ~0x00000002u;
}
void metadata_t_exception_t::clear_type_exception() {
  type_exception_ = 0u;
  clear_has_type_exception();
}
::google::protobuf::uint32 metadata_t_exception_t::type_exception() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_t.type_exception)
  return type_exception_;
}
void metadata_t_exception_t::set_type_exception(::google::protobuf::uint32 value) {
  set_has_type_exception();
  type_exception_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.exception_t.type_exception)
}

// required uint64 handler = 2;
bool metadata_t_exception_t::has_handler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void metadata_t_exception_t::set_has_handler() {
  _has_bits_[0] |= 0x00000001u;
}
void metadata_t_exception_t::clear_has_handler() {
  _has_bits_[0] &= ~0x00000001u;
}
void metadata_t_exception_t::clear_handler() {
  handler_ = GOOGLE_ULONGLONG(0);
  clear_has_handler();
}
::google::protobuf::uint64 metadata_t_exception_t::handler() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_t.handler)
  return handler_;
}
void metadata_t_exception_t::set_handler(::google::protobuf::uint64 value) {
  set_has_handler();
  handler_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.exception_t.handler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int metadata_t::kTypeidFieldNumber;
const int metadata_t::kModuleMetadataFieldNumber;
const int metadata_t::kExceptionMetadataFieldNumber;
const int metadata_t::kWaveMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

metadata_t::metadata_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.metadata_t)
}
metadata_t::metadata_t(const metadata_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeid__ = from.typeid__;
  clear_has_metadata_content();
  switch (from.metadata_content_case()) {
    case kModuleMetadata: {
      set_module_metadata(from.module_metadata());
      break;
    }
    case kExceptionMetadata: {
      mutable_exception_metadata()->::trace_format::metadata_t_exception_t::MergeFrom(from.exception_metadata());
      break;
    }
    case kWaveMetadata: {
      set_wave_metadata(from.wave_metadata());
      break;
    }
    case METADATA_CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trace_format.metadata_t)
}

void metadata_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  clear_has_metadata_content();
}

metadata_t::~metadata_t() {
  // @@protoc_insertion_point(destructor:trace_format.metadata_t)
  SharedDtor();
}

void metadata_t::SharedDtor() {
  if (has_metadata_content()) {
    clear_metadata_content();
  }
}

void metadata_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metadata_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[2].descriptor;
}

const metadata_t& metadata_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

metadata_t* metadata_t::New(::google::protobuf::Arena* arena) const {
  metadata_t* n = new metadata_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void metadata_t::clear_metadata_content() {
// @@protoc_insertion_point(one_of_clear_start:trace_format.metadata_t)
  switch (metadata_content_case()) {
    case kModuleMetadata: {
      metadata_content_.module_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kExceptionMetadata: {
      delete metadata_content_.exception_metadata_;
      break;
    }
    case kWaveMetadata: {
      // No need to clear
      break;
    }
    case METADATA_CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METADATA_CONTENT_NOT_SET;
}


void metadata_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.metadata_t)
  typeid__ = 0;
  clear_metadata_content();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool metadata_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.metadata_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::metadata_t_typeid_metadata_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::metadata_t_typeid_metadata_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string module_metadata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module_metadata().data(), this->module_metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trace_format.metadata_t.module_metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trace_format.metadata_t.exception_t exception_metadata = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exception_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wave_metadata = 4;
      case 4: {
        if (tag == 32u) {
          clear_metadata_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &metadata_content_.wave_metadata_)));
          set_has_wave_metadata();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.metadata_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.metadata_t)
  return false;
#undef DO_
}

void metadata_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.metadata_t)
  // required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  switch (metadata_content_case()) {
    case kModuleMetadata:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->module_metadata().data(), this->module_metadata().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "trace_format.metadata_t.module_metadata");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->module_metadata(), output);
      break;
    case kExceptionMetadata:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *metadata_content_.exception_metadata_, output);
      break;
    case kWaveMetadata:
      ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wave_metadata(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.metadata_t)
}

::google::protobuf::uint8* metadata_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.metadata_t)
  // required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  switch (metadata_content_case()) {
    case kModuleMetadata:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->module_metadata().data(), this->module_metadata().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "trace_format.metadata_t.module_metadata");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          2, this->module_metadata(), target);
      break;
    case kExceptionMetadata:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *metadata_content_.exception_metadata_, false, target);
      break;
    case kWaveMetadata:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wave_metadata(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.metadata_t)
  return target;
}

size_t metadata_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.metadata_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
  if (has_typeid_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
  }
  switch (metadata_content_case()) {
    // optional string module_metadata = 2;
    case kModuleMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_metadata());
      break;
    }
    // optional .trace_format.metadata_t.exception_t exception_metadata = 3;
    case kExceptionMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *metadata_content_.exception_metadata_);
      break;
    }
    // optional uint32 wave_metadata = 4;
    case kWaveMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave_metadata());
      break;
    }
    case METADATA_CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metadata_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.metadata_t)
  GOOGLE_DCHECK_NE(&from, this);
  const metadata_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const metadata_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.metadata_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.metadata_t)
    MergeFrom(*source);
  }
}

void metadata_t::MergeFrom(const metadata_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.metadata_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_typeid_()) {
    set_typeid_(from.typeid_());
  }
  switch (from.metadata_content_case()) {
    case kModuleMetadata: {
      set_module_metadata(from.module_metadata());
      break;
    }
    case kExceptionMetadata: {
      mutable_exception_metadata()->::trace_format::metadata_t_exception_t::MergeFrom(from.exception_metadata());
      break;
    }
    case kWaveMetadata: {
      set_wave_metadata(from.wave_metadata());
      break;
    }
    case METADATA_CONTENT_NOT_SET: {
      break;
    }
  }
}

void metadata_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.metadata_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metadata_t::CopyFrom(const metadata_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.metadata_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metadata_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (metadata_content_case()) {
    case kModuleMetadata: {
      break;
    }
    case kExceptionMetadata: {
      if (has_exception_metadata()) {
        if (!this->exception_metadata().IsInitialized()) return false;
      }
      break;
    }
    case kWaveMetadata: {
      break;
    }
    case METADATA_CONTENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void metadata_t::Swap(metadata_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void metadata_t::InternalSwap(metadata_t* other) {
  std::swap(typeid__, other->typeid__);
  std::swap(metadata_content_, other->metadata_content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata metadata_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// metadata_t

// required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
bool metadata_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void metadata_t::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
void metadata_t::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
void metadata_t::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
::trace_format::metadata_t_typeid_metadata_t metadata_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.typeid)
  return static_cast< ::trace_format::metadata_t_typeid_metadata_t >(typeid__);
}
void metadata_t::set_typeid_(::trace_format::metadata_t_typeid_metadata_t value) {
  assert(::trace_format::metadata_t_typeid_metadata_t_IsValid(value));
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.typeid)
}

// optional string module_metadata = 2;
bool metadata_t::has_module_metadata() const {
  return metadata_content_case() == kModuleMetadata;
}
void metadata_t::set_has_module_metadata() {
  _oneof_case_[0] = kModuleMetadata;
}
void metadata_t::clear_module_metadata() {
  if (has_module_metadata()) {
    metadata_content_.module_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_metadata_content();
  }
}
const ::std::string& metadata_t::module_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.module_metadata)
  if (has_module_metadata()) {
    return metadata_content_.module_metadata_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void metadata_t::set_module_metadata(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
}
#if LANG_CXX11
void metadata_t::set_module_metadata(::std::string&& value) {
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.metadata_t.module_metadata)
}
#endif
void metadata_t::set_module_metadata(const char* value) {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.metadata_t.module_metadata)
}
void metadata_t::set_module_metadata(const char* value, size_t size) {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.metadata_t.module_metadata)
}
::std::string* metadata_t::mutable_module_metadata() {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.metadata_t.module_metadata)
  return metadata_content_.module_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* metadata_t::release_module_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.metadata_t.module_metadata)
  if (has_module_metadata()) {
    clear_has_metadata_content();
    return metadata_content_.module_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void metadata_t::set_allocated_module_metadata(::std::string* module_metadata) {
  if (!has_module_metadata()) {
    metadata_content_.module_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_metadata_content();
  if (module_metadata != NULL) {
    set_has_module_metadata();
    metadata_content_.module_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        module_metadata);
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.metadata_t.module_metadata)
}

// optional .trace_format.metadata_t.exception_t exception_metadata = 3;
bool metadata_t::has_exception_metadata() const {
  return metadata_content_case() == kExceptionMetadata;
}
void metadata_t::set_has_exception_metadata() {
  _oneof_case_[0] = kExceptionMetadata;
}
void metadata_t::clear_exception_metadata() {
  if (has_exception_metadata()) {
    delete metadata_content_.exception_metadata_;
    clear_has_metadata_content();
  }
}
 const ::trace_format::metadata_t_exception_t& metadata_t::exception_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_metadata)
  return has_exception_metadata()
      ? *metadata_content_.exception_metadata_
      : ::trace_format::metadata_t_exception_t::default_instance();
}
::trace_format::metadata_t_exception_t* metadata_t::mutable_exception_metadata() {
  if (!has_exception_metadata()) {
    clear_metadata_content();
    set_has_exception_metadata();
    metadata_content_.exception_metadata_ = new ::trace_format::metadata_t_exception_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.metadata_t.exception_metadata)
  return metadata_content_.exception_metadata_;
}
::trace_format::metadata_t_exception_t* metadata_t::release_exception_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.metadata_t.exception_metadata)
  if (has_exception_metadata()) {
    clear_has_metadata_content();
    ::trace_format::metadata_t_exception_t* temp = metadata_content_.exception_metadata_;
    metadata_content_.exception_metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void metadata_t::set_allocated_exception_metadata(::trace_format::metadata_t_exception_t* exception_metadata) {
  clear_metadata_content();
  if (exception_metadata) {
    set_has_exception_metadata();
    metadata_content_.exception_metadata_ = exception_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.metadata_t.exception_metadata)
}

// optional uint32 wave_metadata = 4;
bool metadata_t::has_wave_metadata() const {
  return metadata_content_case() == kWaveMetadata;
}
void metadata_t::set_has_wave_metadata() {
  _oneof_case_[0] = kWaveMetadata;
}
void metadata_t::clear_wave_metadata() {
  if (has_wave_metadata()) {
    metadata_content_.wave_metadata_ = 0u;
    clear_has_metadata_content();
  }
}
::google::protobuf::uint32 metadata_t::wave_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.wave_metadata)
  if (has_wave_metadata()) {
    return metadata_content_.wave_metadata_;
  }
  return 0u;
}
void metadata_t::set_wave_metadata(::google::protobuf::uint32 value) {
  if (!has_wave_metadata()) {
    clear_metadata_content();
    set_has_wave_metadata();
  }
  metadata_content_.wave_metadata_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.wave_metadata)
}

bool metadata_t::has_metadata_content() const {
  return metadata_content_case() != METADATA_CONTENT_NOT_SET;
}
void metadata_t::clear_has_metadata_content() {
  _oneof_case_[0] = METADATA_CONTENT_NOT_SET;
}
metadata_t::MetadataContentCase metadata_t::metadata_content_case() const {
  return metadata_t::MetadataContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ins_con_info_t::kTypeidFieldNumber;
const int ins_con_info_t::kReadRegisterFieldNumber;
const int ins_con_info_t::kWriteRegisterFieldNumber;
const int ins_con_info_t::kLoadMemoryFieldNumber;
const int ins_con_info_t::kStoreMemoryFieldNumber;
const int ins_con_info_t::kCallFieldNumber;
const int ins_con_info_t::kSystemCallFieldNumber;
const int ins_con_info_t::kNextAddressFieldNumber;
const int ins_con_info_t::kReservedCommentFieldNumber;
const int ins_con_info_t::kWaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ins_con_info_t::ins_con_info_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.ins_con_info_t)
}
ins_con_info_t::ins_con_info_t(const ins_con_info_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeid__ = from.typeid__;
  clear_has_conc_info_content();
  switch (from.conc_info_content_case()) {
    case kReadRegister: {
      mutable_read_register()->::common::register_t::MergeFrom(from.read_register());
      break;
    }
    case kWriteRegister: {
      mutable_write_register()->::common::register_t::MergeFrom(from.write_register());
      break;
    }
    case kLoadMemory: {
      mutable_load_memory()->::common::memory_t::MergeFrom(from.load_memory());
      break;
    }
    case kStoreMemory: {
      mutable_store_memory()->::common::memory_t::MergeFrom(from.store_memory());
      break;
    }
    case kCall: {
      mutable_call()->::libcall_types::libcall_t::MergeFrom(from.call());
      break;
    }
    case kSystemCall: {
      mutable_system_call()->::syscall_types::syscall_t::MergeFrom(from.system_call());
      break;
    }
    case kNextAddress: {
      set_next_address(from.next_address());
      break;
    }
    case kReservedComment: {
      set_reserved_comment(from.reserved_comment());
      break;
    }
    case kWave: {
      set_wave(from.wave());
      break;
    }
    case CONC_INFO_CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trace_format.ins_con_info_t)
}

void ins_con_info_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  clear_has_conc_info_content();
}

ins_con_info_t::~ins_con_info_t() {
  // @@protoc_insertion_point(destructor:trace_format.ins_con_info_t)
  SharedDtor();
}

void ins_con_info_t::SharedDtor() {
  if (has_conc_info_content()) {
    clear_conc_info_content();
  }
}

void ins_con_info_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ins_con_info_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[3].descriptor;
}

const ins_con_info_t& ins_con_info_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

ins_con_info_t* ins_con_info_t::New(::google::protobuf::Arena* arena) const {
  ins_con_info_t* n = new ins_con_info_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ins_con_info_t::clear_conc_info_content() {
// @@protoc_insertion_point(one_of_clear_start:trace_format.ins_con_info_t)
  switch (conc_info_content_case()) {
    case kReadRegister: {
      delete conc_info_content_.read_register_;
      break;
    }
    case kWriteRegister: {
      delete conc_info_content_.write_register_;
      break;
    }
    case kLoadMemory: {
      delete conc_info_content_.load_memory_;
      break;
    }
    case kStoreMemory: {
      delete conc_info_content_.store_memory_;
      break;
    }
    case kCall: {
      delete conc_info_content_.call_;
      break;
    }
    case kSystemCall: {
      delete conc_info_content_.system_call_;
      break;
    }
    case kNextAddress: {
      // No need to clear
      break;
    }
    case kReservedComment: {
      conc_info_content_.reserved_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kWave: {
      // No need to clear
      break;
    }
    case CONC_INFO_CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONC_INFO_CONTENT_NOT_SET;
}


void ins_con_info_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.ins_con_info_t)
  typeid__ = 0;
  clear_conc_info_content();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ins_con_info_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.ins_con_info_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::ins_con_info_t_typeid_con_info_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::ins_con_info_t_typeid_con_info_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.register_t read_register = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_register()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.register_t write_register = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_register()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.memory_t load_memory = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.memory_t store_memory = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.libcall_t call = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.syscall_t system_call = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_call()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_address = 9;
      case 9: {
        if (tag == 72u) {
          clear_conc_info_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conc_info_content_.next_address_)));
          set_has_next_address();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reserved_comment = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserved_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserved_comment().data(), this->reserved_comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trace_format.ins_con_info_t.reserved_comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wave = 11;
      case 11: {
        if (tag == 88u) {
          clear_conc_info_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conc_info_content_.wave_)));
          set_has_wave();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.ins_con_info_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.ins_con_info_t)
  return false;
#undef DO_
}

void ins_con_info_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.ins_con_info_t)
  // required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  switch (conc_info_content_case()) {
    case kReadRegister:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *conc_info_content_.read_register_, output);
      break;
    case kWriteRegister:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *conc_info_content_.write_register_, output);
      break;
    case kLoadMemory:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *conc_info_content_.load_memory_, output);
      break;
    case kStoreMemory:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *conc_info_content_.store_memory_, output);
      break;
    case kCall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *conc_info_content_.call_, output);
      break;
    case kSystemCall:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *conc_info_content_.system_call_, output);
      break;
    case kNextAddress:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->next_address(), output);
      break;
    case kReservedComment:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->reserved_comment().data(), this->reserved_comment().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "trace_format.ins_con_info_t.reserved_comment");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        10, this->reserved_comment(), output);
      break;
    case kWave:
      ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wave(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.ins_con_info_t)
}

::google::protobuf::uint8* ins_con_info_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.ins_con_info_t)
  // required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  switch (conc_info_content_case()) {
    case kReadRegister:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *conc_info_content_.read_register_, false, target);
      break;
    case kWriteRegister:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *conc_info_content_.write_register_, false, target);
      break;
    case kLoadMemory:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *conc_info_content_.load_memory_, false, target);
      break;
    case kStoreMemory:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *conc_info_content_.store_memory_, false, target);
      break;
    case kCall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *conc_info_content_.call_, false, target);
      break;
    case kSystemCall:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *conc_info_content_.system_call_, false, target);
      break;
    case kNextAddress:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->next_address(), target);
      break;
    case kReservedComment:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->reserved_comment().data(), this->reserved_comment().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "trace_format.ins_con_info_t.reserved_comment");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          10, this->reserved_comment(), target);
      break;
    case kWave:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wave(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.ins_con_info_t)
  return target;
}

size_t ins_con_info_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.ins_con_info_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
  if (has_typeid_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
  }
  switch (conc_info_content_case()) {
    // optional .common.register_t read_register = 2;
    case kReadRegister: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *conc_info_content_.read_register_);
      break;
    }
    // optional .common.register_t write_register = 3;
    case kWriteRegister: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *conc_info_content_.write_register_);
      break;
    }
    // optional .common.memory_t load_memory = 4;
    case kLoadMemory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *conc_info_content_.load_memory_);
      break;
    }
    // optional .common.memory_t store_memory = 5;
    case kStoreMemory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *conc_info_content_.store_memory_);
      break;
    }
    // optional .libcall_types.libcall_t call = 6;
    case kCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *conc_info_content_.call_);
      break;
    }
    // optional .syscall_types.syscall_t system_call = 8;
    case kSystemCall: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *conc_info_content_.system_call_);
      break;
    }
    // optional uint64 next_address = 9;
    case kNextAddress: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_address());
      break;
    }
    // optional string reserved_comment = 10;
    case kReservedComment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserved_comment());
      break;
    }
    // optional uint32 wave = 11;
    case kWave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
      break;
    }
    case CONC_INFO_CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ins_con_info_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.ins_con_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ins_con_info_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ins_con_info_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.ins_con_info_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.ins_con_info_t)
    MergeFrom(*source);
  }
}

void ins_con_info_t::MergeFrom(const ins_con_info_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.ins_con_info_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_typeid_()) {
    set_typeid_(from.typeid_());
  }
  switch (from.conc_info_content_case()) {
    case kReadRegister: {
      mutable_read_register()->::common::register_t::MergeFrom(from.read_register());
      break;
    }
    case kWriteRegister: {
      mutable_write_register()->::common::register_t::MergeFrom(from.write_register());
      break;
    }
    case kLoadMemory: {
      mutable_load_memory()->::common::memory_t::MergeFrom(from.load_memory());
      break;
    }
    case kStoreMemory: {
      mutable_store_memory()->::common::memory_t::MergeFrom(from.store_memory());
      break;
    }
    case kCall: {
      mutable_call()->::libcall_types::libcall_t::MergeFrom(from.call());
      break;
    }
    case kSystemCall: {
      mutable_system_call()->::syscall_types::syscall_t::MergeFrom(from.system_call());
      break;
    }
    case kNextAddress: {
      set_next_address(from.next_address());
      break;
    }
    case kReservedComment: {
      set_reserved_comment(from.reserved_comment());
      break;
    }
    case kWave: {
      set_wave(from.wave());
      break;
    }
    case CONC_INFO_CONTENT_NOT_SET: {
      break;
    }
  }
}

void ins_con_info_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.ins_con_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ins_con_info_t::CopyFrom(const ins_con_info_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.ins_con_info_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ins_con_info_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (conc_info_content_case()) {
    case kReadRegister: {
      if (has_read_register()) {
        if (!this->read_register().IsInitialized()) return false;
      }
      break;
    }
    case kWriteRegister: {
      if (has_write_register()) {
        if (!this->write_register().IsInitialized()) return false;
      }
      break;
    }
    case kLoadMemory: {
      if (has_load_memory()) {
        if (!this->load_memory().IsInitialized()) return false;
      }
      break;
    }
    case kStoreMemory: {
      if (has_store_memory()) {
        if (!this->store_memory().IsInitialized()) return false;
      }
      break;
    }
    case kCall: {
      if (has_call()) {
        if (!this->call().IsInitialized()) return false;
      }
      break;
    }
    case kSystemCall: {
      if (has_system_call()) {
        if (!this->system_call().IsInitialized()) return false;
      }
      break;
    }
    case kNextAddress: {
      break;
    }
    case kReservedComment: {
      break;
    }
    case kWave: {
      break;
    }
    case CONC_INFO_CONTENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void ins_con_info_t::Swap(ins_con_info_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ins_con_info_t::InternalSwap(ins_con_info_t* other) {
  std::swap(typeid__, other->typeid__);
  std::swap(conc_info_content_, other->conc_info_content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ins_con_info_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ins_con_info_t

// required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
bool ins_con_info_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ins_con_info_t::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
void ins_con_info_t::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
void ins_con_info_t::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
::trace_format::ins_con_info_t_typeid_con_info_t ins_con_info_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.typeid)
  return static_cast< ::trace_format::ins_con_info_t_typeid_con_info_t >(typeid__);
}
void ins_con_info_t::set_typeid_(::trace_format::ins_con_info_t_typeid_con_info_t value) {
  assert(::trace_format::ins_con_info_t_typeid_con_info_t_IsValid(value));
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.typeid)
}

// optional .common.register_t read_register = 2;
bool ins_con_info_t::has_read_register() const {
  return conc_info_content_case() == kReadRegister;
}
void ins_con_info_t::set_has_read_register() {
  _oneof_case_[0] = kReadRegister;
}
void ins_con_info_t::clear_read_register() {
  if (has_read_register()) {
    delete conc_info_content_.read_register_;
    clear_has_conc_info_content();
  }
}
 const ::common::register_t& ins_con_info_t::read_register() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.read_register)
  return has_read_register()
      ? *conc_info_content_.read_register_
      : ::common::register_t::default_instance();
}
::common::register_t* ins_con_info_t::mutable_read_register() {
  if (!has_read_register()) {
    clear_conc_info_content();
    set_has_read_register();
    conc_info_content_.read_register_ = new ::common::register_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.read_register)
  return conc_info_content_.read_register_;
}
::common::register_t* ins_con_info_t::release_read_register() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.read_register)
  if (has_read_register()) {
    clear_has_conc_info_content();
    ::common::register_t* temp = conc_info_content_.read_register_;
    conc_info_content_.read_register_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_read_register(::common::register_t* read_register) {
  clear_conc_info_content();
  if (read_register) {
    set_has_read_register();
    conc_info_content_.read_register_ = read_register;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.read_register)
}

// optional .common.register_t write_register = 3;
bool ins_con_info_t::has_write_register() const {
  return conc_info_content_case() == kWriteRegister;
}
void ins_con_info_t::set_has_write_register() {
  _oneof_case_[0] = kWriteRegister;
}
void ins_con_info_t::clear_write_register() {
  if (has_write_register()) {
    delete conc_info_content_.write_register_;
    clear_has_conc_info_content();
  }
}
 const ::common::register_t& ins_con_info_t::write_register() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.write_register)
  return has_write_register()
      ? *conc_info_content_.write_register_
      : ::common::register_t::default_instance();
}
::common::register_t* ins_con_info_t::mutable_write_register() {
  if (!has_write_register()) {
    clear_conc_info_content();
    set_has_write_register();
    conc_info_content_.write_register_ = new ::common::register_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.write_register)
  return conc_info_content_.write_register_;
}
::common::register_t* ins_con_info_t::release_write_register() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.write_register)
  if (has_write_register()) {
    clear_has_conc_info_content();
    ::common::register_t* temp = conc_info_content_.write_register_;
    conc_info_content_.write_register_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_write_register(::common::register_t* write_register) {
  clear_conc_info_content();
  if (write_register) {
    set_has_write_register();
    conc_info_content_.write_register_ = write_register;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.write_register)
}

// optional .common.memory_t load_memory = 4;
bool ins_con_info_t::has_load_memory() const {
  return conc_info_content_case() == kLoadMemory;
}
void ins_con_info_t::set_has_load_memory() {
  _oneof_case_[0] = kLoadMemory;
}
void ins_con_info_t::clear_load_memory() {
  if (has_load_memory()) {
    delete conc_info_content_.load_memory_;
    clear_has_conc_info_content();
  }
}
 const ::common::memory_t& ins_con_info_t::load_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.load_memory)
  return has_load_memory()
      ? *conc_info_content_.load_memory_
      : ::common::memory_t::default_instance();
}
::common::memory_t* ins_con_info_t::mutable_load_memory() {
  if (!has_load_memory()) {
    clear_conc_info_content();
    set_has_load_memory();
    conc_info_content_.load_memory_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.load_memory)
  return conc_info_content_.load_memory_;
}
::common::memory_t* ins_con_info_t::release_load_memory() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.load_memory)
  if (has_load_memory()) {
    clear_has_conc_info_content();
    ::common::memory_t* temp = conc_info_content_.load_memory_;
    conc_info_content_.load_memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_load_memory(::common::memory_t* load_memory) {
  clear_conc_info_content();
  if (load_memory) {
    set_has_load_memory();
    conc_info_content_.load_memory_ = load_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.load_memory)
}

// optional .common.memory_t store_memory = 5;
bool ins_con_info_t::has_store_memory() const {
  return conc_info_content_case() == kStoreMemory;
}
void ins_con_info_t::set_has_store_memory() {
  _oneof_case_[0] = kStoreMemory;
}
void ins_con_info_t::clear_store_memory() {
  if (has_store_memory()) {
    delete conc_info_content_.store_memory_;
    clear_has_conc_info_content();
  }
}
 const ::common::memory_t& ins_con_info_t::store_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.store_memory)
  return has_store_memory()
      ? *conc_info_content_.store_memory_
      : ::common::memory_t::default_instance();
}
::common::memory_t* ins_con_info_t::mutable_store_memory() {
  if (!has_store_memory()) {
    clear_conc_info_content();
    set_has_store_memory();
    conc_info_content_.store_memory_ = new ::common::memory_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.store_memory)
  return conc_info_content_.store_memory_;
}
::common::memory_t* ins_con_info_t::release_store_memory() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.store_memory)
  if (has_store_memory()) {
    clear_has_conc_info_content();
    ::common::memory_t* temp = conc_info_content_.store_memory_;
    conc_info_content_.store_memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_store_memory(::common::memory_t* store_memory) {
  clear_conc_info_content();
  if (store_memory) {
    set_has_store_memory();
    conc_info_content_.store_memory_ = store_memory;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.store_memory)
}

// optional .libcall_types.libcall_t call = 6;
bool ins_con_info_t::has_call() const {
  return conc_info_content_case() == kCall;
}
void ins_con_info_t::set_has_call() {
  _oneof_case_[0] = kCall;
}
void ins_con_info_t::clear_call() {
  if (has_call()) {
    delete conc_info_content_.call_;
    clear_has_conc_info_content();
  }
}
 const ::libcall_types::libcall_t& ins_con_info_t::call() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.call)
  return has_call()
      ? *conc_info_content_.call_
      : ::libcall_types::libcall_t::default_instance();
}
::libcall_types::libcall_t* ins_con_info_t::mutable_call() {
  if (!has_call()) {
    clear_conc_info_content();
    set_has_call();
    conc_info_content_.call_ = new ::libcall_types::libcall_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.call)
  return conc_info_content_.call_;
}
::libcall_types::libcall_t* ins_con_info_t::release_call() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.call)
  if (has_call()) {
    clear_has_conc_info_content();
    ::libcall_types::libcall_t* temp = conc_info_content_.call_;
    conc_info_content_.call_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_call(::libcall_types::libcall_t* call) {
  clear_conc_info_content();
  if (call) {
    set_has_call();
    conc_info_content_.call_ = call;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.call)
}

// optional .syscall_types.syscall_t system_call = 8;
bool ins_con_info_t::has_system_call() const {
  return conc_info_content_case() == kSystemCall;
}
void ins_con_info_t::set_has_system_call() {
  _oneof_case_[0] = kSystemCall;
}
void ins_con_info_t::clear_system_call() {
  if (has_system_call()) {
    delete conc_info_content_.system_call_;
    clear_has_conc_info_content();
  }
}
 const ::syscall_types::syscall_t& ins_con_info_t::system_call() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.system_call)
  return has_system_call()
      ? *conc_info_content_.system_call_
      : ::syscall_types::syscall_t::default_instance();
}
::syscall_types::syscall_t* ins_con_info_t::mutable_system_call() {
  if (!has_system_call()) {
    clear_conc_info_content();
    set_has_system_call();
    conc_info_content_.system_call_ = new ::syscall_types::syscall_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.system_call)
  return conc_info_content_.system_call_;
}
::syscall_types::syscall_t* ins_con_info_t::release_system_call() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.system_call)
  if (has_system_call()) {
    clear_has_conc_info_content();
    ::syscall_types::syscall_t* temp = conc_info_content_.system_call_;
    conc_info_content_.system_call_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_system_call(::syscall_types::syscall_t* system_call) {
  clear_conc_info_content();
  if (system_call) {
    set_has_system_call();
    conc_info_content_.system_call_ = system_call;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.system_call)
}

// optional uint64 next_address = 9;
bool ins_con_info_t::has_next_address() const {
  return conc_info_content_case() == kNextAddress;
}
void ins_con_info_t::set_has_next_address() {
  _oneof_case_[0] = kNextAddress;
}
void ins_con_info_t::clear_next_address() {
  if (has_next_address()) {
    conc_info_content_.next_address_ = GOOGLE_ULONGLONG(0);
    clear_has_conc_info_content();
  }
}
::google::protobuf::uint64 ins_con_info_t::next_address() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.next_address)
  if (has_next_address()) {
    return conc_info_content_.next_address_;
  }
  return GOOGLE_ULONGLONG(0);
}
void ins_con_info_t::set_next_address(::google::protobuf::uint64 value) {
  if (!has_next_address()) {
    clear_conc_info_content();
    set_has_next_address();
  }
  conc_info_content_.next_address_ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.next_address)
}

// optional string reserved_comment = 10;
bool ins_con_info_t::has_reserved_comment() const {
  return conc_info_content_case() == kReservedComment;
}
void ins_con_info_t::set_has_reserved_comment() {
  _oneof_case_[0] = kReservedComment;
}
void ins_con_info_t::clear_reserved_comment() {
  if (has_reserved_comment()) {
    conc_info_content_.reserved_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_conc_info_content();
  }
}
const ::std::string& ins_con_info_t::reserved_comment() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.reserved_comment)
  if (has_reserved_comment()) {
    return conc_info_content_.reserved_comment_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void ins_con_info_t::set_reserved_comment(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
}
#if LANG_CXX11
void ins_con_info_t::set_reserved_comment(::std::string&& value) {
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.ins_con_info_t.reserved_comment)
}
#endif
void ins_con_info_t::set_reserved_comment(const char* value) {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.ins_con_info_t.reserved_comment)
}
void ins_con_info_t::set_reserved_comment(const char* value, size_t size) {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.ins_con_info_t.reserved_comment)
}
::std::string* ins_con_info_t::mutable_reserved_comment() {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.reserved_comment)
  return conc_info_content_.reserved_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ins_con_info_t::release_reserved_comment() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.reserved_comment)
  if (has_reserved_comment()) {
    clear_has_conc_info_content();
    return conc_info_content_.reserved_comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void ins_con_info_t::set_allocated_reserved_comment(::std::string* reserved_comment) {
  if (!has_reserved_comment()) {
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_conc_info_content();
  if (reserved_comment != NULL) {
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        reserved_comment);
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.reserved_comment)
}

// optional uint32 wave = 11;
bool ins_con_info_t::has_wave() const {
  return conc_info_content_case() == kWave;
}
void ins_con_info_t::set_has_wave() {
  _oneof_case_[0] = kWave;
}
void ins_con_info_t::clear_wave() {
  if (has_wave()) {
    conc_info_content_.wave_ = 0u;
    clear_has_conc_info_content();
  }
}
::google::protobuf::uint32 ins_con_info_t::wave() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.wave)
  if (has_wave()) {
    return conc_info_content_.wave_;
  }
  return 0u;
}
void ins_con_info_t::set_wave(::google::protobuf::uint32 value) {
  if (!has_wave()) {
    clear_conc_info_content();
    set_has_wave();
  }
  conc_info_content_.wave_ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.wave)
}

bool ins_con_info_t::has_conc_info_content() const {
  return conc_info_content_case() != CONC_INFO_CONTENT_NOT_SET;
}
void ins_con_info_t::clear_has_conc_info_content() {
  _oneof_case_[0] = CONC_INFO_CONTENT_NOT_SET;
}
ins_con_info_t::ConcInfoContentCase ins_con_info_t::conc_info_content_case() const {
  return ins_con_info_t::ConcInfoContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int instruction_t::kThreadIdFieldNumber;
const int instruction_t::kAddressFieldNumber;
const int instruction_t::kOpcodeFieldNumber;
const int instruction_t::kConcreteInfosFieldNumber;
const int instruction_t::kDbaInstrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

instruction_t::instruction_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.instruction_t)
}
instruction_t::instruction_t(const instruction_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      concrete_infos_(from.concrete_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opcode()) {
    opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
  }
  if (from.has_dba_instrs()) {
    dba_instrs_ = new ::dba::dba_list(*from.dba_instrs_);
  } else {
    dba_instrs_ = NULL;
  }
  ::memcpy(&address_, &from.address_,
    reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&address_) + sizeof(thread_id_));
  // @@protoc_insertion_point(copy_constructor:trace_format.instruction_t)
}

void instruction_t::SharedCtor() {
  _cached_size_ = 0;
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dba_instrs_, 0, reinterpret_cast<char*>(&thread_id_) -
    reinterpret_cast<char*>(&dba_instrs_) + sizeof(thread_id_));
}

instruction_t::~instruction_t() {
  // @@protoc_insertion_point(destructor:trace_format.instruction_t)
  SharedDtor();
}

void instruction_t::SharedDtor() {
  opcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete dba_instrs_;
  }
}

void instruction_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instruction_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[4].descriptor;
}

const instruction_t& instruction_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

instruction_t* instruction_t::New(::google::protobuf::Arena* arena) const {
  instruction_t* n = new instruction_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void instruction_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.instruction_t)
  concrete_infos_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_opcode()) {
      GOOGLE_DCHECK(!opcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*opcode_.UnsafeRawStringPointer())->clear();
    }
    if (has_dba_instrs()) {
      GOOGLE_DCHECK(dba_instrs_ != NULL);
      dba_instrs_->::dba::dba_list::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&address_, 0, reinterpret_cast<char*>(&thread_id_) -
      reinterpret_cast<char*>(&address_) + sizeof(thread_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool instruction_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.instruction_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 thread_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_thread_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 address = 2;
      case 2: {
        if (tag == 16u) {
          set_has_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes opcode = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opcode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .trace_format.ins_con_info_t concrete_infos = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_concrete_infos()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional .dba.dba_list dba_instrs = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dba_instrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.instruction_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.instruction_t)
  return false;
#undef DO_
}

void instruction_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.instruction_t)
  // required uint32 thread_id = 1;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->thread_id(), output);
  }

  // required uint64 address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->address(), output);
  }

  // required bytes opcode = 3;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->opcode(), output);
  }

  // repeated .trace_format.ins_con_info_t concrete_infos = 4;
  for (unsigned int i = 0, n = this->concrete_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->concrete_infos(i), output);
  }

  // optional .dba.dba_list dba_instrs = 5;
  if (has_dba_instrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->dba_instrs_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.instruction_t)
}

::google::protobuf::uint8* instruction_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.instruction_t)
  // required uint32 thread_id = 1;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->thread_id(), target);
  }

  // required uint64 address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->address(), target);
  }

  // required bytes opcode = 3;
  if (has_opcode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->opcode(), target);
  }

  // repeated .trace_format.ins_con_info_t concrete_infos = 4;
  for (unsigned int i = 0, n = this->concrete_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->concrete_infos(i), false, target);
  }

  // optional .dba.dba_list dba_instrs = 5;
  if (has_dba_instrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->dba_instrs_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.instruction_t)
  return target;
}

size_t instruction_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:trace_format.instruction_t)
  size_t total_size = 0;

  if (has_opcode()) {
    // required bytes opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->opcode());
  }

  if (has_address()) {
    // required uint64 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  if (has_thread_id()) {
    // required uint32 thread_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_id());
  }

  return total_size;
}
size_t instruction_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.instruction_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required bytes opcode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->opcode());

    // required uint64 address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->address());

    // required uint32 thread_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .trace_format.ins_con_info_t concrete_infos = 4;
  {
    unsigned int count = this->concrete_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->concrete_infos(i));
    }
  }

  // optional .dba.dba_list dba_instrs = 5;
  if (has_dba_instrs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dba_instrs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instruction_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.instruction_t)
  GOOGLE_DCHECK_NE(&from, this);
  const instruction_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const instruction_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.instruction_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.instruction_t)
    MergeFrom(*source);
  }
}

void instruction_t::MergeFrom(const instruction_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.instruction_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concrete_infos_.MergeFrom(from.concrete_infos_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_opcode()) {
      set_has_opcode();
      opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
    }
    if (from.has_dba_instrs()) {
      mutable_dba_instrs()->::dba::dba_list::MergeFrom(from.dba_instrs());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
  }
}

void instruction_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.instruction_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instruction_t::CopyFrom(const instruction_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.instruction_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instruction_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->concrete_infos())) return false;
  if (has_dba_instrs()) {
    if (!this->dba_instrs_->IsInitialized()) return false;
  }
  return true;
}

void instruction_t::Swap(instruction_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void instruction_t::InternalSwap(instruction_t* other) {
  concrete_infos_.UnsafeArenaSwap(&other->concrete_infos_);
  opcode_.Swap(&other->opcode_);
  std::swap(dba_instrs_, other->dba_instrs_);
  std::swap(address_, other->address_);
  std::swap(thread_id_, other->thread_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata instruction_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// instruction_t

// required uint32 thread_id = 1;
bool instruction_t::has_thread_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void instruction_t::set_has_thread_id() {
  _has_bits_[0] |= 0x00000008u;
}
void instruction_t::clear_has_thread_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void instruction_t::clear_thread_id() {
  thread_id_ = 0u;
  clear_has_thread_id();
}
::google::protobuf::uint32 instruction_t::thread_id() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.thread_id)
  return thread_id_;
}
void instruction_t::set_thread_id(::google::protobuf::uint32 value) {
  set_has_thread_id();
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.thread_id)
}

// required uint64 address = 2;
bool instruction_t::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void instruction_t::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
void instruction_t::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void instruction_t::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
  clear_has_address();
}
::google::protobuf::uint64 instruction_t::address() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.address)
  return address_;
}
void instruction_t::set_address(::google::protobuf::uint64 value) {
  set_has_address();
  address_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.address)
}

// required bytes opcode = 3;
bool instruction_t::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void instruction_t::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void instruction_t::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void instruction_t::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opcode();
}
const ::std::string& instruction_t::opcode() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.opcode)
  return opcode_.GetNoArena();
}
void instruction_t::set_opcode(const ::std::string& value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.opcode)
}
#if LANG_CXX11
void instruction_t::set_opcode(::std::string&& value) {
  set_has_opcode();
  opcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.instruction_t.opcode)
}
#endif
void instruction_t::set_opcode(const char* value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.instruction_t.opcode)
}
void instruction_t::set_opcode(const void* value, size_t size) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.instruction_t.opcode)
}
::std::string* instruction_t::mutable_opcode() {
  set_has_opcode();
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.opcode)
  return opcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instruction_t::release_opcode() {
  // @@protoc_insertion_point(field_release:trace_format.instruction_t.opcode)
  clear_has_opcode();
  return opcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instruction_t::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    set_has_opcode();
  } else {
    clear_has_opcode();
  }
  opcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.opcode)
}

// repeated .trace_format.ins_con_info_t concrete_infos = 4;
int instruction_t::concrete_infos_size() const {
  return concrete_infos_.size();
}
void instruction_t::clear_concrete_infos() {
  concrete_infos_.Clear();
}
const ::trace_format::ins_con_info_t& instruction_t::concrete_infos(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Get(index);
}
::trace_format::ins_con_info_t* instruction_t::mutable_concrete_infos(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Mutable(index);
}
::trace_format::ins_con_info_t* instruction_t::add_concrete_infos() {
  // @@protoc_insertion_point(field_add:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t >*
instruction_t::mutable_concrete_infos() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.instruction_t.concrete_infos)
  return &concrete_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::trace_format::ins_con_info_t >&
instruction_t::concrete_infos() const {
  // @@protoc_insertion_point(field_list:trace_format.instruction_t.concrete_infos)
  return concrete_infos_;
}

// optional .dba.dba_list dba_instrs = 5;
bool instruction_t::has_dba_instrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void instruction_t::set_has_dba_instrs() {
  _has_bits_[0] |= 0x00000002u;
}
void instruction_t::clear_has_dba_instrs() {
  _has_bits_[0] &= ~0x00000002u;
}
void instruction_t::clear_dba_instrs() {
  if (dba_instrs_ != NULL) dba_instrs_->::dba::dba_list::Clear();
  clear_has_dba_instrs();
}
const ::dba::dba_list& instruction_t::dba_instrs() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.dba_instrs)
  return dba_instrs_ != NULL ? *dba_instrs_
                         : *::dba::dba_list::internal_default_instance();
}
::dba::dba_list* instruction_t::mutable_dba_instrs() {
  set_has_dba_instrs();
  if (dba_instrs_ == NULL) {
    dba_instrs_ = new ::dba::dba_list;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.dba_instrs)
  return dba_instrs_;
}
::dba::dba_list* instruction_t::release_dba_instrs() {
  // @@protoc_insertion_point(field_release:trace_format.instruction_t.dba_instrs)
  clear_has_dba_instrs();
  ::dba::dba_list* temp = dba_instrs_;
  dba_instrs_ = NULL;
  return temp;
}
void instruction_t::set_allocated_dba_instrs(::dba::dba_list* dba_instrs) {
  delete dba_instrs_;
  dba_instrs_ = dba_instrs;
  if (dba_instrs) {
    set_has_dba_instrs();
  } else {
    clear_has_dba_instrs();
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.dba_instrs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int body_t::kTypeidFieldNumber;
const int body_t::kMetadataFieldNumber;
const int body_t::kInstructionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

body_t::body_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.body_t)
}
body_t::body_t(const body_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeid__ = from.typeid__;
  clear_has_body_content();
  switch (from.body_content_case()) {
    case kMetadata: {
      mutable_metadata()->::trace_format::metadata_t::MergeFrom(from.metadata());
      break;
    }
    case kInstruction: {
      mutable_instruction()->::trace_format::instruction_t::MergeFrom(from.instruction());
      break;
    }
    case BODY_CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trace_format.body_t)
}

void body_t::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  clear_has_body_content();
}

body_t::~body_t() {
  // @@protoc_insertion_point(destructor:trace_format.body_t)
  SharedDtor();
}

void body_t::SharedDtor() {
  if (has_body_content()) {
    clear_body_content();
  }
}

void body_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* body_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[5].descriptor;
}

const body_t& body_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

body_t* body_t::New(::google::protobuf::Arena* arena) const {
  body_t* n = new body_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void body_t::clear_body_content() {
// @@protoc_insertion_point(one_of_clear_start:trace_format.body_t)
  switch (body_content_case()) {
    case kMetadata: {
      delete body_content_.metadata_;
      break;
    }
    case kInstruction: {
      delete body_content_.instruction_;
      break;
    }
    case BODY_CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_CONTENT_NOT_SET;
}


void body_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.body_t)
  typeid__ = 0;
  clear_body_content();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool body_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.body_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.body_t.typeid_body_t typeid = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trace_format::body_t_typeid_body_t_IsValid(value)) {
            set_typeid_(static_cast< ::trace_format::body_t_typeid_body_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trace_format.metadata_t metadata = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .trace_format.instruction_t instruction = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instruction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.body_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.body_t)
  return false;
#undef DO_
}

void body_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.body_t)
  // required .trace_format.body_t.typeid_body_t typeid = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  switch (body_content_case()) {
    case kMetadata:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *body_content_.metadata_, output);
      break;
    case kInstruction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *body_content_.instruction_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.body_t)
}

::google::protobuf::uint8* body_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.body_t)
  // required .trace_format.body_t.typeid_body_t typeid = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  switch (body_content_case()) {
    case kMetadata:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *body_content_.metadata_, false, target);
      break;
    case kInstruction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *body_content_.instruction_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.body_t)
  return target;
}

size_t body_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.body_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .trace_format.body_t.typeid_body_t typeid = 1;
  if (has_typeid_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typeid_());
  }
  switch (body_content_case()) {
    // optional .trace_format.metadata_t metadata = 2;
    case kMetadata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_content_.metadata_);
      break;
    }
    // optional .trace_format.instruction_t instruction = 3;
    case kInstruction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_content_.instruction_);
      break;
    }
    case BODY_CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void body_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.body_t)
  GOOGLE_DCHECK_NE(&from, this);
  const body_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const body_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.body_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.body_t)
    MergeFrom(*source);
  }
}

void body_t::MergeFrom(const body_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.body_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_typeid_()) {
    set_typeid_(from.typeid_());
  }
  switch (from.body_content_case()) {
    case kMetadata: {
      mutable_metadata()->::trace_format::metadata_t::MergeFrom(from.metadata());
      break;
    }
    case kInstruction: {
      mutable_instruction()->::trace_format::instruction_t::MergeFrom(from.instruction());
      break;
    }
    case BODY_CONTENT_NOT_SET: {
      break;
    }
  }
}

void body_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.body_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void body_t::CopyFrom(const body_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.body_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool body_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (body_content_case()) {
    case kMetadata: {
      if (has_metadata()) {
        if (!this->metadata().IsInitialized()) return false;
      }
      break;
    }
    case kInstruction: {
      if (has_instruction()) {
        if (!this->instruction().IsInitialized()) return false;
      }
      break;
    }
    case BODY_CONTENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void body_t::Swap(body_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void body_t::InternalSwap(body_t* other) {
  std::swap(typeid__, other->typeid__);
  std::swap(body_content_, other->body_content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata body_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// body_t

// required .trace_format.body_t.typeid_body_t typeid = 1;
bool body_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void body_t::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
void body_t::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
void body_t::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
::trace_format::body_t_typeid_body_t body_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.typeid)
  return static_cast< ::trace_format::body_t_typeid_body_t >(typeid__);
}
void body_t::set_typeid_(::trace_format::body_t_typeid_body_t value) {
  assert(::trace_format::body_t_typeid_body_t_IsValid(value));
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.body_t.typeid)
}

// optional .trace_format.metadata_t metadata = 2;
bool body_t::has_metadata() const {
  return body_content_case() == kMetadata;
}
void body_t::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
void body_t::clear_metadata() {
  if (has_metadata()) {
    delete body_content_.metadata_;
    clear_has_body_content();
  }
}
 const ::trace_format::metadata_t& body_t::metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.metadata)
  return has_metadata()
      ? *body_content_.metadata_
      : ::trace_format::metadata_t::default_instance();
}
::trace_format::metadata_t* body_t::mutable_metadata() {
  if (!has_metadata()) {
    clear_body_content();
    set_has_metadata();
    body_content_.metadata_ = new ::trace_format::metadata_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.body_t.metadata)
  return body_content_.metadata_;
}
::trace_format::metadata_t* body_t::release_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.body_t.metadata)
  if (has_metadata()) {
    clear_has_body_content();
    ::trace_format::metadata_t* temp = body_content_.metadata_;
    body_content_.metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void body_t::set_allocated_metadata(::trace_format::metadata_t* metadata) {
  clear_body_content();
  if (metadata) {
    set_has_metadata();
    body_content_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.body_t.metadata)
}

// optional .trace_format.instruction_t instruction = 3;
bool body_t::has_instruction() const {
  return body_content_case() == kInstruction;
}
void body_t::set_has_instruction() {
  _oneof_case_[0] = kInstruction;
}
void body_t::clear_instruction() {
  if (has_instruction()) {
    delete body_content_.instruction_;
    clear_has_body_content();
  }
}
 const ::trace_format::instruction_t& body_t::instruction() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.instruction)
  return has_instruction()
      ? *body_content_.instruction_
      : ::trace_format::instruction_t::default_instance();
}
::trace_format::instruction_t* body_t::mutable_instruction() {
  if (!has_instruction()) {
    clear_body_content();
    set_has_instruction();
    body_content_.instruction_ = new ::trace_format::instruction_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.body_t.instruction)
  return body_content_.instruction_;
}
::trace_format::instruction_t* body_t::release_instruction() {
  // @@protoc_insertion_point(field_release:trace_format.body_t.instruction)
  if (has_instruction()) {
    clear_has_body_content();
    ::trace_format::instruction_t* temp = body_content_.instruction_;
    body_content_.instruction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void body_t::set_allocated_instruction(::trace_format::instruction_t* instruction) {
  clear_body_content();
  if (instruction) {
    set_has_instruction();
    body_content_.instruction_ = instruction;
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.body_t.instruction)
}

bool body_t::has_body_content() const {
  return body_content_case() != BODY_CONTENT_NOT_SET;
}
void body_t::clear_has_body_content() {
  _oneof_case_[0] = BODY_CONTENT_NOT_SET;
}
body_t::BodyContentCase body_t::body_content_case() const {
  return body_t::BodyContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int chunk_t::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

chunk_t::chunk_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.chunk_t)
}
chunk_t::chunk_t(const chunk_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:trace_format.chunk_t)
}

void chunk_t::SharedCtor() {
  _cached_size_ = 0;
}

chunk_t::~chunk_t() {
  // @@protoc_insertion_point(destructor:trace_format.chunk_t)
  SharedDtor();
}

void chunk_t::SharedDtor() {
}

void chunk_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chunk_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[6].descriptor;
}

const chunk_t& chunk_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

chunk_t* chunk_t::New(::google::protobuf::Arena* arena) const {
  chunk_t* n = new chunk_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void chunk_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.chunk_t)
  body_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool chunk_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.chunk_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .trace_format.body_t body = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.chunk_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.chunk_t)
  return false;
#undef DO_
}

void chunk_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.chunk_t)
  // repeated .trace_format.body_t body = 1;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->body(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.chunk_t)
}

::google::protobuf::uint8* chunk_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.chunk_t)
  // repeated .trace_format.body_t body = 1;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->body(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.chunk_t)
  return target;
}

size_t chunk_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.chunk_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .trace_format.body_t body = 1;
  {
    unsigned int count = this->body_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chunk_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.chunk_t)
  GOOGLE_DCHECK_NE(&from, this);
  const chunk_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const chunk_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.chunk_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.chunk_t)
    MergeFrom(*source);
  }
}

void chunk_t::MergeFrom(const chunk_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.chunk_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.MergeFrom(from.body_);
}

void chunk_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.chunk_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chunk_t::CopyFrom(const chunk_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.chunk_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chunk_t::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->body())) return false;
  return true;
}

void chunk_t::Swap(chunk_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void chunk_t::InternalSwap(chunk_t* other) {
  body_.UnsafeArenaSwap(&other->body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata chunk_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// chunk_t

// repeated .trace_format.body_t body = 1;
int chunk_t::body_size() const {
  return body_.size();
}
void chunk_t::clear_body() {
  body_.Clear();
}
const ::trace_format::body_t& chunk_t::body(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.chunk_t.body)
  return body_.Get(index);
}
::trace_format::body_t* chunk_t::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.chunk_t.body)
  return body_.Mutable(index);
}
::trace_format::body_t* chunk_t::add_body() {
  // @@protoc_insertion_point(field_add:trace_format.chunk_t.body)
  return body_.Add();
}
::google::protobuf::RepeatedPtrField< ::trace_format::body_t >*
chunk_t::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.chunk_t.body)
  return &body_;
}
const ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >&
chunk_t::body() const {
  // @@protoc_insertion_point(field_list:trace_format.chunk_t.body)
  return body_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int trace_t::kHeaderFieldNumber;
const int trace_t::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

trace_t::trace_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_trace_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:trace_format.trace_t)
}
trace_t::trace_t(const trace_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::trace_format::header_t(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:trace_format.trace_t)
}

void trace_t::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

trace_t::~trace_t() {
  // @@protoc_insertion_point(destructor:trace_format.trace_t)
  SharedDtor();
}

void trace_t::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void trace_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trace_t::descriptor() {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[7].descriptor;
}

const trace_t& trace_t::default_instance() {
  protobuf_trace_2eproto::InitDefaults();
  return *internal_default_instance();
}

trace_t* trace_t::New(::google::protobuf::Arena* arena) const {
  trace_t* n = new trace_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void trace_t::Clear() {
// @@protoc_insertion_point(message_clear_start:trace_format.trace_t)
  body_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::trace_format::header_t::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool trace_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:trace_format.trace_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trace_format.header_t header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .trace_format.body_t body = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trace_format.trace_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trace_format.trace_t)
  return false;
#undef DO_
}

void trace_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trace_format.trace_t)
  // required .trace_format.header_t header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .trace_format.body_t body = 2;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trace_format.trace_t)
}

::google::protobuf::uint8* trace_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:trace_format.trace_t)
  // required .trace_format.header_t header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .trace_format.body_t body = 2;
  for (unsigned int i = 0, n = this->body_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->body(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trace_format.trace_t)
  return target;
}

size_t trace_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trace_format.trace_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .trace_format.header_t header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }
  // repeated .trace_format.body_t body = 2;
  {
    unsigned int count = this->body_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trace_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trace_format.trace_t)
  GOOGLE_DCHECK_NE(&from, this);
  const trace_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const trace_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trace_format.trace_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trace_format.trace_t)
    MergeFrom(*source);
  }
}

void trace_t::MergeFrom(const trace_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trace_format.trace_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.MergeFrom(from.body_);
  if (from.has_header()) {
    mutable_header()->::trace_format::header_t::MergeFrom(from.header());
  }
}

void trace_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trace_format.trace_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trace_t::CopyFrom(const trace_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trace_format.trace_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trace_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->body())) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void trace_t::Swap(trace_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void trace_t::InternalSwap(trace_t* other) {
  body_.UnsafeArenaSwap(&other->body_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata trace_t::GetMetadata() const {
  protobuf_trace_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_trace_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// trace_t

// required .trace_format.header_t header = 1;
bool trace_t::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void trace_t::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void trace_t::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void trace_t::clear_header() {
  if (header_ != NULL) header_->::trace_format::header_t::Clear();
  clear_has_header();
}
const ::trace_format::header_t& trace_t::header() const {
  // @@protoc_insertion_point(field_get:trace_format.trace_t.header)
  return header_ != NULL ? *header_
                         : *::trace_format::header_t::internal_default_instance();
}
::trace_format::header_t* trace_t::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::trace_format::header_t;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.trace_t.header)
  return header_;
}
::trace_format::header_t* trace_t::release_header() {
  // @@protoc_insertion_point(field_release:trace_format.trace_t.header)
  clear_has_header();
  ::trace_format::header_t* temp = header_;
  header_ = NULL;
  return temp;
}
void trace_t::set_allocated_header(::trace_format::header_t* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.trace_t.header)
}

// repeated .trace_format.body_t body = 2;
int trace_t::body_size() const {
  return body_.size();
}
void trace_t::clear_body() {
  body_.Clear();
}
const ::trace_format::body_t& trace_t::body(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.trace_t.body)
  return body_.Get(index);
}
::trace_format::body_t* trace_t::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.trace_t.body)
  return body_.Mutable(index);
}
::trace_format::body_t* trace_t::add_body() {
  // @@protoc_insertion_point(field_add:trace_format.trace_t.body)
  return body_.Add();
}
::google::protobuf::RepeatedPtrField< ::trace_format::body_t >*
trace_t::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.trace_t.body)
  return &body_;
}
const ::google::protobuf::RepeatedPtrField< ::trace_format::body_t >&
trace_t::body() const {
  // @@protoc_insertion_point(field_list:trace_format.trace_t.body)
  return body_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace trace_format

// @@protoc_insertion_point(global_scope)
