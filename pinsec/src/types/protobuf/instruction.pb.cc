// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "instruction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace instruction_pol {
class instr_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<instr_pol> {
  public:
  const ::instruction_pol::cpuid_pol* cpuid_;
} _instr_pol_default_instance_;
class cpuid_polDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<cpuid_pol> {
} _cpuid_pol_default_instance_;

namespace protobuf_instruction_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instr_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instr_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instr_pol, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instr_pol, ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instr_pol, opcode_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_instr_pol_default_instance_), cpuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instr_pol, instr_cnt_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cpuid_pol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cpuid_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cpuid_pol, eax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cpuid_pol, ebx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cpuid_pol, ecx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cpuid_pol, edx_),
  0,
  1,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(instr_pol)},
  { 11, 19, sizeof(cpuid_pol)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_instr_pol_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_cpuid_pol_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "instruction.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _instr_pol_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _cpuid_pol_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::common::protobuf_common_2eproto::InitDefaults();
  _instr_pol_default_instance_.DefaultConstruct();
  _cpuid_pol_default_instance_.DefaultConstruct();
  _instr_pol_default_instance_.cpuid_ = const_cast< ::instruction_pol::cpuid_pol*>(
      ::instruction_pol::cpuid_pol::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021instruction.proto\022\017instruction_pol\032\014co"
      "mmon.proto\"\202\001\n\tinstr_pol\022+\n\005ident\030\001 \002(\0162"
      "\034.instruction_pol.instr_ident\022\016\n\006opcode\030"
      "\002 \002(\t\022+\n\005cpuid\030\003 \001(\0132\032.instruction_pol.c"
      "puid_polH\000B\013\n\tinstr_cnt\"\243\001\n\tcpuid_pol\022$\n"
      "\003eax\030\001 \001(\0162\016.common.action:\007DEFAULT\022$\n\003e"
      "bx\030\002 \001(\0162\016.common.action:\007DEFAULT\022$\n\003ecx"
      "\030\003 \001(\0162\016.common.action:\007DEFAULT\022$\n\003edx\030\004"
      " \001(\0162\016.common.action:\007DEFAULT**\n\013instr_i"
      "dent\022\020\n\014INVALID_INST\020\000\022\t\n\005CPUID\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "instruction.proto", &protobuf_RegisterTypes);
  ::common::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_instruction_2eproto

const ::google::protobuf::EnumDescriptor* instr_ident_descriptor() {
  protobuf_instruction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_instruction_2eproto::file_level_enum_descriptors[0];
}
bool instr_ident_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int instr_pol::kIdentFieldNumber;
const int instr_pol::kOpcodeFieldNumber;
const int instr_pol::kCpuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

instr_pol::instr_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_instruction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:instruction_pol.instr_pol)
}
instr_pol::instr_pol(const instr_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opcode()) {
    opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
  }
  ident_ = from.ident_;
  clear_has_instr_cnt();
  switch (from.instr_cnt_case()) {
    case kCpuid: {
      mutable_cpuid()->::instruction_pol::cpuid_pol::MergeFrom(from.cpuid());
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:instruction_pol.instr_pol)
}

void instr_pol::SharedCtor() {
  _cached_size_ = 0;
  opcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ident_ = 0;
  clear_has_instr_cnt();
}

instr_pol::~instr_pol() {
  // @@protoc_insertion_point(destructor:instruction_pol.instr_pol)
  SharedDtor();
}

void instr_pol::SharedDtor() {
  opcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_instr_cnt()) {
    clear_instr_cnt();
  }
}

void instr_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instr_pol::descriptor() {
  protobuf_instruction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_instruction_2eproto::file_level_metadata[0].descriptor;
}

const instr_pol& instr_pol::default_instance() {
  protobuf_instruction_2eproto::InitDefaults();
  return *internal_default_instance();
}

instr_pol* instr_pol::New(::google::protobuf::Arena* arena) const {
  instr_pol* n = new instr_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void instr_pol::clear_instr_cnt() {
// @@protoc_insertion_point(one_of_clear_start:instruction_pol.instr_pol)
  switch (instr_cnt_case()) {
    case kCpuid: {
      delete instr_cnt_.cpuid_;
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTR_CNT_NOT_SET;
}


void instr_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:instruction_pol.instr_pol)
  if (has_opcode()) {
    GOOGLE_DCHECK(!opcode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*opcode_.UnsafeRawStringPointer())->clear();
  }
  ident_ = 0;
  clear_instr_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool instr_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:instruction_pol.instr_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .instruction_pol.instr_ident ident = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::instruction_pol::instr_ident_IsValid(value)) {
            set_ident(static_cast< ::instruction_pol::instr_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string opcode = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opcode().data(), this->opcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instruction_pol.instr_pol.opcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .instruction_pol.cpuid_pol cpuid = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:instruction_pol.instr_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:instruction_pol.instr_pol)
  return false;
#undef DO_
}

void instr_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:instruction_pol.instr_pol)
  // required .instruction_pol.instr_ident ident = 1;
  if (has_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ident(), output);
  }

  // required string opcode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instruction_pol.instr_pol.opcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opcode(), output);
  }

  // optional .instruction_pol.cpuid_pol cpuid = 3;
  if (has_cpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *instr_cnt_.cpuid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:instruction_pol.instr_pol)
}

::google::protobuf::uint8* instr_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:instruction_pol.instr_pol)
  // required .instruction_pol.instr_ident ident = 1;
  if (has_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ident(), target);
  }

  // required string opcode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instruction_pol.instr_pol.opcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opcode(), target);
  }

  // optional .instruction_pol.cpuid_pol cpuid = 3;
  if (has_cpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *instr_cnt_.cpuid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:instruction_pol.instr_pol)
  return target;
}

size_t instr_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:instruction_pol.instr_pol)
  size_t total_size = 0;

  if (has_opcode()) {
    // required string opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opcode());
  }

  if (has_ident()) {
    // required .instruction_pol.instr_ident ident = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());
  }

  return total_size;
}
size_t instr_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:instruction_pol.instr_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string opcode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opcode());

    // required .instruction_pol.instr_ident ident = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ident());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  switch (instr_cnt_case()) {
    // optional .instruction_pol.cpuid_pol cpuid = 3;
    case kCpuid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *instr_cnt_.cpuid_);
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instr_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:instruction_pol.instr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const instr_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const instr_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:instruction_pol.instr_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:instruction_pol.instr_pol)
    MergeFrom(*source);
  }
}

void instr_pol::MergeFrom(const instr_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:instruction_pol.instr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_opcode()) {
      set_has_opcode();
      opcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opcode_);
    }
    if (from.has_ident()) {
      set_ident(from.ident());
    }
  }
  switch (from.instr_cnt_case()) {
    case kCpuid: {
      mutable_cpuid()->::instruction_pol::cpuid_pol::MergeFrom(from.cpuid());
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
}

void instr_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:instruction_pol.instr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instr_pol::CopyFrom(const instr_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:instruction_pol.instr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instr_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void instr_pol::Swap(instr_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void instr_pol::InternalSwap(instr_pol* other) {
  opcode_.Swap(&other->opcode_);
  std::swap(ident_, other->ident_);
  std::swap(instr_cnt_, other->instr_cnt_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata instr_pol::GetMetadata() const {
  protobuf_instruction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_instruction_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// instr_pol

// required .instruction_pol.instr_ident ident = 1;
bool instr_pol::has_ident() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void instr_pol::set_has_ident() {
  _has_bits_[0] |= 0x00000002u;
}
void instr_pol::clear_has_ident() {
  _has_bits_[0] &= ~0x00000002u;
}
void instr_pol::clear_ident() {
  ident_ = 0;
  clear_has_ident();
}
::instruction_pol::instr_ident instr_pol::ident() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.ident)
  return static_cast< ::instruction_pol::instr_ident >(ident_);
}
void instr_pol::set_ident(::instruction_pol::instr_ident value) {
  assert(::instruction_pol::instr_ident_IsValid(value));
  set_has_ident();
  ident_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.instr_pol.ident)
}

// required string opcode = 2;
bool instr_pol::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void instr_pol::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void instr_pol::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void instr_pol::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opcode();
}
const ::std::string& instr_pol::opcode() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.opcode)
  return opcode_.GetNoArena();
}
void instr_pol::set_opcode(const ::std::string& value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:instruction_pol.instr_pol.opcode)
}
#if LANG_CXX11
void instr_pol::set_opcode(::std::string&& value) {
  set_has_opcode();
  opcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instruction_pol.instr_pol.opcode)
}
#endif
void instr_pol::set_opcode(const char* value) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instruction_pol.instr_pol.opcode)
}
void instr_pol::set_opcode(const char* value, size_t size) {
  set_has_opcode();
  opcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instruction_pol.instr_pol.opcode)
}
::std::string* instr_pol::mutable_opcode() {
  set_has_opcode();
  // @@protoc_insertion_point(field_mutable:instruction_pol.instr_pol.opcode)
  return opcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* instr_pol::release_opcode() {
  // @@protoc_insertion_point(field_release:instruction_pol.instr_pol.opcode)
  clear_has_opcode();
  return opcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void instr_pol::set_allocated_opcode(::std::string* opcode) {
  if (opcode != NULL) {
    set_has_opcode();
  } else {
    clear_has_opcode();
  }
  opcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:instruction_pol.instr_pol.opcode)
}

// optional .instruction_pol.cpuid_pol cpuid = 3;
bool instr_pol::has_cpuid() const {
  return instr_cnt_case() == kCpuid;
}
void instr_pol::set_has_cpuid() {
  _oneof_case_[0] = kCpuid;
}
void instr_pol::clear_cpuid() {
  if (has_cpuid()) {
    delete instr_cnt_.cpuid_;
    clear_has_instr_cnt();
  }
}
 const ::instruction_pol::cpuid_pol& instr_pol::cpuid() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.cpuid)
  return has_cpuid()
      ? *instr_cnt_.cpuid_
      : ::instruction_pol::cpuid_pol::default_instance();
}
::instruction_pol::cpuid_pol* instr_pol::mutable_cpuid() {
  if (!has_cpuid()) {
    clear_instr_cnt();
    set_has_cpuid();
    instr_cnt_.cpuid_ = new ::instruction_pol::cpuid_pol;
  }
  // @@protoc_insertion_point(field_mutable:instruction_pol.instr_pol.cpuid)
  return instr_cnt_.cpuid_;
}
::instruction_pol::cpuid_pol* instr_pol::release_cpuid() {
  // @@protoc_insertion_point(field_release:instruction_pol.instr_pol.cpuid)
  if (has_cpuid()) {
    clear_has_instr_cnt();
    ::instruction_pol::cpuid_pol* temp = instr_cnt_.cpuid_;
    instr_cnt_.cpuid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void instr_pol::set_allocated_cpuid(::instruction_pol::cpuid_pol* cpuid) {
  clear_instr_cnt();
  if (cpuid) {
    set_has_cpuid();
    instr_cnt_.cpuid_ = cpuid;
  }
  // @@protoc_insertion_point(field_set_allocated:instruction_pol.instr_pol.cpuid)
}

bool instr_pol::has_instr_cnt() const {
  return instr_cnt_case() != INSTR_CNT_NOT_SET;
}
void instr_pol::clear_has_instr_cnt() {
  _oneof_case_[0] = INSTR_CNT_NOT_SET;
}
instr_pol::InstrCntCase instr_pol::instr_cnt_case() const {
  return instr_pol::InstrCntCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cpuid_pol::kEaxFieldNumber;
const int cpuid_pol::kEbxFieldNumber;
const int cpuid_pol::kEcxFieldNumber;
const int cpuid_pol::kEdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cpuid_pol::cpuid_pol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_instruction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:instruction_pol.cpuid_pol)
}
cpuid_pol::cpuid_pol(const cpuid_pol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eax_, &from.eax_,
    reinterpret_cast<char*>(&edx_) -
    reinterpret_cast<char*>(&eax_) + sizeof(edx_));
  // @@protoc_insertion_point(copy_constructor:instruction_pol.cpuid_pol)
}

void cpuid_pol::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eax_, 0, reinterpret_cast<char*>(&edx_) -
    reinterpret_cast<char*>(&eax_) + sizeof(edx_));
}

cpuid_pol::~cpuid_pol() {
  // @@protoc_insertion_point(destructor:instruction_pol.cpuid_pol)
  SharedDtor();
}

void cpuid_pol::SharedDtor() {
}

void cpuid_pol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cpuid_pol::descriptor() {
  protobuf_instruction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_instruction_2eproto::file_level_metadata[1].descriptor;
}

const cpuid_pol& cpuid_pol::default_instance() {
  protobuf_instruction_2eproto::InitDefaults();
  return *internal_default_instance();
}

cpuid_pol* cpuid_pol::New(::google::protobuf::Arena* arena) const {
  cpuid_pol* n = new cpuid_pol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cpuid_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:instruction_pol.cpuid_pol)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&eax_, 0, reinterpret_cast<char*>(&edx_) -
      reinterpret_cast<char*>(&eax_) + sizeof(edx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool cpuid_pol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:instruction_pol.cpuid_pol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.action eax = 1 [default = DEFAULT];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_eax(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action ebx = 2 [default = DEFAULT];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ebx(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action ecx = 3 [default = DEFAULT];
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ecx(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action edx = 4 [default = DEFAULT];
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_edx(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:instruction_pol.cpuid_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:instruction_pol.cpuid_pol)
  return false;
#undef DO_
}

void cpuid_pol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:instruction_pol.cpuid_pol)
  // optional .common.action eax = 1 [default = DEFAULT];
  if (has_eax()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eax(), output);
  }

  // optional .common.action ebx = 2 [default = DEFAULT];
  if (has_ebx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ebx(), output);
  }

  // optional .common.action ecx = 3 [default = DEFAULT];
  if (has_ecx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ecx(), output);
  }

  // optional .common.action edx = 4 [default = DEFAULT];
  if (has_edx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->edx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:instruction_pol.cpuid_pol)
}

::google::protobuf::uint8* cpuid_pol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:instruction_pol.cpuid_pol)
  // optional .common.action eax = 1 [default = DEFAULT];
  if (has_eax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eax(), target);
  }

  // optional .common.action ebx = 2 [default = DEFAULT];
  if (has_ebx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ebx(), target);
  }

  // optional .common.action ecx = 3 [default = DEFAULT];
  if (has_ecx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ecx(), target);
  }

  // optional .common.action edx = 4 [default = DEFAULT];
  if (has_edx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->edx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:instruction_pol.cpuid_pol)
  return target;
}

size_t cpuid_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:instruction_pol.cpuid_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .common.action eax = 1 [default = DEFAULT];
    if (has_eax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eax());
    }

    // optional .common.action ebx = 2 [default = DEFAULT];
    if (has_ebx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ebx());
    }

    // optional .common.action ecx = 3 [default = DEFAULT];
    if (has_ecx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ecx());
    }

    // optional .common.action edx = 4 [default = DEFAULT];
    if (has_edx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->edx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cpuid_pol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:instruction_pol.cpuid_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const cpuid_pol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cpuid_pol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:instruction_pol.cpuid_pol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:instruction_pol.cpuid_pol)
    MergeFrom(*source);
  }
}

void cpuid_pol::MergeFrom(const cpuid_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:instruction_pol.cpuid_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_eax()) {
      set_eax(from.eax());
    }
    if (from.has_ebx()) {
      set_ebx(from.ebx());
    }
    if (from.has_ecx()) {
      set_ecx(from.ecx());
    }
    if (from.has_edx()) {
      set_edx(from.edx());
    }
  }
}

void cpuid_pol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:instruction_pol.cpuid_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cpuid_pol::CopyFrom(const cpuid_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:instruction_pol.cpuid_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cpuid_pol::IsInitialized() const {
  return true;
}

void cpuid_pol::Swap(cpuid_pol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cpuid_pol::InternalSwap(cpuid_pol* other) {
  std::swap(eax_, other->eax_);
  std::swap(ebx_, other->ebx_);
  std::swap(ecx_, other->ecx_);
  std::swap(edx_, other->edx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cpuid_pol::GetMetadata() const {
  protobuf_instruction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_instruction_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// cpuid_pol

// optional .common.action eax = 1 [default = DEFAULT];
bool cpuid_pol::has_eax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void cpuid_pol::set_has_eax() {
  _has_bits_[0] |= 0x00000001u;
}
void cpuid_pol::clear_has_eax() {
  _has_bits_[0] &= ~0x00000001u;
}
void cpuid_pol::clear_eax() {
  eax_ = 0;
  clear_has_eax();
}
::common::action cpuid_pol::eax() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.eax)
  return static_cast< ::common::action >(eax_);
}
void cpuid_pol::set_eax(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_eax();
  eax_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.eax)
}

// optional .common.action ebx = 2 [default = DEFAULT];
bool cpuid_pol::has_ebx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void cpuid_pol::set_has_ebx() {
  _has_bits_[0] |= 0x00000002u;
}
void cpuid_pol::clear_has_ebx() {
  _has_bits_[0] &= ~0x00000002u;
}
void cpuid_pol::clear_ebx() {
  ebx_ = 0;
  clear_has_ebx();
}
::common::action cpuid_pol::ebx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.ebx)
  return static_cast< ::common::action >(ebx_);
}
void cpuid_pol::set_ebx(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ebx();
  ebx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.ebx)
}

// optional .common.action ecx = 3 [default = DEFAULT];
bool cpuid_pol::has_ecx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void cpuid_pol::set_has_ecx() {
  _has_bits_[0] |= 0x00000004u;
}
void cpuid_pol::clear_has_ecx() {
  _has_bits_[0] &= ~0x00000004u;
}
void cpuid_pol::clear_ecx() {
  ecx_ = 0;
  clear_has_ecx();
}
::common::action cpuid_pol::ecx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.ecx)
  return static_cast< ::common::action >(ecx_);
}
void cpuid_pol::set_ecx(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_ecx();
  ecx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.ecx)
}

// optional .common.action edx = 4 [default = DEFAULT];
bool cpuid_pol::has_edx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void cpuid_pol::set_has_edx() {
  _has_bits_[0] |= 0x00000008u;
}
void cpuid_pol::clear_has_edx() {
  _has_bits_[0] &= ~0x00000008u;
}
void cpuid_pol::clear_edx() {
  edx_ = 0;
  clear_has_edx();
}
::common::action cpuid_pol::edx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.edx)
  return static_cast< ::common::action >(edx_);
}
void cpuid_pol::set_edx(::common::action value) {
  assert(::common::action_IsValid(value));
  set_has_edx();
  edx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.edx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace instruction_pol

// @@protoc_insertion_point(global_scope)
