(**************************************************************************)
(*  This file is part of Binsec.                                          *)
(*                                                                        *)
(*  Copyright (C) 2016-2017                                               *)
(*    CEA (Commissariat à l'énergie atomique et aux énergies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(** Smtlib2 printer *)

(** This module aim at generating well formatted smtlib2 
    formulas, taking in account some solvers differences
    (e.g: boolector not supporting function have arrays 
    in parameters). All the strings generated by this
    module are smtlib 2 compliant. *)

open Smtlib2

(** pretty print the [smt_result] with a given color *)
val pp_smt_result: Format.formatter -> smt_result -> unit

(** @return the string associated with a [smt_result] *)
val smtres_to_string: smt_result -> string

(** @return the string of an unary bitvector expression *)
val smtbvunary_to_string: smt_bv_unary -> string

(** @return the string of a binary bitvector expression *)
val smtbvbinary_to_string: smt_bv_binary -> string

(** @return the string of a bitvector expression. [~inline] 
    defines if {!SmtABvLoad32}, {!SmtABvStore32} functions should
    be inlined or not. (used for solvers not supporting this
    functions)
*)
val smtbvexpr_to_string: ?inline:bool -> smt_bv_expr -> string

(** see smtbvexpr_to_string *)
val smtabvexpr_to_string: ?inline:bool -> smt_abv_expr -> string

(** see smtbvexpr_to_string *)
val smtexpr_to_string: ?inline:bool -> smt_expr -> string

(** @return the string formatting every input variable on
    a new line *)
val smtvarset_to_string: SmtVarSet.t -> string

(** @return the preformatted header *)
val smt_header: unit -> string

(** @return or not the functions used in the formula. It uses
    internally the solver selected and the option [-nat-cond]
    to include or not array related functions *)
val smt_functions: unit -> string
